<?xml version="1.0" encoding="UTF-8"?>
<fps version="1.1" url="http://code.google.com/p/freeproblemset/">
    <generator name="HUSTOJ" url="http://code.google.com/p/hustoj/"/>
    <item>
        <title><![CDATA[汽水瓶]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <description><![CDATA[<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">有这样一道智力题：&ldquo;</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">某商店</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">规定：</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">三个空汽水瓶可以换一瓶汽水</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">。</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">小张手上有十个空汽水瓶，她最多可以换多少瓶汽水喝？</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">&rdquo;</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">答案是</span><span lang="EN-US">5</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">瓶</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:
ZH-CN">，方法如下</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">：先用</span><span lang="EN-US">9</span><span lang="EN-US" style="font-family:
宋体;mso-bidi-font-family:宋体">个空瓶子换</span><span lang="EN-US">3</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">瓶汽水，喝掉</span><span lang="EN-US">3</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">瓶满的，喝完以后</span><span lang="EN-US">4</span><span lang="EN-US" style="font-family:
宋体;mso-bidi-font-family:宋体">个空瓶子，用</span><span lang="EN-US">3</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">个再换一瓶，喝掉这瓶满的，这时候剩</span><span lang="EN-US">2</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">个空瓶子。然后你让老板先借给你一瓶汽水，喝掉这瓶满的，喝完以后用</span><span lang="EN-US">3</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">个空瓶子换一瓶满的还给老板。如果小张手上有</span><i><span lang="EN-US">n</span></i><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">个空汽水瓶，最多可以换多少瓶汽水喝？</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>
<h1><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:黑体;
mso-hansi-font-family:Arial;mso-fareast-language:ZH-CN">输入</span></h1>
<p style="text-align:justify;text-justify:inter-ideograph;
text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">输入文件最多包含</span><span lang="EN-US">10</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">组测试数据，每个数据占一行，仅包含一个正整数</span><i><span lang="EN-US">n</span></i><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">（</span><span lang="EN-US">1&lt;=<i>n</i>&lt;=100</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">），表示小张手上的空汽水瓶数。</span><i><span lang="EN-US">n</span></i><span lang="EN-US">=0</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">表示输入结束，你的程序不应当处理这一行。</span></p>
<p style="line-height:normal" class="MsoFooter"><span lang="EN-US" style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">&nbsp;</span></p>
<h1><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:黑体;
mso-hansi-font-family:Arial;mso-fareast-language:ZH-CN">输出</span></h1>
<p style="text-align:justify;text-justify:inter-ideograph;
text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">对于每组测试数据，输出一行，表示最多可以喝的汽水瓶数。如果一瓶也</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">喝不到</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">，输出</span><span lang="EN-US">0</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">。</span></p>]]></description>
        <input><![CDATA[]]></input>
        <output><![CDATA[]]></output>
        <sample_input><![CDATA[3
10
81
0
]]></sample_input>
        <sample_output><![CDATA[1
5
40
]]></sample_output>
        <test_input><![CDATA[68
52
61
81
51
69
59
95
94
10
0
]]></test_input>
        <test_output><![CDATA[34
26
30
40
25
34
29
47
47
5
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include<stdio.h>
int main() {
  int n;
  while(scanf("%d", &n) == 1) {
    if(!n) break;
    printf("%d\n", n/2);
  }
  return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[弟弟的作业]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <description><![CDATA[<p><span lang="EN-US" style="font-size:10.0pt;font-family:
宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">你的弟弟刚做完了</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">&ldquo;100</span><span lang="EN-US" style="font-size:10.0pt;
font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">以内数的加减法</span><span lang="EN-US" style="font-size:10.0pt;
font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">&rdquo;</span><span lang="EN-US" style="font-size:10.0pt;font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA">这部分的作业，请你帮他检查一下。每道题目（包括弟弟的答案）的格式</span><span style="font-size:10.0pt;font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN;mso-bidi-language:AR-SA">为</span><i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">a</span></i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">+<i>b</i>=<i>c</i></span><span style="font-size:10.0pt;font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN;mso-bidi-language:AR-SA">或者</span><i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">a</span></i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">-<i>b</i>=<i>c</i></span><span style="font-size:10.0pt;font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN;mso-bidi-language:AR-SA">，其中</span><i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">a</span></i><span style="font-size:10.0pt;font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN;mso-bidi-language:AR-SA">和</span><i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">b</span></i><span lang="EN-US" style="font-size:10.0pt;font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA">是作业中给出的，均为不超过</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">100</span><span lang="EN-US" style="font-size:10.0pt;
font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">的非负整数</span><span style="font-size:10.0pt;font-family:
宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">；</span><i><span lang="EN-US" style="font-size:10.0pt;
font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:宋体;mso-ansi-language:
EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">c</span></i><span lang="EN-US" style="font-size:10.0pt;font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-bidi-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA">是弟弟算出的答案，可能是不超过</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">200</span><span lang="EN-US" style="font-size:10.0pt;
font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">的非负整数，也可能是单个字符</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">&quot;</span><span lang="EN-US" style="font-size:10.0pt;
font-family:&quot;Courier New&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:
EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">?</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">&quot;</span><span lang="EN-US" style="font-size:10.0pt;
font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">，表示他不会算。</span></p>
<p></p>]]></description>
        <input><![CDATA[<p><span lang="EN-US" style="font-size:10.0pt;font-family:
宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">输入文件包含不超过</span><span lang="EN-US" style="font-size:
10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">100</span><span lang="EN-US" style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">行，以文件结束符结尾。每行包含一道题目，格式保证符合上述规定，且不包含任何空白字符。输入的所有整数均不含前导</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">0</span><span lang="EN-US" style="font-size:10.0pt;
font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA">。</span></p>
<p></p>]]></input>
        <output><![CDATA[<p><span lang="EN-US" style="font-size:10.0pt;font-family:
宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">输出仅一行，包含一个非负整数，即弟弟答对的题目数量。</span></p>
<p></p>]]></output>
        <sample_input><![CDATA[1+2=3
3-1=5
6+7=?
99-0=99
]]></sample_input>
        <sample_output><![CDATA[2]]></sample_output>
        <test_input><![CDATA[24-2=?
5+11=16
55-35=20
56+13=81
82+31=163
24+18=?
24+8=32
95-25=83
86-54=32
23+61=84
58+68=36
94-45=49
58+8=?
18+99=?
62-61=?
83+61=144
91+35=126
86+100=90
5+88=?
13+11=14
76-44=?
89-8=41
4+57=87
62+12=137
49+36=?
18+84=102
34+13=47
49+20=27
43-29=14
34+87=121
63+14=77
70+40=33
61+3=?
71+27=100
86+64=124
68+76=152
20+13=?
68-62=?
59+76=130
47-34=13
84+53=137
65-60=5
50+3=?
3+16=19
5+79=84
49+32=174
75-41=36
27+34=55
39+70=109
42+96=179
100+32=145
11+38=?
24+98=93
55+67=122
2+0=72
35+66=101
93+80=165
33+70=?
100-31=69
6+99=74
19+57=?
16+72=?
83-10=73
66+78=2
8+6=132
36-31=132
41+7=48
8-1=?
92-12=19
54-6=?
64-40=24
24+89=176
88+63=95
76+26=156
21+23=44
68+73=141
33-11=22
29+74=?
69-3=66
85-12=?
26+65=90
81-23=?
56+91=147
93-46=113
62+38=?
23+41=64
98+6=104
19+49=68
37+88=125
83+25=136
1+81=?
7+45=52
47-18=29
10+46=56
55+12=67
15-8=7
100-35=?
83-50=33
4-3=6
81+5=21
]]></test_input>
        <test_output><![CDATA[40
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include<stdio.h>
int main() {
  char s[99];
  int a, b, c, n = 0;
  while(scanf("%s", &s) == 1) {
    if(sscanf(s, "%d+%d=%d", &a, &b, &c) == 3 && a+b==c) n++;
    if(sscanf(s, "%d-%d=%d", &a, &b, &c) == 3 && a-b==c) n++;
  }
  printf("%d\n", n);
  return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[数字整除]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <description><![CDATA[<p>定理：把一个至少两位的正整数的个位数字去掉，再从余下的数中减去个位数的5倍。当且仅当差是17的倍数时，原数也是17的倍数 。</p>
<p>例如，34是17的倍数，因为3-20=-17是17的倍数；201不是17的倍数，因为20-5=15不是17的倍数。输入一个正整数n，你的任务是判断它是否是17的倍数。</p>]]></description>
        <input>
            <![CDATA[<p>输入文件最多包含10组测试数据，每个数据占一行，仅包含一个正整数n（1&lt;=n&lt;=10100），表示待判断的正整数。n=0表示输入结束，你的程序不应当处理这一行。</p>]]></input>
        <output><![CDATA[<p>对于每组测试数据，输出一行，表示相应的n是否是17的倍数。1表示是，0表示否。</p>]]></output>
        <sample_input><![CDATA[34
201
2098765413
1717171717171717171717171717171717171717171717171718
0
]]></sample_input>
        <sample_output><![CDATA[1
0
1
0
]]></sample_output>
        <test_input><![CDATA[802845032780310983066540100266930755157218769840134443886478149678247100
113469587689055067561760458146915851046473592803979118913854437711824668633718102578
2690080950550760234
53994493123986665824867214748214632319362490366570756266622517258247
1219594477174993362138918072516929272211792
11666241058106388377671695140449754946354380184658002043843152247653046061186211217020
1009937
76570983985429
76685959034312977783994661887596458685913087
13470496282580323351245655494651490446957372600980169360
0
]]></test_input>
        <test_output><![CDATA[1
1
1
0
0
1
0
0
0
0
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include<stdio.h>
#include<string.h>
int main() {
  char s[200];
  while(scanf("%s", &s) == 1) {
    if(!strcmp(s, "0")) break;
    int m = 0;
    for(int i = 0; i < strlen(s); i++)
      m = (m*10+s[i]-'0')%17;
    printf("%d\n", m==0?1:0);
  }
  return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[台球碰撞]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/d(1).jpg]]></src>
            <base64>
                <![CDATA[]]></base64>
        </img>
        <description><![CDATA[<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--><span style="font-size:10.0pt;font-family:宋体;
mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">在平面直角坐标系下，台球桌是一个左下角在</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">(0,0)</span><span style="font-size:10.0pt;font-family:
宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">，右上角在</span><span lang="EN-US" style="font-size:10.0pt;
font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">(<i>L</i>,<i>W</i>)</span><span style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:
EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">的矩形。有一个球心在</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">(<i>x</i>,<i>y</i>)</span><span style="font-size:10.0pt;
font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN;mso-bidi-language:AR-SA">，半径为</span><i><span lang="EN-US" style="font-size:
10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">R</span></i><span style="font-size:10.0pt;font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-hansi-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA;
mso-bidi-font-style:italic">的圆形</span><span style="font-size:10.0pt;font-family:
宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">母球放在台球桌上（整个球都在台球桌内）。受撞击后，球沿极角为</span><i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">a</span></i><span style="font-size:10.0pt;font-family:
宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">的射线（即：</span><i><span lang="EN-US" style="font-size:
10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">x</span></i><span style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:
EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">正半轴逆时针旋转到此射线的角度为</span><i style="mso-bidi-font-style:normal"><span lang="EN-US" style="font-size:10.0pt;
font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:宋体;mso-ansi-language:
EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">a</span></i><span style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:
EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">）飞出，每次碰到球桌时均发生完全弹性碰撞（球的速率不变，反射角等于入射角）。<img width="417" height="368" src="http://oj.zjicm.acm.zj.cn:80/upload/201205/d(1).jpg" alt="" /></span></p>
<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--><span lang="EN-US" style="font-size:10.0pt;font-family:
宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">如果球的速率为</span><i><span lang="EN-US" style="font-size:
10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">v</span></i><span lang="EN-US" style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">，</span><i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">s</span></i><span lang="EN-US" style="font-size:10.0pt;
font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA">个时间单位之后球心在什么地方？</span></p>]]></description>
        <input><![CDATA[<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">输入文件最多包含</span><span lang="NL" style="mso-ansi-language:NL">25</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">组测试数据</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:NL">，</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">每个数据仅一行</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:
NL">，</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">包含</span><span lang="NL" style="mso-ansi-language:NL">8</span><span lang="EN-US" style="font-family:
宋体;mso-bidi-font-family:宋体">个正整数</span><i><span lang="NL" style="mso-ansi-language:
NL">L</span></i><span lang="NL" style="mso-ansi-language:NL">,<i>W</i>,<i>x</i>,<i>y</i>,<i>R</i>,<i>a</i>,<i>v</i>,<i>s</i></span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:
NL">（</span><span lang="NL" style="mso-ansi-language:NL">100&lt;=<i>L</i>,<i>W</i>&lt;=10<sup>5</sup>, 1&lt;=<i>R</i>&lt;=5, <i>R</i>&lt;=<i>x</i>&lt;=<i>L</i>-<i>R</i>, <i>R</i>&lt;=<i>y</i>&lt;=<i>W</i>-<i>R</i>, 0&lt;=<i>a</i>&lt;360, 1&lt;=<i>v</i>,<i>s</i>&lt;=10<sup>5</sup></span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:
NL">），</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">含义见题目描述。</span><i><span lang="EN-US">L</span></i><span lang="EN-US">=<i>W</i>=<i>x</i>=<i>y</i>=<i>R</i>=<i>a</i>=<i>v</i>=<i>s</i>=0</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">表示输入结束，你的程序不应当处理这一行。</span></p>]]></input>
        <output><![CDATA[<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--><span lang="EN-US" style="font-size:10.0pt;font-family:
宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">对于每组数据，输出仅一行，包含两个</span><span style="font-size:10.0pt;
font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN;mso-bidi-language:AR-SA">实数</span><i><span lang="EN-US" style="font-size:
10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">x</span></i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">, <i>y</i></span><span lang="EN-US" style="font-size:
10.0pt;font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;
mso-fareast-language:EN-US;mso-bidi-language:AR-SA">，表明球心坐标为</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">(<i>x</i>,<i>y</i>)</span><span lang="EN-US" style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:
EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">。</span><i><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA">x</span></i><span lang="EN-US" style="font-size:10.0pt;
font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA">和</span><i><span lang="EN-US" style="font-size:
10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">y</span></i><span lang="EN-US" style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">应</span><span style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;mso-ansi-language:
EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">四舍五入</span><span lang="EN-US" style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;
mso-ansi-language:EN-US;mso-fareast-language:EN-US;mso-bidi-language:AR-SA">保留两位小数。</span></p>]]></output>
        <sample_input><![CDATA[100 100 80 10 5 90 2 23
110 100 70 10 5 180 1 9999
0 0 0 0 0 0 0 0
]]></sample_input>
        <sample_output><![CDATA[80.00 56.00
71.00 10.00
]]></sample_output>
        <test_input><![CDATA[3316 677 1738 184 3 191 5964 830
8538 547 4076 40 4 131 23 57
577 732 296 537 3 288 11 694
3589 3624 3552 3068 4 151 96081 9088
30641 715 25857 41 1 294 261 2
692 8177 421 1988 1 75 8474 70
600 22944 575 22587 1 339 5 31086
35079 31889 34950 18609 2 350 8453 768
11658 44198 9921 15822 2 178 792 10
3397 7905 2164 7855 5 96 5664 42870
998 146 322 40 1 353 29982 1
4270 3588 3637 3501 1 207 267 886
88070 1176 85075 518 2 60 61 9046
4442 70812 1319 18644 4 311 1629 2463
16843 817 726 163 2 192 50 682
81542 7471 43998 5336 4 18 64214 54
22790 225 20887 215 4 350 7348 56
1652 79013 117 20872 4 44 31 1695
34031 841 8204 211 2 250 56 2
248 95749 170 19928 3 224 583 408
55006 37154 25905 11211 4 277 9492 8394
9557 7971 1159 7344 1 282 406 995
7063 684 4662 582 2 247 9 261
34431 522 3020 417 2 191 67 6
3732 56904 3511 26612 4 292 8 436
0 0 0 0 0 0 0 0
]]></test_input>
        <test_output><![CDATA[1645.65 424.58
3215.91 56.58
371.04 536.63
2118.31 1226.50
26069.32 437.87
614.72 2705.88
232.59 12769.87
25576.61 24612.30
2005.82 16098.40
3192.11 1105.30
200.52 130.11
2279.29 3489.90
8714.00 220.01
227.25 35662.15
1049.17 426.79
80479.73 2197.73
16047.57 71.14
1549.29 57372.82
8165.69 105.75
89.04 46179.78
53703.72 24065.31
8709.09 5288.29
3744.17 224.27
2625.39 340.29
2638.37 23377.98
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include<stdio.h>
#include<math.h>
int main() {
  double L, W, x, y, R, a, v, s;
  while(scanf("%lf%lf%lf%lf%lf%lf%lf%lf", &L, &W, &x, &y, &R, &a, &v, &s) == 8) {
    if(!L) break;
    x -= R; y -= R; L -= R*2; W -= R*2; a *= acos(0.0)/90.0;
    double dx = fmod(fmod(v*s*cos(a), L*2)+L*2, L*2);
    double dy = fmod(fmod(v*s*sin(a), W*2)+W*2, W*2);
    if(x+dx <= L) x += dx; else if(x+dx <= L*2) x = L-(x+dx-L); else x = x+dx-L*2;
    if(y+dy <= W) y += dy; else if(y+dy <= W*2) y = W-(y+dy-W); else y = y+dy-W*2;
    printf("%.2lf %.2lf\n", x+R, y+R);
  }
  return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[内部收益率]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/E.jpg]]></src>
            <base64>
                <![CDATA[]]></base64>
        </img>
        <description><![CDATA[<p><!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]--><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">在金融中，我们有时会用内部收益率</span><i><span lang="EN-US" style="mso-fareast-language:
ZH-CN">IRR</span></i><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;
mso-fareast-language:ZH-CN">来评价项目的投资财务效益，它等于使得投资净现值</span><i style="mso-bidi-font-style:
normal"><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-hansi-font-family:
宋体;mso-fareast-language:ZH-CN">NPV</span></i><span style="font-family:宋体;
mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">等于</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">0</span><span style="font-family:
宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">的贴现率。换句话说，给定项目的期数</span><i style="mso-bidi-font-style:normal"><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-hansi-font-family:宋体;mso-fareast-language:ZH-CN">T</span></i><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">、初始现金流</span><i style="mso-bidi-font-style:normal"><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">CF</span></i><sub><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">0</span></sub><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">和项目各期的现金流</span><i style="mso-bidi-font-style:normal"><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">CF</span></i><sub><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">1</span></sub><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">, <i style="mso-bidi-font-style:normal">CF</i><sub>2</sub>, ...</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-hansi-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">，</span><i style="mso-bidi-font-style:
normal"><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:
ZH-CN">CF<sub>T</sub></span></i><span style="font-family:宋体;mso-ascii-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">，</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">IRR</span></i><span style="font-family:宋体;
mso-ascii-font-family:&quot;Times New Roman&quot;;mso-hansi-font-family:&quot;Times New Roman&quot;;
mso-fareast-language:ZH-CN;mso-bidi-font-style:italic">是下面方程的解</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">：</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>
<p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US"><span style="position:relative;top:18.0pt;mso-text-raise:-18.0pt"><img src="http://oj.zjicm.acm.zj.cn:80/upload/201205/E.jpg" alt="" /></span></span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">为了简单起见，本题假定：除了项目启动时有一笔投入（即初始现金流</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">CF</span></i><sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">0</span></sub><span lang="EN-US" style="mso-fareast-language:ZH-CN"> &lt; 0</span><span style="font-family:宋体;
mso-ascii-font-family:&quot;Times New Roman&quot;;mso-hansi-font-family:&quot;Times New Roman&quot;;
mso-fareast-language:ZH-CN">）之外</span><span style="font-family:宋体;mso-bidi-font-family:
宋体;mso-fareast-language:ZH-CN">，其余各期均能赚钱（即对于</span><span style="font-family:
宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">所有</span><i style="mso-bidi-font-style:normal"><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">i</span></i><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">=1,2,...,<i style="mso-bidi-font-style:normal">T</i></span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">，</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">CF</span></i><sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">i</span></sub><sub><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span></sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">&gt;</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span><span lang="EN-US" style="mso-fareast-language:ZH-CN">0</span><span style="font-family:
宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-hansi-font-family:&quot;Times New Roman&quot;;
mso-fareast-language:ZH-CN">）</span><span style="font-family:宋体;mso-bidi-font-family:
宋体;mso-fareast-language:ZH-CN">。根据</span><span style="font-family:宋体;
mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">定义，</span><i style="mso-bidi-font-style:normal"><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">IRR</span></i><span style="font-family:宋体;
mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">可以是负数，但不能大于</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">-1</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">。</span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>
<h1><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:黑体;
mso-hansi-font-family:Arial;mso-fareast-language:ZH-CN">输入</span></h1>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">输入文件最多包含</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">25</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">组测试数据，每个数据占两行，第一行包含一个正整数</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">T</span></i><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">（</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">1&lt;=<i>T</i>&lt;=10</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">），表示项目的期数。第二行包含</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">T</span></i><span lang="EN-US" style="mso-fareast-language:ZH-CN">+1</span><span style="font-family:宋体;
mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">个整数：</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">CF</span></i><sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">0</span></sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">, <i>CF</i><sub>1</sub>, <i>CF</i><sub>2</sub>, ..., <i>CF<sub>T</sub></i></span><span style="font-family:宋体;mso-bidi-font-family:
宋体;mso-fareast-language:ZH-CN">，其中</span><i><span lang="EN-US" style="mso-fareast-language:
ZH-CN">CF</span></i><sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">0</span></sub><sub><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span></sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">&lt;</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span><span lang="EN-US" style="mso-fareast-language:ZH-CN">0, 0</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span><span lang="EN-US" style="mso-fareast-language:ZH-CN">&lt;</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">CF<sub>i</sub></span></i><i><sub><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span></sub></i><span lang="EN-US" style="mso-fareast-language:ZH-CN">&lt;</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span><span lang="EN-US" style="mso-fareast-language:ZH-CN">10000 (<i>i</i>=1,2,...,<i>T</i>)</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">。</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">T</span></i><span lang="EN-US" style="mso-fareast-language:ZH-CN">=0</span><span style="font-family:宋体;
mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">表示输入结束，你的程序不应当处理这一行。</span></p>
<p style="line-height:normal" class="MsoFooter"><span lang="EN-US" style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN">&nbsp;</span></p>
<h1><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:黑体;
mso-hansi-font-family:Arial;mso-fareast-language:ZH-CN">输出</span></h1>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">对于每组数据，输出仅一行，即项目的</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">IRR</span></i><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">，四舍五入保留小数点后两位。</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">如果</span><i><span lang="EN-US">IRR</span></i><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">不存在，输出</span><span lang="EN-US">&quot;</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">No</span><span lang="EN-US">&quot;</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">，如果有多个不同</span><i><span lang="EN-US">IRR</span></i><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:
宋体">满足条件，输出</span><span lang="EN-US">&quot;</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">Too many</span><span lang="EN-US">&quot;</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">（均不含引号）</span></p>]]></description>
        <input><![CDATA[]]></input>
        <output><![CDATA[]]></output>
        <sample_input><![CDATA[1
-1 2
2
-8 6 9
0
]]></sample_input>
        <sample_output><![CDATA[1.00
0.50
]]></sample_output>
        <test_input><![CDATA[5
-3716 4142 4579 6374 9305 5272
2
-7230 5104 3386
9
-3007 6267 6131 1356 9729 7700 1259 3601 3750 8200
1
-6361 2297
6
-8658 658 2703 6343 432 8319 7576
1
-8349 917
7
-7480 8137 2491 2699 8434 7131 9485 203
7
-6841 3637 3401 9407 8914 6131 4522 5347
6
-1003 2343 4267 6276 3253 2269 4422
10
-9231 7256 3267 5837 8876 245 5315 3949 9245 2857 6859
7
-2110 8616 3595 3415 2534 5763 4567 386
5
-8321 9885 740 7544 736 222
7
-8442 5707 4947 1515 9004 618 6831 1395
1
-3922 2456
10
-8892 627 4485 9537 4165 6914 3544 9141 7211 5956 2719
3
-8279 1688 5489 7449
3
-530 7473 4556 296
6
-2484 9713 8622 8881 8448 5195 9098
4
-4663 2231 8271 8107 7042
1
-4210 7206
3
-6643 6383 2054 2295
6
-599 7490 2872 931 2266 8490 9973
9
-9200 798 4977 970 8385 1687 8537 7247 7337 5167
1
-4375 7632
2
-2720 5642 4581
0
]]></test_input>
        <test_output><![CDATA[1.26
0.12
1.98
-0.64
0.31
-0.89
0.77
0.72
2.90
0.61
3.56
0.62
0.54
-0.37
0.47
0.28
13.69
3.82
0.99
0.71
0.37
11.89
0.37
0.74
1.70
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include<stdio.h>
int main() {
  int n;
  int cf[20];
  while(scanf("%d", &n) == 1) {
    if(!n) break;
    for(int i = 0; i <= n; i++) scanf("%d", &cf[i]);
    double l = -1.0, r = 1e6, m;
    for(int i = 0; i < 100; i++) {
      m = l + (r-l)/2;
      double f = 1.0, s = 0;
      for(int j = 1; j <= n; j++) {
        f /= (1+m);
        s += cf[j]*f;
      }
      if(s < -cf[0]) r = m; else l = m;
    }
    printf("%.2lf\n", m);
  }
  return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[Biggest Number]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/f.jpg]]></src>
            <base64>
                <![CDATA[]]></base64>
        </img>
        <description><![CDATA[<p><!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]--><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--></p>
<p class="MsoNormal"><span lang="EN-US">You have a maze </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">with</span><span lang="EN-US"> obstacles and </span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">non-zero digits</span><span lang="EN-US"> in it:</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US"><img src="http://oj.zjicm.acm.zj.cn:80/upload/201205/f.jpg" alt="" /></span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">You can start from any square, walk in the maze, and finally stop at some square. </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">Each step, you may only walk into one of the <b style="mso-bidi-font-weight:normal"><i style="mso-bidi-font-style:normal"><u>four neighbouring squares (up, down, left, right) </u></i></b>and y</span><span lang="EN-US">ou cannot walk into obstacles</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:
ZH-CN"> or</span><span lang="EN-US"> </span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">walk into</span><span lang="EN-US"> a square more than once. When you finish, you can get a number by writing down the digits you encounter in the same order as you </span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">meet</span><span lang="EN-US"> them.</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"> </span><span lang="EN-US">For example, you can get numbers 9784, 4832145 etc. The biggest number you can get is 791452384, shown </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">in the picture </span><span lang="EN-US">above.</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">Your task is to find the biggest number you can get.</span></p>
<p style="margin-right:54.0pt;tab-stops:468.0pt 522.0pt" class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<h1><span lang="NL" style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:&quot;Times New Roman&quot;">Input</span></h1>
<p class="MsoNormal"><span lang="EN-US">There will be at most 25 test cases. Each test begins with two integers <i>R</i> and <i>C</i> (2&lt;=<i>R</i>,<i>C</i>&lt;=15, <i>R*C</i>&lt;=30), the number of rows and columns of the maze. The next <i>R</i> rows represent the maze. Each line contains exactly <i>C</i> characters (without leading or trailing spaces), each of them will be either '</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">#</span><span lang="EN-US">' or one of the nine non-zero digits. </span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">There will be at least one non-obstacle squares (i.e. squares with a non-zero digit in it) in the maze. </span><span lang="EN-US">The input is terminated by a test case with <i>R</i>=<i>C</i>=0, you should not process it.</span></p>
<p style="margin-right:54.0pt;tab-stops:468.0pt 522.0pt" class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p style="margin-right:54.0pt;tab-stops:468.0pt 522.0pt" class="MsoNormal"><b style="mso-bidi-font-weight:normal"><span lang="EN-US" style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:&quot;Times New Roman&quot;">Output</span></b></p>
<span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;
mso-fareast-font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA">For each test case, print the </span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">biggest</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:EN-US;
mso-bidi-language:AR-SA"> number you can find, on a single line.</span>]]></description>
        <input><![CDATA[]]></input>
        <output><![CDATA[]]></output>
        <sample_input><![CDATA[3 7
##9784#
##123##
##45###
0 0
]]></sample_input>
        <sample_output><![CDATA[791452384]]></sample_output>
        <test_input><![CDATA[6 5
59861
11689
58487
94789
27638
58848
4 7
6#52116
7##572#
7839334
7#66456
5 5
#8#51
882##
965#5
93485
58#56
5 6
828673
181931
167946
224244
955754
6 5
49881
21864
7#397
98977
#28#2
26616
6 5
36793
48333
26428
16148
8#996
96516
5 5
57681
#9841
36464
69514
51321
7 4
3528
3652
472#
9854
582#
1546
5882
6 5
14182
79933
19897
768#9
38153
51387
7 4
543#
2756
275#
7197
9389
6954
2382
4 7
21#5976
5825355
87#7511
3714439
7 4
3246
9349
6376
5482
5117
1981
4216
5 5
43723
38684
51546
77538
44717
5 5
79473
81568
9#734
58868
62719
6 5
2144#
31153
4#638
66825
#5717
52494
5 6
489698
824772
922552
166565
793613
5 6
268653
538612
735134
554246
841868
4 7
4#61629
5538361
6439##9
9869635
6 5
89421
64376
31989
88445
47533
42874
4 7
#814831
3312961
3497394
8633232
5 6
47672#
313772
315629
136571
437856
4 7
5691239
3954865
6122638
1495363
4 7
1934195
396#829
1626522
8992594
4 7
4418359
859979#
7189893
3587#25
7 4
6923
7366
7398
1477
3698
7833
8#99
0 0
]]></test_input>
        <test_output><![CDATA[988864763884885274958115986197
677836695734564321125
9583698825485655
997682811295245724544643137681
89724988681479397726168262
99661569816683414882333976342
98469651351214464118675
8958515882642527652825334
99988683717141823397937851315
9727725435597985428326931
9345741778521825597651153
9818762716124155693246943341
8684687175345174475343723
98794768489172658863751
863835441112346657125749425
984896982775565624226179361352
886653246868148575263354512431
9635919263616389368964554
989612734986413887442874354453
984273963114232339468333811
78575619272773674311314336562
9653954863622161495363859321
998169626259429592258143913
9989785371584418359789352
993893864778966329673371378
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include <cstdio>
#include <cstring> 
using namespace std;

int r,c;
char a[20][20];
int used[20][20];
int ans[100];
int ansl;
int aa[100];
int zhan[100][2];
int used1[20][20];
int neigh[4][2]={{0,1},{1,0},{0,-1},{-1,0}};
int z;

void search(int x,int y,int l)
{
	int i,j,top,bottom,xx,yy;
	if ((l>ansl)||((l==ansl)&&(z==1)))
	{
		memcpy(ans,aa,sizeof(ans));
		ansl=l;
		z=0;
	}
	memset(used1,0,sizeof(used1));
	used1[x][y]=1;
	top=0;bottom=1;
	zhan[0][0]=x;
	zhan[0][1]=y;
	while (top<bottom)
	{
		for (i=0;i<4;i++)
		{
			xx=zhan[top][0]+neigh[i][0];
			yy=zhan[top][1]+neigh[i][1];
			if ((xx>=0)&&(xx<r)&&(yy>=0)&&(yy<c)&&(a[xx][yy]!='#')&&(used[xx][yy]==0)&&(used1[xx][yy]==0))
			{
				zhan[bottom][0]=xx;
				zhan[bottom][1]=yy;
				used1[xx][yy]=1;
				bottom++;
			}
		}
		top++;
	}
	if (l+top-1<ansl) return;
	if ((l+top-1==ansl)&&(z==-1)) return;
	for (i=0;i<4;i++)
	{
		xx=x+neigh[i][0];
		yy=y+neigh[i][1];
		if ((xx>=0)&&(xx<r)&&(yy>=0)&&(yy<c)&&(a[xx][yy]!='#')&&(used[xx][yy]==0))
		{
			aa[l]=a[xx][yy]-'0';
			used[xx][yy]=1;
			if (z!=0)
				search(xx,yy,l+1);
			else
				if (l>=ansl)
				{
					z=1;
					search(xx,yy,l+1);
					z=0;
				}
				else
				{
					if (aa[l]>ans[l])
					{
						z=1;
						search(xx,yy,l+1);
						z=0;
					}
					else if (aa[l]==ans[l])
					{
						z=0;
						search(xx,yy,l+1);
						z=0;
					}
					else
					{
						z=-1;
						search(xx,yy,l+1);
						z=0;
					}
				}
			used[xx][yy]=0;
		}
	}
}

int main()
{
	int i,j;
	while (1)
	{
		scanf("%d%d",&r,&c);
		if ((r==0)&&(c==0)) break;
		for (i=0;i<r;i++)
			scanf("%s",a[i]);
		memset(ans,0,sizeof(ans));
		ans[0]=-1;
		ansl=1;
		memset(aa,0,sizeof(aa));
		for (i=0;i<r;i++)
			for (j=0;j<c;j++)
				if (a[i][j]!='#')
				{
					used[i][j]=1;
					aa[0]=a[i][j]-'0';
					if (a[i][j]-'0'>ans[0])
					{
						z=1;
						search(i,j,1);
					}
					else if (a[i][j]-'0'==ans[0])
					{
						z=0;
						search(i,j,1);
					}
					else
					{
						z=-1;
						search(i,j,1);
					}
					used[i][j]=0;
				}
		for (i=0;i<ansl;i++)
			printf("%d",ans[i]);
		printf("\n");
	}
	return 0;
}

]]></solution>
    </item>
    <item>
        <title><![CDATA[Repairing a Road]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <description><![CDATA[<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-fareast-font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--></p>
<p class="MsoNormal"><span lang="EN-US">You live in a small town with <i>R</i> bidirectional roads connecting <i>C</i> crossings and you want to </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">go</span><span lang="EN-US"> from crossing 1 to crossing <i>C</i> as soon as possible</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">. You can visit other crossings before arriving at crossing C, but it&rsquo;s not mandatory. </span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">You have </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">exactly one</span><span lang="EN-US"> chance to ask your friend to repair exactly one existing road, <b><i><u>from the time you </u></i></b></span><b><i><u><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">leave</span><span lang="EN-US"> crossing 1</span></u></i></b><span lang="EN-US">. If he repairs the <i>i</i>-th road for <i>t</i> units of time, the crossing time after that would be <i>v<sub>i</sub>a<sub>i</sub></i><sup>-<i>t</i></sup>. It's not difficult to see that it takes <i>v<sub>i</sub></i> units of time to cross th</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:
ZH-CN">at</span><span lang="EN-US"> road if your friend doesn&rsquo;t repair it.</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">You cannot start to cross the road when your friend is repairing it.</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>
<h1><span lang="NL" style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:&quot;Times New Roman&quot;">Input</span></h1>
<p class="MsoNormal"><span lang="EN-US">There will be at most 25 test cases. Each test case begins with two integers <i>C</i> and <i>R</i> (2&lt;=<i>C</i>&lt;=100, 1&lt;=<i>R</i>&lt;=500). Each of the next <i>R</i> lines contains two integers <i style="mso-bidi-font-style:normal">x<sub>i</sub></i>, <i style="mso-bidi-font-style:
normal">y<sub>i</sub></i> (1&lt;=<i style="mso-bidi-font-style:normal">x<sub>i</sub></i>, <i style="mso-bidi-font-style:normal">y<sub>i</sub></i>&lt;=C) and two positive floating-point numbers <i>v<sub>i</sub></i> and <i>a<sub>i</sub></i><span style="mso-bidi-font-style:italic"> (1&lt;=<i>v<sub>i</sub></i>&lt;=20,1&lt;=<i>a<sub>i</sub></i>&lt;=5), indicating that there is a </span></span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN;mso-bidi-font-style:italic">bidirectional </span><span lang="EN-US" style="mso-bidi-font-style:italic">road connecting crossing <i>x<sub>i</sub></i> and <i>y<sub>i</sub></i>, with parameters <i>v<sub>i</sub></i> and <i>a<sub>i</sub></i> (see above)</span><span lang="EN-US">. Each pair of crossings can be connected by at most one road. The input is terminated by a test case with <i>C</i>=<i>R</i>=0, you should not process it.</span></p>
<p style="line-height:normal" class="MsoFooter"><span lang="EN-US" style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">&nbsp;</span></p>
<h1><span lang="NL" style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:&quot;Times New Roman&quot;">Output</span></h1>
<p class="MsoNormal"><span lang="EN-US">For each test case, print the smallest time it takes to reach crossing <i>C</i> from crossing </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">1</span><span lang="EN-US">, </span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">rounded to </span><span lang="EN-US">3 </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">digits</span><span lang="EN-US"> after decimal point. It&rsquo;s always possible to reach crossing <i>C</i> from crossing 1.</span></p>]]></description>
        <input><![CDATA[]]></input>
        <output><![CDATA[]]></output>
        <sample_input><![CDATA[3 2
1 2 1.5 1.8
2 3 2.0 1.5
2 1
1 2 2.0 1.8
0 0
]]></sample_input>
        <sample_output><![CDATA[2.589
1.976
]]></sample_output>
        <test_input><![CDATA[2 1
1 2 3.0 1.9
2 1
1 2 4.0 1.5
2 1
1 2 5.0 1.3
3 2
1 2 1.0 1.5
2 3 3.0 2.0
3 3
1 2 1.0 1.5
2 3 3.0 2.0
1 3 4.0 1.9
3 3
1 2 1.0 1.5
2 3 3.0 2.0
1 3 1.5 2.3
4 3
1 2 0.8 1.1
2 3 2.9 2.5
3 4 1.0 1.2
4 3
1 2 0.8 1.1
2 3 0.9 2.5
3 4 10.0 4.2
19 27
12 17 4.0 1.774
6 10 1.0 1.283
2 17 2.0 1.247
6 7 3.0 1.091
1 8 3.0 1.526
9 11 2.0 1.922
13 17 2.0 1.497
6 9 5.0 1.472
9 15 4.0 1.685
4 11 2.0 1.463
4 14 2.0 1.18
11 19 2.0 1.263
10 12 4.0 1.296
4 7 4.0 1.768
7 16 3.0 1.871
5 11 5.0 1.853
10 15 1.0 1.014
2 9 2.0 1.635
1 13 1.0 1.477
15 16 4.0 1.611
7 13 4.0 1.996
7 9 2.0 1.793
5 16 2.0 1.884
6 8 3.0 1.348
6 15 2.0 1.905
11 15 4.0 1.409
1 3 2.0 1.278
45 56
16 21 2.0 1.052
2 12 2.0 1.022
16 31 1.0 1.023
7 26 1.0 1.049
2 29 1.0 1.054
8 29 2.0 1.045
12 43 2.0 1.059
26 39 1.0 1.02
6 25 2.0 1.062
5 17 2.0 1.049
16 30 1.0 1.066
1 31 1.0 1.021
24 29 1.0 1.018
13 40 1.0 1.018
14 39 1.0 1.065
15 27 1.0 1.0
6 28 2.0 1.057
23 33 2.0 1.075
24 38 1.0 1.011
5 32 1.0 1.082
16 24 1.0 1.082
10 41 2.0 1.011
18 25 2.0 1.065
25 44 1.0 1.073
15 35 2.0 1.044
6 18 1.0 1.068
17 24 2.0 1.028
7 31 1.0 1.078
2 31 2.0 1.003
3 31 1.0 1.005
6 24 2.0 1.057
8 21 1.0 1.01
36 45 19.0 1.085
3 14 1.0 1.026
1 38 2.0 1.068
15 36 2.0 1.079
15 17 2.0 1.08
27 32 2.0 1.084
36 39 1.0 1.012
5 19 2.0 1.023
6 33 1.0 1.009
12 25 2.0 1.091
35 40 1.0 1.033
24 31 2.0 1.097
13 45 16.0 1.03
4 21 2.0 1.017
22 39 2.0 1.094
29 40 2.0 1.049
28 42 2.0 1.025
11 40 2.0 1.006
5 26 1.0 1.028
32 42 2.0 1.036
22 23 2.0 1.031
19 35 1.0 1.031
12 33 1.0 1.07
5 31 1.0 1.053
39 59
7 10 3.62 1.002
26 32 5.99 1.001
12 29 2.37 1.003
20 30 8.09 1.004
12 23 4.53 1.003
19 21 6.44 1.008
34 35 5.91 1.007
5 6 1.23 1.01
5 17 4.48 1.009
18 19 7.58 1.005
2 13 9.67 1.001
9 13 4.97 1.001
5 16 6.05 1.006
4 19 6.08 1.008
23 33 7.42 1.003
15 34 8.27 1.004
22 28 6.25 1.007
9 26 2.69 1.002
24 37 7.59 1.006
7 12 7.8 1.0
2 20 3.78 1.009
18 23 3.69 1.003
18 28 9.98 1.006
24 25 2.8 1.001
13 36 9.56 1.009
10 13 3.18 1.008
4 16 1.9 1.007
15 38 8.96 1.004
8 12 8.34 1.006
2 21 5.91 1.003
4 11 4.78 1.006
19 28 5.05 1.009
23 35 1.59 1.008
13 15 3.19 1.005
17 31 3.52 1.007
1 13 3.79 1.009
2 10 4.68 1.009
2 23 4.83 1.0
15 17 6.45 1.004
16 22 3.43 1.006
14 32 1.86 1.006
19 34 5.45 1.005
6 10 2.47 1.009
27 36 1.39 1.001
1 17 3.38 1.006
13 17 3.38 1.007
10 38 1.12 1.006
8 30 5.58 1.001
36 38 5.49 1.008
25 39 9.66 1.006
20 37 3.27 1.002
1 30 6.68 1.006
8 24 4.72 1.004
5 15 2.53 1.001
9 31 5.11 1.002
2 5 9.73 1.002
13 16 2.08 1.003
31 36 3.31 1.01
2 28 5.98 1.006
30 37
10 27 9.28 1.002
19 23 1.03 1.007
9 14 9.31 1.001
11 18 4.02 1.009
5 9 5.74 1.007
3 9 3.41 1.008
20 27 7.14 1.001
25 27 9.92 1.002
1 8 6.07 1.006
8 26 5.84 1.004
17 27 6.37 1.0
3 24 9.91 1.004
3 15 4.14 1.008
9 24 9.78 1.002
19 29 7.71 1.003
10 16 2.14 1.005
23 28 9.43 1.001
15 25 7.73 1.009
9 21 7.49 1.009
2 6 7.58 1.005
12 20 7.29 1.0
4 7 7.25 1.002
21 26 7.26 1.006
18 20 7.73 1.001
4 24 6.08 1.005
13 16 6.28 1.006
4 6 6.8 1.01
10 17 1.08 1.002
6 25 1.7 1.002
5 29 1.99 1.009
15 21 7.16 1.007
14 22 6.5 1.009
5 30 7.16 1.005
25 30 2.99 1.009
14 29 5.96 1.008
11 12 2.68 1.002
3 5 2.91 1.002
75 110
40 47 4.75 1.004
43 73 5.37 1.01
5 37 4.23 1.003
8 26 6.8 1.009
15 60 8.75 1.008
16 48 5.2 1.009
21 51 8.79 1.009
5 67 1.82 1.007
52 75 1.75 1.003
58 72 6.35 1.005
16 56 6.31 1.002
10 22 1.83 1.005
23 59 7.15 1.004
9 27 3.58 1.01
8 69 8.05 1.0
13 18 1.92 1.001
4 52 6.9 1.0
39 54 6.0 1.004
6 35 8.3 1.003
15 37 5.95 1.002
31 40 6.15 1.007
38 58 9.76 1.006
3 55 9.85 1.003
13 75 2.87 1.007
1 15 2.7 1.009
2 25 1.44 1.002
12 53 4.96 1.005
2 65 6.03 1.01
6 68 2.66 1.004
43 69 5.53 1.007
34 38 7.16 1.001
29 43 2.94 1.002
23 70 8.54 1.0
44 65 6.73 1.004
16 71 9.86 1.007
36 62 3.63 1.002
35 48 4.02 1.002
46 75 3.9 1.006
55 65 5.72 1.001
33 40 4.55 1.003
57 62 5.14 1.003
39 41 5.89 1.007
14 35 5.06 1.009
71 73 7.45 1.005
4 61 1.7 1.007
1 69 8.77 1.008
24 55 1.46 1.003
8 35 3.79 1.009
24 32 5.47 1.008
3 56 4.87 1.009
18 57 7.76 1.006
20 23 8.87 1.005
20 74 1.95 1.009
19 28 3.41 1.002
50 66 1.18 1.0
32 50 6.7 1.009
25 39 3.53 1.003
1 41 3.41 1.006
23 36 8.93 1.009
14 16 6.58 1.002
42 43 5.04 1.001
52 57 3.66 1.009
20 43 4.53 1.0
18 50 6.58 1.002
48 59 2.77 1.008
10 28 5.38 1.007
42 73 7.9 1.0
56 73 8.2 1.002
18 22 5.54 1.007
17 28 4.05 1.005
32 46 5.3 1.009
14 19 2.09 1.003
47 57 9.78 1.002
24 28 8.04 1.002
3 5 9.6 1.008
11 74 8.74 1.005
40 64 6.51 1.004
11 66 3.13 1.001
38 50 9.13 1.001
17 51 5.69 1.001
24 56 3.85 1.005
13 71 2.71 1.009
30 36 3.55 1.001
7 48 6.33 1.01
20 63 2.13 1.01
9 15 5.37 1.003
46 67 9.89 1.007
18 43 4.23 1.002
8 60 4.28 1.001
30 75 8.47 1.002
2 37 6.49 1.001
43 47 8.48 1.0
3 36 1.0 1.003
31 35 7.85 1.007
64 75 4.74 1.004
15 49 2.09 1.006
37 57 6.96 1.006
2 51 8.04 1.008
49 58 2.75 1.005
10 29 7.89 1.008
17 72 8.12 1.004
49 50 8.6 1.0
9 74 2.96 1.004
2 23 2.25 1.002
22 23 1.45 1.005
6 52 5.28 1.009
26 60 7.13 1.008
25 46 2.52 1.006
16 38 8.47 1.0
3 59 9.88 1.005
87 174
35 53 6.88 1.001
16 75 2.87 1.003
8 56 7.0 1.007
11 76 7.25 1.004
5 36 2.3 1.002
55 74 4.9 1.005
45 78 5.53 1.009
35 47 5.01 1.002
49 69 7.85 1.01
7 33 4.1 1.001
36 62 4.74 1.005
7 59 4.33 1.007
13 42 1.18 1.008
9 70 1.17 1.001
34 68 1.64 1.004
47 64 2.15 1.009
35 66 2.54 1.005
5 64 9.11 1.004
29 45 7.3 1.0
27 86 3.69 1.007
52 72 5.63 1.006
14 38 6.13 1.002
12 71 8.5 1.004
31 48 9.19 1.007
18 45 9.28 1.008
54 79 7.61 1.005
66 77 7.67 1.005
50 57 3.24 1.007
44 79 7.83 1.005
9 41 3.78 1.001
27 66 3.78 1.009
37 50 9.11 1.002
2 14 7.69 1.004
10 69 1.94 1.007
7 57 4.98 1.006
18 49 8.73 1.008
15 18 9.09 1.001
34 66 9.19 1.007
72 85 9.41 1.002
26 44 7.07 1.002
30 54 4.37 1.009
13 84 6.52 1.004
9 61 6.02 1.007
76 78 7.08 1.005
42 53 9.53 1.008
48 81 3.52 1.009
13 23 7.89 1.005
58 77 7.11 1.008
23 62 5.52 1.007
21 38 9.54 1.006
15 48 8.11 1.005
16 47 7.25 1.009
54 59 9.93 1.002
8 19 9.06 1.004
63 82 4.16 1.007
55 78 3.05 1.002
39 58 3.59 1.003
25 64 2.94 1.005
15 55 3.2 1.006
22 65 5.56 1.001
4 22 2.39 1.006
2 38 4.55 1.009
26 30 1.73 1.0
16 23 7.58 1.003
22 52 6.13 1.006
12 70 6.58 1.007
32 46 9.67 1.006
28 70 7.53 1.009
17 47 4.24 1.009
52 76 6.71 1.001
3 27 8.12 1.002
25 52 5.02 1.001
11 75 4.54 1.01
33 56 2.2 1.006
74 85 6.68 1.009
30 65 2.75 1.001
13 50 2.59 1.007
56 69 5.21 1.009
50 61 7.29 1.004
22 48 9.62 1.0
8 13 9.13 1.007
26 71 9.76 1.008
19 31 9.86 1.003
54 84 4.06 1.006
1 21 9.43 1.003
39 64 6.23 1.007
22 41 4.5 1.004
23 40 3.96 1.001
12 79 2.8 1.008
10 83 7.92 1.003
7 27 7.59 1.009
43 53 8.9 1.0
68 69 9.54 1.009
26 48 9.88 1.008
21 27 3.89 1.002
60 66 8.55 1.003
24 41 3.31 1.008
41 62 7.14 1.004
11 59 7.01 1.01
12 52 2.07 1.004
24 28 9.68 1.005
7 50 2.95 1.007
47 49 3.92 1.01
1 47 9.92 1.002
4 46 8.57 1.009
21 84 6.09 1.001
45 49 9.81 1.007
10 48 6.77 1.001
2 76 3.41 1.009
23 81 8.66 1.007
27 32 4.11 1.006
32 61 9.05 1.008
6 8 8.49 1.001
24 75 9.5 1.001
7 25 4.41 1.006
31 38 9.99 1.007
43 51 6.17 1.003
11 28 2.11 1.006
40 50 7.27 1.007
21 80 6.72 1.001
72 83 6.34 1.006
22 64 5.9 1.007
63 72 5.5 1.006
31 45 3.13 1.008
30 42 3.22 1.006
35 46 9.68 1.005
8 49 5.11 1.003
31 66 3.49 1.009
12 40 3.0 1.001
2 18 2.46 1.005
15 81 8.38 1.002
21 36 2.18 1.006
54 60 7.02 1.009
48 54 5.68 1.005
37 79 9.53 1.009
9 42 7.53 1.005
29 73 9.17 1.003
65 73 4.88 1.002
48 78 7.16 1.007
47 60 6.67 1.004
2 39 6.52 1.002
5 22 1.86 1.006
40 80 7.68 1.004
1 25 5.47 1.005
62 85 6.57 1.001
8 32 1.21 1.001
32 35 4.79 1.006
11 64 7.21 1.009
40 52 5.25 1.005
54 75 6.65 1.002
2 31 5.38 1.009
20 64 3.57 1.01
7 18 3.11 1.002
8 21 8.78 1.006
3 76 5.2 1.003
36 51 7.24 1.002
50 62 9.51 1.005
26 53 2.87 1.003
37 73 8.2 1.002
35 73 5.4 1.001
46 50 3.76 1.005
67 87 5.62 1.0
59 86 7.74 1.004
46 67 3.16 1.004
1 58 7.89 1.006
6 13 4.18 1.01
22 42 3.96 1.006
23 39 2.18 1.004
73 80 6.46 1.001
19 70 6.87 1.003
34 71 8.11 1.006
71 78 9.59 1.003
5 31 5.31 1.004
20 31 7.33 1.005
92 106
43 72 9.62 1.01
17 88 5.37 1.001
9 72 9.91 1.005
46 76 2.66 1.01
35 81 5.88 1.009
39 41 8.38 1.009
10 22 9.54 1.01
68 75 8.15 1.002
17 23 4.03 1.001
24 45 7.51 1.005
64 68 8.15 1.0
30 64 1.91 1.003
42 53 1.55 1.005
49 54 3.5 1.006
34 35 1.81 1.009
19 26 4.37 1.008
10 30 2.59 1.007
25 37 1.16 1.002
7 68 2.52 1.008
10 31 4.05 1.002
24 80 8.11 1.002
15 22 9.19 1.004
3 38 9.28 1.003
18 35 7.43 1.008
59 73 3.81 1.007
69 87 5.12 1.004
59 92 9.11 1.009
1 27 7.85 1.002
23 25 2.16 1.004
3 39 3.24 1.009
16 89 9.52 1.003
40 59 6.62 1.002
22 28 9.52 1.002
23 70 1.01 1.003
10 51 1.78 1.0
12 19 7.37 1.007
6 74 2.2 1.001
5 29 4.98 1.01
4 45 9.44 1.005
1 85 8.37 1.002
31 68 8.53 1.007
63 67 5.58 1.005
50 53 3.5 1.007
26 66 6.06 1.007
7 46 8.34 1.008
23 71 5.45 1.007
36 40 6.66 1.0
29 84 2.5 1.003
4 68 4.02 1.005
9 31 2.69 1.005
11 81 4.38 1.007
2 4 7.9 1.002
5 28 3.2 1.004
61 67 8.16 1.005
26 33 5.13 1.003
13 87 3.43 1.0
23 90 9.14 1.007
17 33 4.38 1.005
25 72 9.78 1.001
44 74 1.84 1.005
13 38 8.12 1.0
4 32 5.96 1.002
2 73 2.25 1.006
14 41 2.65 1.005
8 15 7.24 1.003
74 79 1.76 1.009
4 55 6.81 1.004
53 89 8.28 1.005
1 79 6.37 1.002
15 45 1.41 1.003
23 74 9.28 1.006
4 10 7.15 1.008
71 77 6.12 1.009
56 83 7.91 1.006
14 44 3.52 1.0
10 28 7.64 1.01
18 71 3.73 1.005
41 88 4.6 1.0
62 65 7.03 1.002
57 82 1.52 1.002
61 63 5.2 1.007
9 50 3.6 1.005
49 89 7.21 1.007
18 48 3.97 1.0
71 74 2.01 1.003
5 60 3.77 1.002
52 74 8.77 1.004
17 22 3.51 1.004
23 65 7.27 1.008
7 51 2.16 1.004
36 64 2.62 1.006
63 90 1.07 1.001
9 78 4.95 1.004
22 86 2.5 1.005
40 91 5.08 1.002
61 62 9.66 1.01
5 15 8.0 1.007
11 80 5.31 1.005
71 88 5.12 1.003
16 18 2.47 1.004
21 77 4.37 1.005
14 43 3.58 1.006
31 50 7.53 1.005
41 64 5.95 1.001
2 70 7.33 1.008
22 70 2.57 1.008
55 96
17 29 6.37 1.001
35 36 2.66 1.01
16 48 8.27 1.008
21 49 8.29 1.006
38 49 6.22 1.006
18 50 3.89 1.002
2 29 9.73 1.002
24 45 1.92 1.002
19 21 5.42 1.008
18 37 5.41 1.005
16 35 1.31 1.007
28 40 3.43 1.004
10 17 7.91 1.008
36 47 6.31 1.005
15 17 7.78 1.002
34 35 5.82 1.008
35 42 4.51 1.006
26 34 6.65 1.005
21 44 3.17 1.001
7 32 5.99 1.001
14 27 4.26 1.006
13 37 3.09 1.009
44 47 9.22 1.009
9 29 8.33 1.006
25 34 5.51 1.002
4 45 2.38 1.006
19 53 5.74 1.001
18 49 7.16 1.007
18 46 7.87 1.007
9 26 1.41 1.008
29 50 4.39 1.003
4 34 7.77 1.007
3 44 6.54 1.001
19 46 1.55 1.009
23 47 5.99 1.0
31 44 4.29 1.004
51 52 2.26 1.0
7 8 6.11 1.002
35 38 2.56 1.008
34 44 8.05 1.002
4 6 9.44 1.002
10 14 1.1 1.006
4 23 7.66 1.005
27 35 5.4 1.007
2 31 3.17 1.002
23 31 2.29 1.003
13 33 3.35 1.01
14 38 8.52 1.008
28 49 6.46 1.005
19 49 8.44 1.002
15 27 1.93 1.008
47 48 6.67 1.01
6 24 6.57 1.004
46 54 9.2 1.004
2 21 3.49 1.006
8 21 3.77 1.001
6 37 3.32 1.004
3 20 8.57 1.001
6 50 1.14 1.0
19 28 8.72 1.006
13 38 2.3 1.003
16 18 5.58 1.004
30 49 8.3 1.004
8 15 4.52 1.01
19 29 6.11 1.004
3 15 2.87 1.005
44 45 5.23 1.002
26 42 9.76 1.006
23 54 8.96 1.004
4 48 1.9 1.01
7 9 6.59 1.008
4 5 6.27 1.008
14 34 2.46 1.009
22 55 6.39 1.007
11 22 7.56 1.01
9 41 5.47 1.003
17 22 1.55 1.006
10 15 1.04 1.003
32 33 3.02 1.006
37 44 8.88 1.008
19 24 1.38 1.0
28 52 1.45 1.001
23 52 8.33 1.002
38 53 4.32 1.01
21 50 3.07 1.006
9 12 6.39 1.002
21 37 8.3 1.005
1 36 9.72 1.009
1 24 6.75 1.002
37 39 9.92 1.006
12 18 9.08 1.006
10 36 2.67 1.006
3 16 4.34 1.004
19 41 4.88 1.003
22 51 8.75 1.006
21 40 5.11 1.008
46 50
22 29 1.68 1.002
10 42 5.98 1.006
17 29 8.46 1.001
8 43 2.0 1.009
40 46 1.57 1.001
22 35 2.21 1.003
17 23 3.74 1.006
18 24 3.42 1.001
6 45 3.41 1.001
29 32 8.21 1.005
28 40 8.6 1.008
15 16 7.07 1.004
31 40 2.69 1.005
12 37 2.0 1.009
6 15 9.28 1.0
11 15 2.13 1.007
16 17 4.97 1.009
11 43 4.32 1.009
16 44 1.75 1.01
5 13 4.87 1.006
3 13 5.42 1.001
25 34 5.59 1.009
26 31 9.72 1.005
13 14 2.5 1.009
2 17 3.43 1.006
18 33 6.6 1.001
21 45 1.18 1.009
10 21 6.46 1.001
12 27 8.64 1.007
32 35 2.11 1.008
35 38 6.3 1.006
18 28 9.03 1.009
8 41 4.99 1.003
6 8 8.34 1.003
29 30 3.03 1.006
3 9 8.08 1.006
8 12 4.22 1.009
1 38 9.14 1.004
6 10 1.8 1.005
7 19 7.75 1.0
17 25 6.14 1.001
9 21 2.03 1.007
6 26 1.06 1.009
18 20 2.92 1.005
43 46 8.09 1.004
22 45 8.22 1.009
20 21 4.91 1.003
16 18 7.16 1.002
31 45 1.46 1.01
25 33 5.01 1.002
90 101
25 31 8.26 1.001
4 36 6.25 1.008
40 71 4.59 1.002
8 26 3.99 1.003
9 51 6.11 1.007
62 76 6.28 1.003
27 33 5.03 1.005
12 68 9.89 1.006
37 38 9.14 1.008
9 16 7.26 1.003
12 43 7.97 1.006
44 82 2.93 1.008
66 88 3.36 1.005
54 87 7.04 1.005
35 86 1.97 1.01
27 55 4.97 1.005
13 57 7.93 1.004
38 79 9.28 1.007
11 24 6.93 1.005
2 90 4.35 1.007
27 85 5.54 1.004
50 72 7.26 1.003
16 53 5.39 1.008
13 51 3.09 1.006
22 44 6.03 1.004
7 41 2.78 1.003
39 55 3.2 1.007
49 72 4.24 1.003
37 65 8.17 1.003
25 71 5.33 1.002
20 60 6.36 1.008
3 75 4.99 1.007
5 85 8.27 1.002
40 42 5.46 1.004
18 74 5.65 1.0
17 73 2.72 1.001
13 31 4.03 1.007
41 87 6.15 1.003
1 72 1.11 1.001
30 47 6.27 1.009
36 57 3.0 1.0
34 68 5.85 1.0
47 64 1.54 1.001
14 48 9.3 1.005
61 73 1.46 1.002
46 64 4.02 1.0
1 13 1.24 1.009
11 61 4.13 1.005
25 40 8.82 1.008
27 65 9.24 1.002
39 56 1.38 1.003
63 70 3.19 1.001
28 38 6.04 1.005
23 34 7.92 1.001
12 77 8.72 1.0
29 39 9.02 1.009
29 77 3.62 1.004
75 77 4.61 1.006
19 63 7.83 1.008
26 29 6.13 1.003
12 14 9.36 1.009
34 54 3.04 1.001
8 15 7.65 1.004
28 58 3.55 1.001
2 54 7.72 1.006
42 67 1.15 1.003
59 75 7.17 1.004
7 72 5.02 1.002
25 30 2.69 1.008
18 76 1.0 1.004
62 78 3.82 1.006
51 73 7.07 1.009
52 76 5.29 1.006
6 33 1.1 1.001
37 89 9.02 1.003
46 63 7.04 1.005
9 60 1.95 1.001
17 25 5.16 1.005
39 80 6.16 1.007
14 36 3.26 1.004
55 80 8.72 1.004
44 52 3.97 1.01
38 80 6.1 1.003
35 68 3.85 1.007
10 18 1.81 1.002
9 38 9.94 1.001
3 17 1.2 1.008
10 33 3.49 1.003
37 66 6.23 1.009
3 32 2.32 1.01
35 41 6.57 1.009
4 31 1.36 1.008
5 87 5.23 1.003
44 54 7.58 1.0
10 90 2.91 1.0
42 77 2.74 1.009
5 71 7.72 1.009
5 40 8.18 1.003
6 39 3.55 1.006
31 47 9.2 1.005
44 88 1.4 1.001
28 37
6 10 5.24 1.003
2 4 3.39 1.006
9 24 3.75 1.01
2 27 2.65 1.005
5 8 9.71 1.002
7 22 7.46 1.01
11 21 4.86 1.006
2 7 3.48 1.003
2 12 7.42 1.008
5 14 2.73 1.01
1 22 4.21 1.001
13 14 6.72 1.009
12 23 8.34 1.005
7 12 7.33 1.0
5 12 2.75 1.006
18 24 3.66 1.006
6 23 2.57 1.005
7 16 3.81 1.002
21 28 8.82 1.006
24 26 2.06 1.009
3 17 3.7 1.004
3 7 2.22 1.001
1 26 2.5 1.01
14 16 9.1 1.008
17 26 9.19 1.002
13 21 8.58 1.001
19 22 8.01 1.009
7 27 3.93 1.01
3 18 9.97 1.001
8 10 8.71 1.007
7 20 3.65 1.0
6 11 6.93 1.003
11 17 7.94 1.007
14 28 1.77 1.004
5 27 5.6 1.003
9 23 2.95 1.009
10 13 7.39 1.005
44 46
5 42 6.72 1.008
11 18 5.85 1.001
20 41 9.21 1.004
15 32 7.92 1.004
21 36 9.46 1.008
27 33 9.98 1.003
8 29 9.16 1.008
30 31 9.88 1.004
23 40 9.94 1.002
8 23 5.91 1.003
4 19 7.55 1.005
3 19 8.08 1.001
14 42 5.35 1.002
16 27 8.27 1.005
27 30 2.4 1.005
1 25 7.4 1.007
13 25 6.8 1.009
14 30 5.84 1.009
25 29 8.26 1.004
21 32 1.67 1.007
4 34 6.01 1.001
10 14 9.19 1.001
27 35 2.66 1.002
23 37 2.81 1.007
14 23 3.15 1.009
15 38 6.52 1.002
28 38 9.72 1.005
23 28 8.0 1.007
11 39 7.45 1.002
21 41 4.33 1.005
8 15 6.93 1.003
6 43 2.48 1.001
22 30 8.23 1.001
7 22 7.36 1.0
23 35 6.12 1.008
23 41 8.68 1.003
36 38 4.45 1.006
30 32 8.04 1.006
15 21 6.64 1.008
5 35 2.08 1.005
11 23 7.58 1.009
3 11 4.11 1.008
16 39 2.77 1.001
14 40 2.19 1.0
40 44 9.04 1.01
12 18 5.68 1.009
0 0
]]></test_input>
        <test_output><![CDATA[2.579
3.659
4.846
2.499
2.499
1.468
3.158
2.553
8.918
17.630
28.362
35.426
18.908
25.137
36.953
27.337
30.388
33.214
25.181
42.384
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include<cstdio>
#include<cmath>
#include<vector>
using namespace std;

#define MAX(a,b) ((a) > (b) ? (a) : (b))
#define MIN(a,b)  ((a) < (b) ? (a) : (b))
#define inf 1000000000

double d[205][205];
double v[205][205],u[205][205];

int main()
{
	int i,j,k,tests,cs=0,n,m;
	while(scanf("%d%d",&n,&m)==2)
	{
		if(!n && !m) break;

		for(i=1;i<=n;i++)
				for(j=1;j<=n;j++)
					d[i][j]=d[j][i]=v[i][j]=v[j][i]=inf;


		for(i=0;i<m;i++)
		{
			int a,b;
			double vv,tt;
			scanf("%d%d%lf%lf",&a,&b,&vv,&tt);
			d[a][b]=d[b][a]=vv;
			v[a][b]=v[b][a]=vv;
			u[a][b]=u[b][a]=tt;
		}


		for(k=1;k<=n;k++)
			for(i=1;i<=n;i++)
				for(j=1;j<=n;j++)
					d[i][j]=MIN(d[i][j],d[i][k]+d[k][j]);

		for(i=1;i<=n;i++)
			d[i][i]=0.0;

		double ans=d[1][n];

		if(ans==inf)
		{
			puts("-1.000");
			continue;
		}

		for(i=1;i<=n;i++)
			for(j=1;j<=n;j++)
			{
				if(i==j || v[i][j]==inf) continue;

				double lo=0.0,hi=10.0;
				double t1=d[1][i];

				while(hi-lo>1e-6)
				{
					double left  = (2.0*lo+hi)/3.0;
					double right = (lo+2.0*hi)/3.0;

					double l1= t1+left  + v[i][j]*pow(u[i][j],-t1-left)  + d[j][n];
					double l2= t1+right + v[i][j]*pow(u[i][j],-t1-right) + d[j][n];

					if(l1<l2)
						hi=right;
					else
						lo=left;

					ans=MIN(ans,MIN(l1,l2));
				}
			}

		printf("%.3lf\n",ans);
	}
	return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[射击游戏]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/h1.jpg]]></src>
            <base64>
                <![CDATA[]]></base64>
        </img>
        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/h2.jpg]]></src>
            <base64>
                <![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABMAIADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigD8Tbb4W+FPHPxd+NN5r2iwalcw+NtQijklLAqm8nHBHcmtv8A4Z4+HH/QqWf/AH0//wAVV7wX/wAlQ+N//Y9ah/6FXbUAed/8M8fDj/oVLP8A76f/AOKr2X/gm/4U0nwb+1v8S9N0Wxj0+xXwtaOIYySAxnXJ59a56u2/YF/5PL+J3/YqWf8A6OWgD9HaKKKACiiigAooooAKKKKACiiigAooooA/HfwUCfih8b8D/metQ/8AQq7bafQ14X/wq+/8W/Fz4yT23jXXNBWDxnqEJisHAWU+YTvbnrzj8K1f+FCav/0VLxX/AN/R/jQB6/tPoa7b9gUY/bL+J3/YqWf/AKOWvmr/AIUJq/8A0VLxX/39H+Ne5f8ABNLwlceFP2tviPZ3GvahrskXha3Jub9gXfdOhAP+7jj6mgD9P6KKKACiiigAooooAKKKKACiiigAooooA/HbwX/yVD43/wDY9ah/6FXbVxPgv/kqHxv/AOx61D/0Ku2oAK7b9gX/AJPL+J3/AGKln/6OWuJrtv2Bf+Ty/id/2Kln/wCjloA/R2iiigAooooAKKKKACiiigDC8d6zceHPA/iHVrTYbqw064uofMGV3pEzLkdxkCvzH8E/tv8A7T/jnwpp2vWl/wCAILa+j8xI5tMn3qMkc4kx2r9Kviz/AMkr8Zf9gW9/9EPX5J/s8/8AJFfCn/Xqf/Q2oA9e/wCGs/2qP+gp8O//AAWXH/xylX9rL9qhmA/tT4d8nH/IMuP/AI5WJTov9an1FAHzL8NdU+LXinWPH2r6Rd+Go7i98RXM+pfaopArXTHLmMDonoDXc/ZPjp/z/eDv+/ctQ/s0/wDHr4+/7GW5r2WgDyD7J8dP+f7wd/37lrP+C3xN+Nfwx/aD8X3OgXvhOPxRNo9vBeyXlrLLatAGDIEAIIbOMk17fXj3hb/k5/xt/wBgi1/9loA97/4az/ao/wCgp8O//BZcf/HKP+Gs/wBqj/oKfDv/AMFlx/8AHKxaKAM7xD+3f+07oPjnwz4cl1DwI11rQlMLx6XN5Y2DJ35fP0xXV/8ADWf7VH/QU+Hf/gsuP/jleBfEv/k4T4Uf7l5/6DXsdAG1/wANZ/tUf9BT4d/+Cy4/+OVla9+3J+0p4JfSLzWLzwLdadc6na2MsdppswkxLIFJGZMdM1FXm3x4/wCRb0D/ALGLTv8A0cKAP2cooooA5T4s/wDJK/GX/YFvf/RD1+Sf7PP/ACRXwp/16n/0Nq/Wz4s/8kr8Zf8AYFvf/RD1+Sf7PJ/4st4U4/5dT/6G1AHolOi/1qfUUmfYU6M/vE4HUUAeL/s0/wDHr4+/7GW5r2WvGv2aD/ovj7j/AJmW5r2bPsKAErx7wt/yc/42/wCwRa/+y17Fn2FeO+Fj/wAZP+NuP+YRa/8AstAHsNFLn2FGfYUAeN/Ev/k4T4Uf7l5/6DXsdeOfEs/8ZCfCjj+C8/8AQa9kz7CgBK82+PH/ACLegf8AYxad/wCjhXpWfYV5t8eD/wAU34f4/wCZi07/ANHigD9htb8T6f4dmsY79riP7bMlvFJHaSyxiRnVEDuilY9zOoBcgEnjoa1a8Q+DXh258Q3XjSTVdf1TUYLPxhcBrWcw7Lh7cwmGR2EYcFSkZCoyp+7UbduQfb6AP//Z]]></base64>
        </img>
        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/h3.jpg]]></src>
            <base64>
                <![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABRAI0DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KKKACiiigAooooA/NT/gpJ4W0nxh+1X8KtO1qwi1Gxfw5fu0EudpKyZB4I6GvFf+Gffhz/ANCjYfm//wAVXv8A/wAFAP8Ak774T/8AYtaj/wCjK4KgDz3/AIZ9+HP/AEKNh+b/APxVct40+FPhHwZrvw6v9E0G1028bxlpUJmh3ZKGbJXknjgflXtdcB8W/wDj7+HH/Y7aR/6NNAH7JUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAfnT+3+M/tffCf/ALFrUf8A0OuD2n0NdB/wUx8Lnxf+1F8KtNGrajopfw7fP9r0ubyphiTOA3oe9eC/8M/yf9FH8bf+DM/4UAetbT6GuA+Lan7X8OOD/wAjtpH/AKNNYn/DP8n/AEUfxt/4Mz/hXn3xq+FM/g7QdC1CHxx4q1CY65aRRi9vy4hYliJU9HUjg9qAP3tor8fpPCXjlJHUfHf4p4BI/wCRjl/xpv8Awinjn/ou3xT/APCjl/xoA/YOivxh8c2PxA8L+Cdf1m2+OfxPludPsJrqNJfEc2xmRCwBwc44r9UP2YNXvtf/AGcvhjqep3k+o6jeeHLCe5u7qQySzSNAhZ3Y8sxJJJPWgD06iiigAooooAKKKKACiiigAooooA/On/goB/yd98J/+xa1H/0ZXBV3v/BQD/k774T/APYtaj/6MrgqACvIv2mv+RL8P/8AYxWP/s9eu15F+01/yJfh/wD7GKx/9noA9gn/ANfJ/vH+dULfWbC71K706C8hlv7QK1xbI+ZIgwypYdsjpV+f/Xyf7x/nXkfgP/k4f4o/9eum/wDooUAdZ8Xv+ST+M/8AsD3f/opq/Sf9kr/k134Tf9ivp3/pOlfmx8Xv+ST+M/8AsD3f/opq/Sf9kr/k134Tf9ivp3/pOlAHrNFFFABRRRQAUUUUAFfnF8af2r/jxa/tJfEzwZ4K8Q+HNJ0Hwzc2kUEepaV50jCW2jkPzA8/MW6+or9Ha/KP4i/8noftAf8AX9pn/pDHQBuf8NM/tS/9Dv4L/wDBG1H/AA0z+1L/ANDv4L/8EbVmUUAeL/GLxz8aviX8efBcviHxL4bufEkOkXa2N1BprRQRwljvV1wSzHHB7Vof2J8bP+hp8Kf+C9//AIipPE//ACcj4H/7Al7/ADNeqUAeT/2J8bP+hp8Kf+C9/wD4iuH+K/hj4o6paeFtO13xF4euIL7xFY2tubSzZDHcOxWN2+UZQZOR3r6QrgPi3/x9/Dj/ALHbSP8A0aaAPfH/AGCv2hmYsfid4IyTn/kDy/4V4p8O/wBkv4xa3+098XPClh468LW3iPRLTSpNSv5tNka3uVmg3xCJMZUqvBz1NfsDXyR8DP8AlId+0z/2DPDn/pHQB4hr/wDwTv8Aj74k0LUdJvPib4Kazv7d7aYJpMqsUdSrYOODg9a+8/gv4Fufhh8IvBnhC8uYr260LSLXTZbiAEJK0USoWUHkAlc812dFABRRRQAUUUUAFFcH/wAL9+GP/RR/CX/g8tf/AI5R/wAL9+GP/RR/CX/g8tf/AI5WHt6X86+9HN9Zof8APxfejvK/KP4i/wDJ6H7QH/X9pn/pDHX6Qf8AC/fhj/0Ufwl/4PLX/wCOV+ZPxvfxLZ/tQ/FXxT4Ts/Cnizw/4jubOW1vf+E20y1yIrWONvleXd94MOQOlHt6X86+9B9Zof8APxfejforz3/hKviP/wBCV4T/APDiaT/8co/4Sr4j/wDQleE//DiaT/8AHKPb0v5196D6zQ/5+L70Zvif/k5HwP8A9gS9/ma9UrxDVbT4j6h8TdB8U/8ACKeFk/s2xntPsw8f6SVk8wk7i/ncYz0wc11v/CVfEf8A6Erwn/4cTSf/AI5R7el/OvvQfWaH/Pxfej0KuA+Lf/H38OP+x20j/wBGmmf8JV8R/wDoSvCf/hxNJ/8AjlZ2oWXjvxz4h8FwajoXhTQtP07xHYapcXv/AAnmlT7I4pct8glBPBJ49OlHt6X86+9B9Zof8/F96P2lJCgk8Ac18Mfs7/GPwNrn/BQ349HT/FelXh1+z0S20oQ3Ksb2WC0InSLH3jGVbcB0wc19Wf8AC/fhj/0Ufwl/4PLX/wCOV84/Cn4VfAv4WftRfED4wWXxG8GNL4ihQWNius2o+wSyc3jj58fvGVSMdAzjoaPb0v5196D6zQ/5+L70fZVVNU1ax0OwlvtSvLfT7KLHmXN1KsUaZIAyzEAZJA+pFcd/wv34Y/8ARR/CX/g8tf8A45Xn+s/GXTpvibHeab8YPAVt4Z/sx444bjUYJljn8yMnzEW5jLswBKvnChWXaC25z29L+dfeg+s0P+fi+9Hu1pdwX9rDdWs0dzbTIskU0LhkkQjIZSOCCCCCKmrzPw98YvhV4a0DTNItfiT4WkttPtYrSJ5tdtC7IiBQWIcDOAM4ArQ/4X78Mf8Aoo/hL/weWv8A8co9vS/nX3oPrND/AJ+L70d5RXB/8L9+GP8A0Ufwl/4PLX/45R/wv34Y/wDRR/CX/g8tf/jlHt6X86+9B9Zof8/F96O8ooorc6QooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAP/Z]]></base64>
        </img>
        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/h4.jpg]]></src>
            <base64>
                <![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABSAGYDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9Nv8AhBPDX/QvaV/4BRf/ABNH/CCeGv8AoXtK/wDAKL/4mt2igDC/4QTw1/0L2lf+AUX/AMTR/wAIJ4a/6F7Sv/AKL/4mt2igD45/4KN63ffCL4H6NqngYaf4a1m88RWenNfQ6XbTERSBww2yRsOoB6Z4618nNc/GQEj/AIW/Hx/1Kem//Gq+pP8Agq7/AMm/eFv+xx03/wBqV4A/32+tAHM/avjJ/wBFfj/8JPTf/jVY/jLxT8ZvCnhLWdaX4sR3LafaSXIhPhXTVD7VJxnyuM13tcj8X/8AklPi/wD7BVx/6AaAP0Y/Zl0/T/HX7Pfw78Q67pWmahrOp6Ha3V3dPp8CmWV4wWYhUAGSewAr0z/hBPDX/QvaV/4BRf8AxNec/scf8mqfCf8A7Fuy/wDRS17HQBhf8IJ4a/6F7Sv/AACi/wDiaP8AhBPDX/QvaV/4BRf/ABNbtFAGF/wgnhr/AKF7Sv8AwCi/+JordooAKKKKACiiigD4s/4Ku/8AJv3hb/scdN/9qV4A/wB9vrXun/BW6S9j/Z38MmxhimlHi6wKrM20F8SbB9C2AfavjJvEHxr3HPhDwtnP/QRb/wCLoA9Yrkfi/wD8kp8X/wDYKuP/AEA1yn9v/Gr/AKFDwt/4MW/+LrnfiPrfxcm+H/iOPVPC3hy201rCYXM1vfs0iR7TuKjfyQO1AH61/scf8mqfCf8A7Fuy/wDRS17HXjH7GBmb9k/4TmdVST/hHLPIQ5GPLGP0xXs9ABRRRQAUUUUAFFFFABRRRQB8Wf8ABV3/AJN+8Lf9jjpv/tSvAH++31r3/wD4Ku/8m/eFv+xx03/2pXgD/fb60AJXI/F//klPi/8A7BVx/wCgGuurkfi//wAkp8X/APYKuP8A0A0Afo9+xx/yap8J/wDsW7L/ANFLXsdeOfscf8mqfCf/ALFuy/8ARS17HQAUUUUAFFFFABXzt+0v+2z4X/Zi8W6B4c1jwv4n8S6nrVpJeW8fh61in2ojbW3B5EOe/ANfRNfnP/wUEJH7X3wjwcf8U5qH/oygDuf+HrPhD/oknxQ/8FFv/wDH6P8Ah6z4Q/6JJ8UP/BRb/wDx+vDd7f3j+dG9v7x/OgDE/bp/bv8AD3x3+Feg+H9O+H/jjQbmDxFZ34n1rT4oopBHvzGpWViXO4YGK85b9pCIsT/wrvxx1/6Bf/2VRftPsx8P+EMkn/io7Xv9a9neR97fM3X1oA8c/wCGj4v+ieeOP/BX/wDZVzvxG+PsWs+APEVh/wAIL4wsvtVhLD9pu9OCQxblI3O27hR3NfQnmP8A3m/OuK+NjsfhB4xBYkf2ZN39qAPZf2ev+Ck/hf4efAzwJ4Zufhh8RdRn0nR7aze7sNLhe3mZECl42MwJU44JAr0L/h6z4Q/6JJ8UP/BRb/8Ax+vl34Ouw+E/hD5j/wAgyDv/ALNdhvb+8fzoA9y/4es+ED/zST4of+CiD/4/X0L+zR+0joH7UXgK78V+HtL1bR7S11CXTZbXWYo451ljVS3CO4x84HXOQeK+CUdt6/MevrXvf/BKP/khPjT/ALHbU/5RUAfatFFFABX5zf8ABQX/AJO9+Ef/AGLmof8Aoyv0Zr81P+CkviXSvCf7VXwm1HWb+HTbFPD1+rXE+doJkwBwD1oA5eiuD/4X18Ov+hx0z/vp/wD4mj/hfXw6/wChx0z/AL6f/wCJoA5b9p7/AJF/wh/2MVr/AFr2Z/vt9a+b/wBoL4reDvE2i+GItK8R2V/Jb65b3EywlspGucscjoK9Ub49/DksT/wmWmdf7z//ABNAHd1xfxr/AOSQeMf+wZN/Kq//AAvr4df9Djpn/fT/APxNcn8WPjR4E1n4Y+KLCw8VafdXtzp8sUMEZbdIxHAHy0Adz8Hv+SUeEP8AsGQ/+g119eOfC/40+A9I+G/hmxvfFWn215b6fFFNDIX3IwXkH5a6f/hfXw6/6HHTP++n/wDiaAO9T76/Wvff+CUf/JCfGn/Y7an/ACir5GX49/DkMD/wmWmdf7z/APxNe/8A/BOfXvFUP7O+pXXguyttUt7v4jXP2uZ5CCtqzQcqNjfIwOGfBKKSwU8sgB+h9Fcp8PfCP/CJWeqD7Dp+lf2he/bP7O0vm3tv3MUW1G2Juz5W8nYvLkYONxKAPyG/4X78Tv8Aoo/i3/weXX/xyj/hfvxO/wCij+Lf/B5df/HKKK+HPzcP+F+/E7/oo/i3/wAHl1/8co/4X78Tv+ij+Lf/AAeXX/xyiigA/wCF+/E7/oo/i3/weXX/AMco/wCF+/E7/oo/i3/weXX/AMcoooAP+F+/E7/oo/i3/wAHl1/8co/4X78Tv+ij+Lf/AAeXX/xyiigA/wCF+/E7/oo/i3/weXX/AMco/wCF+/E7/oo/i3/weXX/AMcoooAP+F+/E7/oo/i3/wAHl1/8co/4X78Tv+ij+Lf/AAeXX/xyiigA/wCF+/E7/oo/i3/weXX/AMcooooA/9k=]]></base64>
        </img>
        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/h5.jpg]]></src>
            <base64>
                <![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABQAGcDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD7t/bO/wCTS/i//wBitqH/AKIevzY+Hng7w/P4A8NSy6Fpskr6bbszvaRlmJjXJJxya/Sf9s7/AJNL+L//AGK2of8Aoh6/O/4b/wDJO/C//YLtv/Ra0AWf+EI8Of8AQv6X/wCAcf8AhT4PBHhwzxg+H9LxuH/LnH6/StepLf8A18f+8P50AfQ3/BKWNYv2Yb9EUIi+KdUCqowAN6cCvsmvjf8A4JUf8myaj/2NWqf+hrX2RQAUUUUAFFFFABRRRQAUUUUAeM/tnf8AJpfxf/7FbUP/AEQ9fnh8N/8Aknfhfkf8gu27/wDTNa/Q/wDbO/5NL+L/AP2K2of+iHr8m/BX7N3hTV/BuhX093rizXVjDM4j1JlUMyAnAxwOelAHu+PcfnUluP38fI+8O/vXjv8Awy74P/5/df8A/Bo3+FPh/Zc8HtKim98QYLAf8hRv8KAPub/glR/ybLqP/Y1ap/6GtfY+a/B/4DfCHRvEHgy+uLi/1uB4tWu7dVtNUlhTajAAlVIGfU969G/4UL4f/wCgp4l/8Hlx/wDFUAfs1mivxl/4UL4f/wCgp4l/8Hlx/wDFV75/wTP00+Gv2ivjFoMF/qN1ptppOmPDHf3klwUL7mYgsT1JoA/R+iiigAooooAKKKKAPGf2zv8Ak0v4v/8AYrah/wCiHr87/hv/AMk78L/9gu2/9FrX6Iftnf8AJpfxf/7FbUP/AEQ9fnf8N/8Aknfhf/sF23/otaAL934m0yw8QWGhz3Qj1W/jea2tyjEyIn3jkDAx7mti3/18f+8P515P4w/5OJ+Hn/YLv/5V6xb/AOvj/wB4fzoA8k/Zq/5ELVP+w7ff+hivQ/EfijS/CVlDeavdiztpZ0tUkZGbMj52rhQTzg89K88/Zq/5ELVP+w7ff+hik/aV/wCRF0f/ALGCw/8AQmoA9ZIIJB6iu/8A+CeH/J13xu/7A2kf+gmuBl/1r/U133/BPD/k6743f9gbSP8A0E0AfonRRRQAUUUUAFFFFAHFfGv4dv8AFv4Q+MvBUd6NNfxBpVzpq3jR7xCZYym8rkZxnOM18Qab/wAEzvitpGnWthafHi2itbWJYYk/4RxDtRRgDJfngV+ilFAH5F+OP2KviLo37U3wz8F3Hxdgu9a1nSdSubXWRoiKLRIVBdDHuw+/PUnivaV/4JwfF5WDD4+WwIOf+Raj/wDi69b+Lf8AykV+An/Yua7/AOixX1hQB+bHhH/glt8UPCGmTWVh8cbK0hluZLlo4/D6uC7nJbLPnJ9OleXftafsWfEX4V/D7QNS1z4uQeI7W88S6dp8dsmiJb+VLK7BJtwY529dvev14r5K/wCClf8AyRjwX/2Pmif+jWoA8pb/AIJwfF5mJ/4X5bcn/oWo/wD4uvnC08NfGL9nP9qL4leGvDXxWt4ddi03TW1DWW0SJxdxtGHjQRNkJs3YyOtfs1X5ZfHr/k/j4vf9gjR//SdKAKv/AAuD9p3/AKLfZ/8AhNW3/wATR/wuD9p3/ot9n/4TVt/8TUlFAHS/AP8AaF+OiftT/DLwd4y+I8HirQPEf283FtHo8FrgQ2zOvzKufvFTwR933r9Lq/KX4V/8nx/AT6az/wCkhr9WqACiiigAorg/+F+/DH/oo/hL/wAHlr/8co/4X78Mf+ij+Ev/AAeWv/xysPb0v5196Ob6zQ/5+L70fJXxz+P/AIB8P/8ABRj4SR6h4hitpdB0vU9M1GNoZS0Fzcon2ePAXJMm5cYyORX3gDkV8j+P/h78B/H/AO1D4I+M158RfB41Hw7aSRS2n9s2uLuZf+PWVj5nWLdIffCf3a99/wCF+/DH/oo/hL/weWv/AMco9vS/nX3oPrND/n4vvR3lfEP/AAVJ+KPhfwv8PvA3h/VdWjstXl8VaZq0du8b/PawSnzpAQMYTIyM55HHNfUX/C/fhj/0Ufwl/wCDy1/+OV4V+1p4M+CH7WHhXw9pGtfEzwlZy6Pq0F/HdJrVqXMG4C4hB8zgSR5GezBT2o9vS/nX3oPrND/n4vvR9NeEfFmleO/DGmeIdCuxf6PqUC3NpdKjKJomGVcBgDgjkZHSvzJ+PX/J/Hxe/wCwRo//AKTpX6E6f8bvhRpVhbWVn8QPB9taW0Swwwx63ahY0UAKoHmcAAAV+dn7Sdh4gv8A9q7x1458EXfgbxPoOt2On20U1x400+1IMMCK3ytLn7wI5Haj29L+dfeg+s0P+fi+9ElFcP8Abfih/wBAP4ff+HC03/45R9t+KH/QD+H3/hwtN/8AjlHt6X86+9B9Zof8/F96Ox+Ff/J8fwE+ms/+khr9SpvEOlW2swaRLqdnFq1whkhsHnQTyIN2WWMncR8rcgfwn0NflN8EdJ8WH9pr4c+MfFN54B8KaT4dTUQ94vjKwvVDT2rIjNEkyswD7cgEZBPI619x/Dz4maB9g0WXxt8XvBV7e6Ze3V2iQatbeY8rGeNWabzyrRGOZiqLHGVBjHGwqT29L+dfeg+s0P8An4vvR9DUVwf/AAv34Y/9FH8Jf+Dy1/8AjlFHt6X86+9B9Zof8/F96P/Z]]></base64>
        </img>
        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/h6.jpg]]></src>
            <base64>
                <![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCABNAF8DASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9U6KK+NPj1/wUC1r4SfHDXvhzoPwqufGdxpFtbXU15DqyWw2zRhx8rIemcde1AH2XRX5//wDDzH4gf9G8ah/4UMP/AMbo/wCHmPxA/wCjeNQ/8KGH/wCN0AfoBRXxJ8Iv+CiuufEH41eEPh9r/wAI7rwi/iSSZIL6bWI7gL5cbOx2LGM9AOo619t0AFFFFABRRRQAUUUUAFfll8f/APk/n4qf9gXSv/RK1+ptfll8f/8Ak/n4qf8AYF0r/wBErQBDRRRQBm/Dz/k9z4B/9d9R/wDSc1+stfk18PP+T3PgH/131H/0nNfrLQAUUUUAFFFFABRRRQAV+Q37WnxS8NfD39vH4mz69ftZRTaXpkEZELvl1gQkfKD2Ir9ea/K39oW1guP2+PimJoIpgNG0ogSxhsfuV9RQB5P/AMNS/DT/AKD8n/gHN/8AE0f8NS/DT/oPyf8AgHN/8TXp39l2P/Phaf8AgOn+FH9l2P8Az4Wn/gOn+FAHkfg39pz4c6X+1L8IvF1xrkiaBoUt62oXIs5iYhJCVT5Qu5sk9ga/Qr/h6L+zj/0O9x/4Jrz/AONV+eHxJsraL9oL4UrHbQRqy3e5UiUBvl7gDmvZfsdv/wA+0H/fpf8ACgD6q/4ei/s4/wDQ73H/AIJrz/41UVx/wVL/AGcbePf/AMJrcvyBhdHuwf1jFfLX2O3/AOfaD/v0v+FeQ/tT28MfwpykMSH+07TlUAP3z7UAfoR/w9F/Zx/6He4/8E15/wDGqP8Ah6L+zj/0O9x/4Jrz/wCNV8pQ2dv5EX+jQ/cX/lkvoPan/Y7f/n2g/wC/S/4UAfVJ/wCCov7OIGT44uAPU6Pef/Gq+i/h18QtC+K/gnSfFvhm8OoaDqsXnWlyY2j8xNxXO1gCOVPUV+Wvi20tx4T1si3hB+wz8iNf+ebe1fc3/BPT/ky/4U/9gs/+jpKAPoivyy+P/wDyfz8VP+wLpX/ola/U2vyt/aGuYbb9vj4pmaaOEHRtKwZHC5/cr60AJRVX+1bH/n+tf+/y/wCNH9q2P/P9a/8Af5f8aAPJfib/AMnCfCj/AHbv/wBBr2SvE/iVf2r/ALQHwqkW6gaNFu9ziVSF+Xuc8V7F/atj/wA/1r/3+X/GgC1Xj/7VP/JKP+4naf8AoZr1b+1bH/n+tf8Av8v+NeRftSX9rP8ACvZFdQSt/aVodqSqxxvPYGgD2SH/AFEX+4v8hT6pQ6rY+RF/p1t9xf8AlsvoPen/ANq2P/P9a/8Af5f8aAKfi7/kU9b/AOvGf/0W1fcP/BPT/ky/4U/9gs/+jpK+FfFuqWTeFNaAvbYk2M4AEy8/uz719X/sP/FfQNH/AGTvhd4ZHiPS9G11dBN0Z9Tw1tbj7SQEkHmx5d1YlVDZwNx4xuAPsOvD/ij+xT8GPjP4xuvFXjLwTb61r10kcc15JdTxl1RQqjCOBwAB07V7hRQB8x/8O1f2b/8Aomlp/wCB11/8do/4dq/s3/8ARNLT/wADrr/47X05RQB8vyf8Ezv2bpJo5P8AhW1upTPyrqF2FP1Hm81J/wAO1f2b/wDomlp/4HXX/wAdr6cooA+Y/wDh2r+zf/0TS0/8Drr/AOO1Hcf8Ezv2brmIofhvbxjIO6PULtT+Ylr6gooA+Y/+Hav7N/8A0TS0/wDA66/+O0f8O1f2b/8Aomlp/wCB11/8dr6cooA+Y/8Ah2r+zf8A9E0tP/A66/8Ajte2+BPhJ4R+Gen6PZeGtFg0q30mxfTbMRszNHbNIJDGWYksN43DdnBLYxuOevooA//Z]]></base64>
        </img>
        <description><![CDATA[<p><!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]--><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
table.MsoTableSimple1
{mso-style-name:"简明型 1";
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
border-top:solid green 1.5pt;
border-left:none;
border-bottom:solid green 1.5pt;
border-right:none;
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:Times;
mso-bidi-font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
table.MsoTableSimple1FirstRow
{mso-style-name:"简明型 1";
mso-table-condition:first-row;
mso-tstyle-border-bottom:.75pt solid green;
mso-tstyle-diagonal-down:0cm none windowtext;
mso-tstyle-diagonal-up:0cm none windowtext;}
table.MsoTableSimple1LastRow
{mso-style-name:"简明型 1";
mso-table-condition:last-row;
mso-tstyle-border-top:.75pt solid green;
mso-tstyle-diagonal-down:0cm none windowtext;
mso-tstyle-diagonal-up:0cm none windowtext;}
</style>
<![endif]--></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US" style="mso-fareast-language:ZH-CN">A</span><span style="font-family:
宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">和</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">B</span><span style="font-family:
宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">在玩一个射击游戏，战场由若干单位正方形积木组成。积木占据了连续的若干列，且图形周长等于它最小包围矩形的周长。下图</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">(a)</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">是一个合法的战场，但</span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">(b)</span><span style="font-family:宋体;mso-ascii-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">和</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">(c)</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">都不是：</span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">(b)</span><span style="font-family:宋体;mso-ascii-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">中有空列；</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">(c)</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">的图形周长为</span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">14</span><span style="font-family:宋体;mso-ascii-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">，而最小包围矩形（用虚线画出）的周长为</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-hansi-font-family:宋体;
mso-fareast-language:ZH-CN">12</span><span style="font-family:宋体;mso-ascii-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">。受重力影响，每个积木的正下方要么是地面，要么是另一个积木。</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">为了让战场看上去错落有致、玩着更刺激，它不能恰好是一个矩形（即：不能每列积木都一样高）。</span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">&nbsp;</span></p>
<p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN"><img src="http://oj.zjicm.acm.zj.cn:80/upload/201205/h1.jpg" alt="" /></span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">游戏规则如下：</span></p>
<p style="margin-left:18.0pt;text-align:justify;text-justify:
inter-ideograph;text-indent:-18.0pt;mso-pagination:none;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt" class="MsoNormal"><span lang="EN-US" style="mso-fareast-language:
ZH-CN"><span style="mso-list:Ignore">1、<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span></span><span lang="EN-US" style="mso-fareast-language:
ZH-CN">A</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:
ZH-CN">和</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">B</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">轮流射击，</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">A</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">先射击。</span></p>
<p style="margin-left:18.0pt;text-align:justify;text-justify:
inter-ideograph;text-indent:-18.0pt;mso-pagination:none;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt" class="MsoNormal"><span lang="EN-US"><span style="mso-list:Ignore">2、<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span></span><span style="font-family:宋体;mso-bidi-font-family:
宋体;mso-fareast-language:ZH-CN">每次射击时，首先选择一行（该行必须至少有一个积木），以及</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">&ldquo;</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">左</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">&rdquo;</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">和</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">&ldquo;</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">右</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">&rdquo;</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">中的一个方向，然后往这个方向开火。子弹的威力为</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">1~3</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">的均匀随机整数（即：威力为</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">1</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">、</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">2</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">、</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">3</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">的概率各为</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">1/3</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">），表示子弹能打掉的积木个数，被打掉的积木将</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">直接从战场中消失</span><span style="font-family:宋体;mso-bidi-font-family:宋体;
mso-fareast-language:ZH-CN">。如果该行的积木个数小于威力值，则子弹将在打掉该行所有积木后消失。</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">例如，若选择往右射击从下往上数第</span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">3</span><span style="font-family:宋体;mso-ascii-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">行，且威力为</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">2</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">，且这一行一共有</span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-hansi-font-family:宋体;mso-fareast-language:ZH-CN">4</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">个积木，则最左边的两个积木将被打掉。注意：这两个积木可以不连续。</span></p>
<p style="margin-left:18.0pt;text-align:justify;text-justify:
inter-ideograph;text-indent:-18.0pt;mso-pagination:none;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt" class="MsoNormal"><span lang="EN-US" style="mso-fareast-language:
ZH-CN"><span style="mso-list:Ignore">3、<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span></span><span style="font-family:宋体;mso-bidi-font-family:
宋体;mso-fareast-language:ZH-CN">每次射击完成后，悬空的积木垂直往下落。所有积木不再下落后，下一位选手才能开始射击。</span></p>
<p style="margin-left:18.0pt;text-align:justify;text-justify:
inter-ideograph;text-indent:-18.0pt;mso-pagination:none;mso-list:l0 level1 lfo1;
tab-stops:list 18.0pt" class="MsoNormal"><span lang="EN-US" style="mso-fareast-language:
ZH-CN"><span style="mso-list:Ignore">4、<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp; </span></span></span><span style="font-family:宋体;mso-bidi-font-family:
宋体;mso-fareast-language:ZH-CN">谁打掉了最后一个积木，谁就获胜。</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-language:ZH-CN">&nbsp;</span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">假定开局是</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体"><img width="19" height="15" src="http://oj.zjicm.acm.zj.cn:80/admin/../file:///D:\temp\msohtml1\01\clip_image004.jpg" alt="" /></span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-hansi-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">，</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">根据规则</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">1</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">，</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">A</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">先开火。</span><span style="font-family:宋体;mso-ascii-font-family:&quot;Times New Roman&quot;;mso-fareast-language:
ZH-CN">射击后，</span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">B</span><span style="font-family:宋体;mso-ascii-font-family:
&quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">可能面临的后续局面中的其中三个如下表：</span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US" style="mso-fareast-language:ZH-CN">&nbsp;</span></p>
<div align="center">
<table cellspacing="0" cellpadding="0" border="1" style="margin-left:-34.8pt;border-collapse:collapse;border:none;mso-border-top-alt:
    solid green 1.5pt;mso-border-bottom-alt:solid green 1.5pt;mso-yfti-tbllook:
    480;mso-padding-alt:0cm 5.4pt 0cm 5.4pt" class="MsoTableSimple1">
    <tbody>
        <tr style="mso-yfti-irow:-1;mso-yfti-firstrow:yes">
            <td width="160" style="width:119.65pt;border-top:solid green 1.5pt;border-left:
            none;border-bottom:solid green 1.0pt;border-right:none;mso-border-top-alt:
            solid green 1.5pt;mso-border-bottom-alt:solid green .75pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:1" class="MsoNormal"><b style="mso-bidi-font-weight:normal"><span style="font-family:黑体;mso-hansi-font-family:
            宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">行编号（从下往上数）</span></b></p>
            </td>
            <td width="107" style="width:79.9pt;border-top:solid green 1.5pt;border-left:
            none;border-bottom:solid green 1.0pt;border-right:none;mso-border-top-alt:
            solid green 1.5pt;mso-border-bottom-alt:solid green .75pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:1" class="MsoNormal"><b style="mso-bidi-font-weight:normal"><span style="font-family:黑体;mso-hansi-font-family:
            宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">子弹前进方向</span></b></p>
            </td>
            <td width="139" style="width:104.2pt;border-top:solid green 1.5pt;border-left:
            none;border-bottom:solid green 1.0pt;border-right:none;mso-border-top-alt:
            solid green 1.5pt;mso-border-bottom-alt:solid green .75pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:1" class="MsoNormal"><b style="mso-bidi-font-weight:normal"><span style="font-family:黑体;mso-hansi-font-family:
            宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">威力（随机值）</span></b></p>
            </td>
            <td width="113" style="width:3.0cm;border-top:solid green 1.5pt;border-left:
            none;border-bottom:solid green 1.0pt;border-right:none;mso-border-top-alt:
            solid green 1.5pt;mso-border-bottom-alt:solid green .75pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:1" class="MsoNormal"><b style="mso-bidi-font-weight:normal"><span style="font-family:黑体;mso-hansi-font-family:
            宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">刚射击后</span></b></p>
            </td>
            <td width="134" style="width:100.35pt;border-top:solid green 1.5pt;border-left:
            none;border-bottom:solid green 1.0pt;border-right:none;mso-border-top-alt:
            solid green 1.5pt;mso-border-bottom-alt:solid green .75pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:1" class="MsoNormal"><b style="mso-bidi-font-weight:normal"><span style="font-family:黑体;mso-hansi-font-family:
            宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">积木稳定后</span></b></p>
            </td>
        </tr>
        <tr style="mso-yfti-irow:0">
            <td width="160" style="width:119.65pt;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-fareast-font-family:宋体;mso-bidi-font-family:
            &quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">2</span></p>
            </td>
            <td width="107" style="width:79.9pt;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Times;mso-hansi-font-family:Times;
            mso-fareast-language:ZH-CN">从右往左</span></p>
            </td>
            <td width="139" style="width:104.2pt;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-fareast-font-family:宋体;mso-bidi-font-family:
            &quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">1</span></p>
            </td>
            <td width="113" style="width:3.0cm;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-bidi-font-family:&quot;Times New Roman&quot;"><img width="128" height="76" src="http://oj.zjicm.acm.zj.cn:80/upload/201205/h2.jpg" alt="" /></span></p>
            </td>
            <td width="134" style="width:100.35pt;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Times;mso-hansi-font-family:Times;
            mso-fareast-language:ZH-CN">（同左图）</span></p>
            </td>
        </tr>
        <tr style="mso-yfti-irow:1">
            <td width="160" style="width:119.65pt;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-fareast-font-family:宋体;mso-bidi-font-family:
            &quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">1</span></p>
            </td>
            <td width="107" style="width:79.9pt;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Times;mso-hansi-font-family:Times;
            mso-fareast-language:ZH-CN">从右往左</span></p>
            </td>
            <td width="139" style="width:104.2pt;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-fareast-font-family:宋体;mso-bidi-font-family:
            &quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">2</span></p>
            </td>
            <td width="113" style="width:3.0cm;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-bidi-font-family:&quot;Times New Roman&quot;"><img src="http://oj.zjicm.acm.zj.cn:80/upload/201205/h3.jpg" alt="" /></span></p>
            </td>
            <td width="134" style="width:100.35pt;border:none;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-bidi-font-family:&quot;Times New Roman&quot;"><img src="http://oj.zjicm.acm.zj.cn:80/upload/201205/h4.jpg" alt="" /></span></p>
            </td>
        </tr>
        <tr style="mso-yfti-irow:2;mso-yfti-lastrow:yes">
            <td width="160" style="width:119.65pt;border-top:solid green 1.0pt;border-left:
            none;border-bottom:solid green 1.5pt;border-right:none;mso-border-top-alt:
            solid green .75pt;mso-border-bottom-alt:solid green 1.5pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:2" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-fareast-font-family:宋体;mso-bidi-font-family:
            &quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">1</span></p>
            </td>
            <td width="107" style="width:79.9pt;border-top:solid green 1.0pt;border-left:
            none;border-bottom:solid green 1.5pt;border-right:none;mso-border-top-alt:
            solid green .75pt;mso-border-bottom-alt:solid green 1.5pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:2" class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Times;mso-hansi-font-family:Times;
            mso-fareast-language:ZH-CN">从左往右</span></p>
            </td>
            <td width="139" style="width:104.2pt;border-top:solid green 1.0pt;border-left:
            none;border-bottom:solid green 1.5pt;border-right:none;mso-border-top-alt:
            solid green .75pt;mso-border-bottom-alt:solid green 1.5pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:2" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-fareast-font-family:宋体;mso-bidi-font-family:
            &quot;Times New Roman&quot;;mso-fareast-language:ZH-CN">3</span></p>
            </td>
            <td width="113" style="width:3.0cm;border-top:solid green 1.0pt;border-left:
            none;border-bottom:solid green 1.5pt;border-right:none;mso-border-top-alt:
            solid green .75pt;mso-border-bottom-alt:solid green 1.5pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:2" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-bidi-font-family:&quot;Times New Roman&quot;"><img src="http://oj.zjicm.acm.zj.cn:80/upload/201205/h5.jpg" alt="" /></span></p>
            </td>
            <td width="134" style="width:100.35pt;border-top:solid green 1.0pt;border-left:
            none;border-bottom:solid green 1.5pt;border-right:none;mso-border-top-alt:
            solid green .75pt;mso-border-bottom-alt:solid green 1.5pt;padding:0cm 5.4pt 0cm 5.4pt">
            <p align="center" style="text-align:center;mso-yfti-cnfc:2" class="MsoNormal"><span lang="EN-US" style="font-family:Times;mso-bidi-font-family:&quot;Times New Roman&quot;"><img src="http://oj.zjicm.acm.zj.cn:80/upload/201205/h6.jpg" alt="" /></span></p>
            </td>
        </tr>
    </tbody>
</table>
</div>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:
ZH-CN">&nbsp;</span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">假定</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">A</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">和</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">B</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">都足够聪明，采取让自己获胜概率尽量高的策略，你的任务是计算出</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">A</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">获胜的概率。</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>
<h1><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:黑体;
mso-hansi-font-family:Arial;mso-fareast-language:ZH-CN">输入</span></h1>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">输入文件最多包含</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">25</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">组测试数据，每个数据仅包含两行，第一行是整数</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">n</span></i><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">（</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">1&lt;=<i>n</i>&lt;=6</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">），即积木的列数。第二行包含</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">n</span></i><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">个正整数</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">h</span></i><sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">1</span></sub><span lang="EN-US" style="mso-fareast-language:ZH-CN">, <i>h</i><sub>2</sub>,..., <i>h<sub>n</sub></i>(1&lt;=<i>h<sub>i</sub></i>&lt;=6)</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">，表示从左往右数第</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">i</span></i><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">列的高度。积木的排列方式保证符合题目描述（即：图形周长等于它最小包围矩形的周长，且各列的高度不全相同）。</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">n</span></i><span lang="EN-US" style="mso-fareast-language:ZH-CN">=0</span><span style="font-family:宋体;
mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">表示输入结束，你的程序不应当处理这一行。</span></p>
<p style="line-height:normal" class="MsoFooter"><span lang="EN-US" style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN">&nbsp;</span></p>
<h1><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:黑体;
mso-hansi-font-family:Arial;mso-fareast-language:ZH-CN">输出</span></h1>
<span style="font-size:10.0pt;font-family:宋体;mso-bidi-font-family:宋体;
mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">对于每组数据，输出仅一行，即</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">A</span><span style="font-size:10.0pt;font-family:
宋体;mso-bidi-font-family:宋体;mso-ansi-language:EN-US;mso-fareast-language:ZH-CN;
mso-bidi-language:AR-SA">获胜的概率，四舍五入保留六位小数。</span>]]></description>
        <input><![CDATA[]]></input>
        <output><![CDATA[]]></output>
        <sample_input><![CDATA[3
2 1 1
0
]]></sample_input>
        <sample_output><![CDATA[0.555556]]></sample_output>
        <test_input><![CDATA[3
6 2 1
3
1 6 2
6
2 6 6 5 3 1
6
1 2 6 5 4 3
6
2 3 6 5 4 1
6
1 3 5 5 6 4
6
1 2 3 4 5 6
6
5 6 6 6 6 5
6
5 6 6 6 6 6
6
4 6 6 6 6 6
0
]]></test_input>
        <test_output><![CDATA[0.477366
0.469136
0.500015
0.500138
0.499963
0.500094
0.500096
0.500006
0.500003
0.499998
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include <cstdio>
#include <algorithm>
using namespace std;

#define X(A,B) (A[B[0]][B[1]][B[2]][B[3]][B[4]][B[5]])

double cache[7][7][7][7][7][7];
bool vis[7][7][7][7][7][7];

double win(int h[6])
{
  if (X(vis, h)) return X(cache, h);
  X(vis, h)=true;
  X(cache, h)=0.;

  int mx=0;
  for (int i=0; i < 6; i++) mx=max(mx, h[i]);

  int i=0, hh[6];
  for (int j=0; j < mx; j++){
    for (int d=0; d < 2; d++){
      i=0 + 5 * d;
      double loss=0.;
      for (int p=1; p <= 3; p++){
        for (int k=0; k < 6; k++) hh[k]=h[k];
        int pp=p;
        int k=i;
        while (pp){
          if (k < 0 || k > 5) break;
          if (hh[k] > j) hh[k]--, pp--;
          k+=1 - 2 * d;
        }
        loss+=win(hh);
      }
      loss=(1 - loss / 3.);
      if (loss > X(cache, h)) X(cache, h)=loss;
    }
  }
  return X(cache, h);
}

int main() {
  int n;
  while (scanf("%d", &n) == 1 && n) {
    int h[6]={0};
    for (int i=0; i < n; i++) scanf("%d", &h[i]);
    printf("%.6lf\n", win(h));
  }
  return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[战场的数目]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/i1.jpg]]></src>
            <base64>
                <![CDATA[/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCAA6AJgDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD7x/a1+NOo/s/fAnxD440qyh1C+01UKW9wSEbLY5xX56ad/wAFZvjZq9jFeWXwvsLq1lGUmj8wq30r7H/4KZ/8mbeOP9yL/wBDr4R/Zudh8FfDXP8AyxP86Yzsf+Hqnx25/wCLT2f5SVZ8Nf8ABV/4r3Pjzw3oWu/D7TdKi1W9itt8hkDbWcKSM+ma0d7epr5/+OrE/Hb4SZOf+JlD/wCjVosFj9xom3xox6kA0+o7f/UR/wC6P5VJSEFFFFABRRRQAUUUUAFFFFABX5s/tJf8FLviL8Jv2gvEvw98M+C9P1yLS5AsbszmVxgEkgV+k1fjH8YSR/wUp8c44+9/6AKAO5/4eqfHb/olFnx7SUyb/gqz8c7eGSWX4VWSRxqWZiJMADqa3d7eprI8Yu3/AAiOt8n/AI85f/Qadh2PsT9gn9qbXP2r/hrrHiPXdKtNJubK/wDsixWjEqV25yc96K8U/wCCMf8AyQbxX/2Gz/6DRSEew/8ABTP/AJM28c/7kX/oYr4S/ZuiY/BXw0Qhx5J7e9fcH/BUi1uLr9jbxd9nm8ny5beST/aQPyv41+Sfw3+BvxD8UeC9M1PR/FhsNNuELRW/2h12D0wDTQ0fa/lP/cb8q+f/AI6xsPjv8JAVIJ1KHGR/01WuN/4Zu+K3H/Fbn/wKf/GvMPib8PvGXgXxt4dsdW8QtfancFZLO5EzN5J34ByTxzzQM/pFgBEMYPBCj+VSV+Ia6R+0sFUD4v3oXaMf6UemKVdH/aXYgf8AC373JP8Az9GkSft3RX5Tf8E1vip8TNa/ao8Q+EvGvjPUPEVvYabLmG4m3x7wR8wFfqzQAUUUUAFFFFABRX50/wDBW74q+NvhwPhxB4O8S33h2TUbiWKZrOTZvPAXd9M18sR6X+0tJHG4+L99h1Dc3R7jP9aAP29r8Y/jChP/AAUp8cAKScMen+wKwF0j9pckD/hcF7nP/P0a+eYfCPjvxt8ddY0u48TSTeLld/tGqyzNulIAz8wpjPvnyn/uN+VZHjGJ/wDhENb+Q/8AHnL2/wBmvmT/AIZt+K3/AEO5/wDAp/8AGqmsfs7/ABRstHvbm48ZmWCGFnkj+1OdygcjrTGff3/BGP8A5IN4r/7DZ/8AQaKo/wDBFa0uYPgt43llm3wSaygjTP3CIyG/PiipJPb/APgpp/yZt44/3Iv/AEMV8Ifs3/8AJFfDX/XE/wA6+7/+Cmn/ACZt44/3Iv8A0Ovzv/Z/+IPhnSPhF4etL3XbK0uo4iHhllAZTnuKaGj2uvlX9qv/AJLB4D/3U/8ARtfQP/C0/B3/AEMunf8Af4V81ftL+K9G1v4reCbrT9Ttry2gVPNlifcqfvM80xn16v3E/wB0fyp8f31+orlF+Kfg/Yn/ABUunfdH/LYelOT4qeDg6/8AFS6d1/57CmMd/wAE5v8Ak/Xx3/14Tf0r9cK/If8A4Jr39tqn7dfje6tJ0ubaXT5mSWM5VhxyK/XioICiiigAooooA/MP/gs3/wAhD4Rf9fz/AMxWXaf8edt/1yT/ANBFaX/BZ+RYbz4SO7BEW9kZiewBHNcLa/FLwetpbg+JNOBESAjzh/dFNDR1yffX618p/Dz/AJPE8Sf9dJ/6V9Br8U/B24f8VLp3X/nsK+Z/AnirRrT9q3X9Vm1K3j02R5il2z/u2zjGDTGfYFZHjD/kUdb/AOvOX/0Gs3/hafg7/oZdO/7/AArL8V/E7wlceFtYij8RafJI9pIqqswyTt6UAfQP/BGP/kg3iv8A7DZ/9Boo/wCCMRB+AvisjvrZ/wDQKKkk+z/jR8IND+Ovw71PwZ4j88aTqAUTfZ32PwcjBr5Q/wCHPfwN/v65/wCBp/wr7nooA+GP+HPfwN/va5/4GmqV9/wRu+C1zLC0Go+ILREOXRLlWD+xyOPwr70ooA+GP+HPXwN/v67/AOBp/wAKP+HPfwN/va5/4GmvueigD5s/Z2/YI+G37MvjSfxP4SOpHUZrZrVvtlx5i7D1wK+k6KKACiiigAooooA8O/aX/ZB8D/tUxaMnjE3wGlM7W5s5vL+91zXhP/Dnv4G8/Nrn/gaa+56KAPhj/hz18DePm13/AMDTVKP/AII3fBZNQadtR8QPbkcWxuV2j8cZr70ooA+GP+HPfwN/va5/4Gmj/hz38DePm1z/AMDTX3PRQB5J+zj+zP4S/Zf8KX3h/wAIG7NjeXP2qQ3cm9t+MdfSivW6KAP/2Q==]]></base64>
        </img>
        <img>
            <src><![CDATA[http://oj.zjicm.acm.zj.cn:80/upload/201205/i2.jpg]]></src>
            <base64>
                <![CDATA[]]></base64>
        </img>
        <description><![CDATA[<p><!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]--><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">在上题中，假设战场的图形周长为</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">p</span></i><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">，一共有多少种可能的战场？</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-language:ZH-CN">&nbsp;</span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">例如，</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">p</span></i><span lang="EN-US" style="mso-fareast-language:ZH-CN">&lt;8</span><span style="font-family:宋体;
mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">时没有符合要求的战场，</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">p</span></i><span lang="EN-US" style="mso-fareast-language:ZH-CN">=8</span><span style="font-family:宋体;
mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">时有</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">2</span><span style="font-family:宋体;
mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">种战场：</span></p>
<p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US"><img src="http://oj.zjicm.acm.zj.cn:80/upload/201205/i1.jpg" alt="" /></span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><i><span lang="EN-US">p</span></i><span lang="EN-US">=10</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">有</span><span lang="EN-US">9</span><span lang="EN-US" style="font-family:宋体;mso-bidi-font-family:宋体">种战场：</span></p>
<p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US"><img width="739" height="71" src="http://oj.zjicm.acm.zj.cn:80/upload/201205/i2.jpg" alt="" /></span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">要求输出方案总数模</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">987654321</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">的值。</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>
<h1><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:黑体;
mso-hansi-font-family:Arial;mso-fareast-language:ZH-CN">输入</span></h1>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">输入文件最多包含</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">25</span><span style="font-family:
宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">组测试数据，每个数据仅包含一行，有一个整数</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">p</span></i><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">（</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">1&lt;=<i>p</i>&lt;=10<sup>9</sup></span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">），表示战场的图形周长。</span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN">p</span></i><span lang="EN-US" style="mso-fareast-language:ZH-CN">=0</span><span style="font-family:宋体;
mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">表示输入结束，你的程序不应当处理这一行。</span></p>
<p style="line-height:normal" class="MsoFooter"><span lang="EN-US" style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US;mso-fareast-language:
ZH-CN">&nbsp;</span></p>
<h1><span style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:黑体;
mso-hansi-font-family:Arial;mso-fareast-language:ZH-CN">输出</span></h1>
<p style="text-indent:20.0pt;mso-char-indent-count:2.0" class="MsoNormal"><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">对于每组数据，输出仅一行，即满足条件的战场总数除以</span><span lang="EN-US" style="mso-fareast-language:ZH-CN">987654321</span><span style="font-family:宋体;mso-bidi-font-family:宋体;mso-fareast-language:ZH-CN">的余数。</span></p>]]></description>
        <input><![CDATA[]]></input>
        <output><![CDATA[]]></output>
        <sample_input><![CDATA[7
8
9
10
0
]]></sample_input>
        <sample_output><![CDATA[0
2
0
9
]]></sample_output>
        <test_input><![CDATA[1303809
297996884
54182796
33
399
70
393464074
961094
62
96083
38900
746
87352
848998070
70358
55
3119735
7587
6135031
8857224
974913373
46533263
8210928
8678094
444
0
]]></test_input>
        <test_output><![CDATA[0
29211391
690228599
0
0
385027072
852054267
902940272
672643283
0
417697699
740574907
374871277
152530907
144077447
0
0
0
0
465918789
0
0
720028356
91448136
117305678
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include <stdio.h>
#include <algorithm>
using namespace std;
typedef long long ll;
const ll mod=987654321;

ll A[2][2],B[2][2],T[2][2];

void pow(int n)
{
	if(n==0)
	{
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
				B[i][j]=(i==j);
		return;
	}
	if(n&1)
	{
		pow(n-1);
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
			{
				T[i][j]=0;
					for(int k=0;k<2;k++)
						T[i][j]=(T[i][j]+A[i][k]*B[k][j])%mod;
			}
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
			{
				B[i][j]=T[i][j];
			}
		
	}
	else
	{
		pow(n/2);
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
			{
				T[i][j]=0;
					for(int k=0;k<2;k++)
						T[i][j]=(T[i][j]+B[i][k]*B[k][j])%mod;
			}
		for(int i=0;i<2;i++)
			for(int j=0;j<2;j++)
			{
				B[i][j]=T[i][j];
			}
		
	}
}

int main()
{
  int n;
  A[0][0]=1;	A[0][1]=1;
  A[1][0]=1;	A[1][1]=0;
  while (scanf("%d", &n) == 1 && n)
  {
	ll ans=0;
	if(n&1) ans=0;
	else if(n<4) ans=0;
	else
	{
		pow(n-4);
		ans=B[0][0]-n/2+1;
		ans%=mod;
		if(ans<0)ans+=mod;
	}
	printf("%lld\n",ans);
  }

  return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[Infinite Dictionaries]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <description><![CDATA[<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--></p>
<p class="MsoNormal"><span lang="EN-US">A dictionary is a set of key-value pairs, for example:</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p align="center" style="text-align:center" class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">{'color':'red', 'price':2, 7:'test', 100:-100}</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">As you can see, <b style="mso-bidi-font-weight:
normal"><i style="mso-bidi-font-style:normal"><u>keys and values can be strings or integers</u></i></b>. What&rsquo;s more, values can also be dictionaries or variable reference</span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">s</span><span lang="EN-US">. Here is the formal definition of </span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">terms that will be used soon</span><span lang="EN-US">:</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;;
mso-bidi-font-weight:bold">key</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;"> <span style="mso-spacerun:yes">&nbsp;&nbsp;</span></span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:宋体;mso-fareast-language:
ZH-CN">::=</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INTEGER | STRING</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;;
mso-bidi-font-weight:bold">value</span><span lang="EN-US" style="font-family:
&quot;Courier New&quot;;mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN;mso-bidi-font-weight:
bold"> </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-bidi-font-weight:
bold">:</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN;mso-bidi-font-weight:bold">:=</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>INTEGER | STRING | dict</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;;
mso-bidi-font-weight:bold">pair</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;
mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN;mso-bidi-font-weight:
bold"><span style="mso-spacerun:yes">&nbsp; </span></span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-bidi-font-weight:bold">:</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN;mso-bidi-font-weight:bold">:=</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>key ':' value</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;;
mso-bidi-font-weight:bold">dict</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;
mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN;mso-bidi-font-weight:
bold"><span style="mso-spacerun:yes">&nbsp; </span></span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-bidi-font-weight:bold">:</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN;mso-bidi-font-weight:bold">:= </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>'{' [pair (',' pair)*] '}'</span></p>
<p class="MsoNormal"><span lang="SV" style="font-family:&quot;Courier New&quot;;mso-ansi-language:
SV">var</span><span lang="SV" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:SV;mso-fareast-language:ZH-CN"><span style="mso-spacerun:yes">&nbsp;&nbsp; </span></span><span lang="SV" style="font-family:
&quot;Courier New&quot;;mso-ansi-language:SV">:</span><span lang="SV" style="font-family:
&quot;Courier New&quot;;mso-fareast-font-family:宋体;mso-ansi-language:SV;mso-fareast-language:
ZH-CN">:=</span><span lang="SV" style="font-family:&quot;Courier New&quot;;mso-ansi-language:
SV"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>'a'|'b'|'c'|...|'z'</span></p>
<p class="MsoNormal"><span lang="SV" style="font-family:&quot;Courier New&quot;;mso-ansi-language:
SV">slot</span><span lang="SV" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:
宋体;mso-ansi-language:SV;mso-fareast-language:ZH-CN"><span style="mso-spacerun:yes">&nbsp; </span></span><span lang="SV" style="font-family:&quot;Courier New&quot;;
mso-ansi-language:SV">:</span><span lang="SV" style="font-family:&quot;Courier New&quot;;
mso-fareast-font-family:宋体;mso-ansi-language:SV;mso-fareast-language:ZH-CN">:=</span><span lang="SV" style="font-family:&quot;Courier New&quot;;mso-ansi-language:SV"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>var('[' key ']')*</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">lvar</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN"><span style="mso-spacerun:yes">&nbsp; </span></span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">:</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:宋体;mso-fareast-language:
ZH-CN">:=</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>slot</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">rvar</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN"><span style="mso-spacerun:yes">&nbsp; </span></span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">:</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;;mso-fareast-font-family:宋体;mso-fareast-language:
ZH-CN">:=</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>slot | value</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">Here </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">('[' key ']')* </span><span lang="EN-US">means zero or more subscripts, </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">[pair (',' pair)*] </span><span lang="EN-US">means zero or more key-value pairs.</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">Strings are always enclosed by single quotes (</span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">''</span><span lang="EN-US">) and consists of up to 10 lower-case letters. Integers always have absolute values of no more than 1000. You can insert spaces anywhere, except inside strings or integers. For example, </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">{ 'a':-1}</span><span lang="EN-US"> and </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">{'a' : -1<span style="mso-spacerun:yes">&nbsp;&nbsp; </span>}</span><span lang="EN-US"> are the same, but </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">{'a b':1}</span><span lang="EN-US"> and </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">{'a':- 1}</span><span lang="EN-US"> are both illegal.</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">Your task is to execute a series of commands and print </span><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">the</span><span lang="EN-US"> </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">results</span><span lang="EN-US">. There are 3 kinds of commands:</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><b><i><span lang="DA" style="mso-fareast-font-family:宋体;
mso-ansi-language:DA;mso-fareast-language:ZH-CN">1. </span></i></b><b><i><span lang="DA" style="mso-ansi-language:DA">Assignment</span></i></b><span lang="DA" style="mso-ansi-language:DA">: </span><span lang="DA" style="font-family:&quot;Courier New&quot;;
mso-ansi-language:DA;mso-bidi-font-style:italic">&lt;lvar&gt; = &lt;rval&gt;</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">After</span><span lang="EN-US"> assigning a slot to a slot</span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:
ZH-CN"> (rather than a value)</span><span lang="EN-US">, the left-hand slot </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">will be holding</span><span lang="EN-US"> a reference to the right-hand. For example, After executing the following commands, </span><span lang="EN-US" style="font-family:
&quot;Courier New&quot;">b[1][0]</span><span lang="EN-US"> is 1, rather than 0:</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">a = {0:0}</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">b = {}</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">b[1] = a</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">a[0] = 1</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">Slots must be assigned before it is <i style="mso-bidi-font-style:normal">read</i> or <i style="mso-bidi-font-style:
normal">subscripted</i></span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">, and integers and strings cannot be subscripted. Consider the following comammd list:</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">c = {}</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">c[0] = 3</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">c[1] = c[0]</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">d[0] = 'i'</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;;
mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">c = d</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">d = c[1]['a']</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">c[2][2] = 2</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">The first three commands are legal, but the next </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:
ZH-CN">two</span><span lang="EN-US"> are </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">both</span><span lang="EN-US"> illegal because slot </span><span lang="EN-US" style="font-family:
&quot;Courier New&quot;">d</span><span lang="EN-US"> must be assigned before it is read or subscripted. The last </span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">three are</span><span lang="EN-US"> </span><span lang="EN-US" style="mso-fareast-font-family:宋体;mso-fareast-language:ZH-CN">also </span><span lang="EN-US">illegal.</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><b><i><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">2. </span><span lang="EN-US">Length:</span></i></b><span lang="EN-US"> </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">length(&lt;slot&gt;)</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">Output the number of key-value pairs in the slot. Note that nested pairs are not counted. For example:</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">a = {0: {0:0, 1:1}}</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">length(a)</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">w</span><span lang="EN-US">ill output 1, not 3. In this command, it is gu</span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">a</span><span lang="EN-US">ranteed that </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">&lt;slot&gt;</span><span lang="EN-US"> is storing a dictionary, not a string or an integer.</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><b><i><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">3. </span><span lang="EN-US">Infinity test:</span></i></b><span lang="EN-US"> </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">test(&lt;slot&gt;)</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">If the slot can be subscripted indefinitely, output 1. Otherwise, output 0. For example, after executing the following command list:</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">d = {}</span></p>
<p class="MsoNormal"><span lang="EN-US" style="font-family:&quot;Courier New&quot;">d[0] = d</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<p class="MsoNormal"><span lang="EN-US">Then </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">d</span><span lang="EN-US"> is infinite, since </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">d[0][0][0][0][0][0]</span><span lang="EN-US">... is always </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">d</span><span lang="EN-US">. In this command, it is gu</span><span lang="EN-US" style="mso-fareast-font-family:
宋体;mso-fareast-language:ZH-CN">a</span><span lang="EN-US">ranteed that </span><span lang="EN-US" style="font-family:&quot;Courier New&quot;">&lt;slot&gt;</span><span lang="EN-US"> is storing a dictionary, not a string or an integer.</span></p>
<p style="tab-stops:468.0pt 522.0pt" class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<h3><b style="mso-bidi-font-weight:normal"><span lang="NL" style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:&quot;Times New Roman&quot;;
font-style:normal">Input</span></b></h3>
<p class="MsoNormal"><span lang="EN-US">The input contains at most 10000 lines of commands, each line will be non-empty and will contain no more than 300 characters. All the commands are legal.</span></p>
<p style="line-height:normal" class="MsoFooter"><span lang="EN-US" style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">&nbsp;</span></p>
<h3><b style="mso-bidi-font-weight:normal"><span lang="NL" style="font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:&quot;Times New Roman&quot;;
font-style:normal">Output</span></b></h3>
<p class="MsoNormal"><span lang="EN-US">Print the output (one line for each length/test command).</span></p>]]></description>
        <input><![CDATA[]]></input>
        <output><![CDATA[]]></output>
        <sample_input><![CDATA[c = {}
d = {'color': 'red', 'price': 2, 7: 'test', 100: -100}
length(d)
d[7] = {'this': 'is', 'a': 'book'}
length(d)
d[8] = {'this' : 'is', 'another' : {'a' : 'book', 'b': 'book2'} }
length(d)
c[7] = c
test(c)
test(d)
length(c)
d[0] = c
length(d)
test(d[0])
]]></sample_input>
        <sample_output><![CDATA[4
4
5
1
0
1
6
1
]]></sample_output>
        <test_input><![CDATA[a = {8: {'z': -4}, 7: {'i': {8: -5}, 0: {2: 'u'}, -5: {'w': -9}}}
b = {1: {-8: -3}, 2: {'e': 'v'}, 3: {'x': 'l'}, -4: {5: 'f'}, -6: {'n': -1}}
c = {'e': {'c': 5}, 'd': {'l': -6}, 'i': {8: {8: 'r'}, -6: {'i': 'a'}}, 8: {-1: 4}, 's': {-6: -9}, -9: {'j': -4}, -8: {'l': 'd'}}
d = {'a': {9: -8}, 'h': {-7: {4: 'p'}, 'c': {'j': 'm'}, 'o': {7: 9}}, 7: {'s': {-3: 'i'}}, -2: {'s': {'d': -5}, -9: {'s': 'a'}}, 9: {'c': {0: 5}, 'b': {-5: 'p'}}}
e = {3: {2: 'f'}, -2: {8: {-6: {'q': -9}, 't': {'u': 'z'}}, 'v': {'v': 7}}}
f = {'k': {-7: {3: 'z'}, 'e': {4: 'v'}, -3: {'g': 1}, 'g': {4: 'w'}}, -1: {'l': {1: 'u'}, 't': {'b': -7}}}
g = {3: {5: 'c'}, 'd': {2: 'o'}, 'i': {0: {'f': -9}, 7: {-8: 1}}, 8: {-1: 6}, 's': {'b': 'z'}, 't': {6: 't'}, -6: {'w': 4}, -1: {'u': 'y'}, 5: {-1: 0}}
h = {'i': {'f': -1}, 4: {'c': {'q': -2}, 'd': {'y': 's'}}, 'v': {'h': 'p'}}
i = {-8: {'z': {8: -4}, 'b': {6: 4}, 'j': {-1: 3}}, 'a': {-8: 'd'}, 4: {'f': 1}, -2: {-7: 4}}
j = {4: {'c': {3: -4}, 'r': {-2: -1}}, 5: {'v': 'c'}, 'p': {'w': -5}, 't': {'e': 1}, 'v': {'j': -3}, -1: {'s': {6: 'h'}, 'w': {'y': -8}}}
k = {-8: {'p': 'q'}, 'j': {'d': {'j': 'm'}, 7: {3: -4}}, 7: {'c': -5}}
l = {0: {-5: 1}, 2: {'d': 'e'}, 'b': {'b': -2}, 6: {-4: 8}, 'f': {'j': {1: -7}, 'g': {'u': 8}}, 'm': {-8: 'y'}, -5: {5: 'n'}}
m = {1: {2: {'m': 'x'}, 5: {'r': 'o'}}, 3: {'k': 3}, -4: {'c': -3}, -5: {'v': 'w'}, -9: {5: -7}}
n = {'c': {-6: 'y'}, 4: {4: {-7: 'v'}, -2: {'z': -7}}, 'v': {'l': 'm'}}
o = {0: {-7: -8}, 'z': {'c': {-8: 'd'}, 'f': {6: 2}}, 4: {'o': {'h': 'p'}, 'f': {'c': 5}}, -3: {'x': {-5: 'g'}, 's': {7: 'm'}}}
p = {'c': {'x': {-6: {-4: -4}, -1: {'s': 'r'}}, 4: {'k': 'l'}, 'v': {-2: 0}}, 'k': {'a': {'o': 9}, 'r': {'z': {-3: 'm'}}}, -1: {'x': {9: 'x'}, -9: {'n': -2}}}
q = {'m': {'y': {0: 'v'}, -3: {'i': {'x': 'v'}, -6: {'i': 3}}}, -1: {'w': 6}}
r = {1: {'a': {-6: 'x'}, 'z': {'s': 'a'}}, 'v': {-8: {'k': 7}, 'd': {-6: 'v'}}}
s = {3: {9: 8}, 'm': {'k': {'q': {-1: -9}, -8: {3: -1}}, 't': {-1: 'j'}}, -5: {'y': {-6: 9}, -6: {'c': 'x'}, 'z': {-7: -5}}, 'b': {'z': 1}, 'g': {'l': -3}}
t = {-5: {'i': 'w'}, 8: {1: -6}, 's': {-5: {3: 'k'}, 't': {7: 'b'}}, 't': {'b': 7}, -6: {6: 6}, 'z': {-8: -7}}
u = {0: {-5: 'x'}, 'e': {-5: 8}, 'g': {'j': {'o': -5}, 'o': {'g': 'g'}}, 8: {'h': 'k'}, 'm': {4: -1}, 'p': {'i': 'k'}}
v = {'i': {'a': {'f': 'u'}, 9: {'h': 6}, 'l': {'m': -7}, -9: {'y': 0}}, 'y': {-7: {'t': -2}, -4: {'w': 8}}, 6: {'a': {'e': 'x'}, -7: {'u': 'g'}}, -1: {-2: 'r'}}
w = {'p': {'m': -3}, 4: {7: 2}}
x = {'u': {'a': {'p': 'l'}, -4: {'w': 'u'}}, -4: {-6: {'j': -4}, 'b': {'j': 5}}, 'm': {4: 2}, 7: {-5: 2}}
y = {0: {9: {'k': -6}, 'f': {-6: -2}}, -7: {'q': {'b': {'c': 'k'}, 'o': {'b': -3}}, 'y': {'d': 'w'}, 3: {'t': -8}}, 8: {-8: 'd'}}
z = {'h': {-6: {-5: -9}, -4: {0: 'q'}}, 4: {4: {3: 'h'}, 5: {6: 'd'}, -2: {-2: 0}}, -4: {'w': 9}, -7: {'u': 'a'}}
a[8]['z'] = b[1]
k[7][-7] = y[-7][3]
test(k[-8])
length(l[0])
q[-1]['u'] = 'a'
n['c'][-8] = -3
e[3][2] = {0: {-8: {0: 3}, -1: {-1: 'm'}}, 9: {7: 5}, -5: {4: {'q': 'o'}, -3: {'m': 'g'}}}
n[4][-2] = b
length(c['d'])
length(g[-6])
test(k[7][-7])
p[-1][-9]['n'] = 'd'
b[-6] = 5
h['v']['h'] = 'g'
d['a']['o'] = {'a': {'u': 'f'}, 'h': {9: 9}, -1: {0: 'e'}, 8: {-7: 'c'}}
c['e']['c'] = 8
v[5] = f[-1]['t']
test(f['k'][-3])
test(m[1][2])
length(p[-1][-9])
e[3][2][-5][4]['l'] = n
d[7]['s'][-3] = 7
i['a'][4] = {'q': {6: 7}, 1: {9: 3}, 's': {'r': 'e'}, 'b': {6: 'f'}, 'k': {'w': 's'}}
m[1][5]['r'] = 6
p['k']['a']['o'] = w[4]
x['u']['a']['c'] = 'j'
length(i[-2])
length(p['c']['v'])
length(z['h'][-6])
c['d']['l'] = -7
test(f[-1]['l'])
v[6]['a'][5] = {'b': {'c': 3}, 'f': {'p': {-2: 'c'}, 'r': {6: -5}}}
y[0]['f'][5] = {'a': {2: {'k': 3}, 'v': {5: 'm'}}, 1: {-3: 7}, 7: {-3: 6}, 's': {8: -5}, 't': {'m': -2}, -8: {'v': -3}, 'x': {'b': 8}, -4: {4: 9}, -3: {1: 'p'}}
u['g']['j']['o'] = {-7: {-4: -8}, 's': {'v': -3}}
y[-7]['y']['d'] = {'a': {8: {'k': -9}, -7: {'o': -9}, 'm': {9: {'p': 4}, 'l': {-4: 'm'}}}, -6: {-7: {4: 'r'}, 'c': {-9: -4}, 'u': {0: 9}, 5: {'v': -1}}}
q[-1]['w'] = 6
test(x['u'][-4])
d['h'][-7]['o'] = 'r'
length(j['v'])
v['y'][-4][6] = k[7][-7]
s['b']['z'] = 5
test(g[-1])
length(x['m'])
w[4][7] = g['t']
n[4][-2][3]['x'] = 'e'
length(y[8])
p[-7] = 'e'
test(o[4]['o'])
m[-4]['p'] = 2
w[4][7][-4] = 'z'
length(u[0])
a[7][0][2] = 6
u['s'] = -9
u['p'] = 'h'
test(x[-4])
q['m'][-3][-6]['x'] = 'i'
length(l[2])
length(r)
l[6]['z'] = 'm'
s['g']['l'] = 's'
s['g']['a'] = {'b': {4: -2}, 6: {'g': 'h'}, 'f': {'o': 'a'}, 'q': {8: 'y'}, -8: {'u': 'c'}, -6: {'t': -5}, -1: {'n': 4}}
o[0] = 'k'
test(w[4][7])
l[6]['z'] = -3
u['m'][4] = w[4][7]
test(e[3][2][9])
u['e'][-5] = {'i': {'x': 'p'}, 't': {'c': -8}, 6: {-9: 'h'}}
t['z']['f'] = l['b']
length(c[-8])
g[5][3] = -9
g['i'][7][-9] = {8: {-1: 'q'}, 1: {'b': 'm'}, 2: {'k': 6}, 'j': {'q': {'s': 'g'}, 'd': {'t': -6}}}
q[-1]['v'] = {-5: {'x': 5}, 'j': {4: {-7: 6}, 'g': {-2: 'o'}}, 7: {8: 'i'}}
q[-1]['v']['j']['g'][-2] = y[8]
z[4][4][3] = 5
test(b[3])
q[-1]['v'][-5][7] = s[3]
length(k[-8])
length(v)
length(n['c'])
s['b']['z'] = 'b'
d['a']['o']['a'][-2] = {1: {'e': {9: 'w'}, 'f': {4: 3}}, 2: {'r': {-2: 9}, -9: {'j': 'y'}}, 'x': {'g': {-9: -6}, -1: {-4: 'd'}}}
g['s']['b'] = 'd'
q['m'][-3][-6]['x'] = v[6][-7]
o['z']['c'][-8] = 0
test(j['t'])
y[-7][3][5] = -9
s[3]['e'] = -2
test(i[4])
s['t'] = {8: {'u': -6}, -6: {'x': {'d': 8}, 7: {'f': -7}}}
l[0]['g'] = e[3][2][-5][-3]
s[3][9] = e[-2]['v']
test(p[-1]['x'])
i['a'][4]['s']['m'] = 'j'
f['k'][-3]['v'] = 0
w[4][7]['r'] = -7
g['i'][7][-8] = 'c'
test(p['k'])
length(r['v']['d'])
length(u['e'][-5]['i'])
d[-2][-9]['s'] = i[-2]
test(q['m']['y'])
x['m'][6] = y[-7]['q']['b']
d[9]['c'][0] = 't'
i[-2][-7] = 'a'
v[-1][-2] = {'y': {6: -2}, -5: {'r': {1: 'q'}, 4: {-2: 9}}, -4: {'g': 9}, 5: {6: 'k'}}
test(b[-4])
p[-1][-9]['n'] = c['i'][8]
d[7]['s'][-3] = a[7][0]
q['m'][-3]['i'][6] = 'a'
m[-4][-4] = {'a': {'z': 'x'}, 3: {-1: 5}, 8: {'c': 5}, 'm': {8: {'j': -1}, -6: {-4: 'l'}}, 'w': {'m': 1}, -9: {'b': 'f'}, -3: {-9: 7}}
s['m']['k']['q'][-2] = 'k'
x[7][4] = o[4]['o']
r['v'][-8][6] = p[-1]['x']
k[-8] = -5
length(z[4][4])
v['y'][-7]['x'] = 8
length(t['z']['f'])
length(b[3])
p['k']['a']['o'] = {-4: {'q': {8: {-1: 'u'}, 'q': {'i': 'w'}}, 1: {'r': 3}, 'w': {'g': 'd'}}, 'e': {'m': {'c': 7}, 6: {'z': -1}, -9: {-5: 7}}, -1: {'k': {0: 8}, 'e': {'b': {-3: 3}, 'm': {'p': 'g'}}}}
d['h'][-7][0] = 3
test(z[-4])
length(q['m'][-3]['i'])
length(e[3][2])
length(z[-4])
length(e[3][2])
length(t)
r['v'] = o[-3]['x']
d[9]['b'][-5] = 'y'
x[7][4]['h'] = p[-1]['x']
length(c[-9])
s['g']['a']['b'][4] = 'i'
test(q['m']['y'])
f['k']['e']['k'] = {3: {'q': 6}, 7: {1: -1}, 9: {'o': 'o'}, 'm': {'l': 1}, 'l': {'y': 't'}, 'o': {'f': {'r': 'j'}, 'n': {'a': 'm'}}, 'v': {-5: -5}, -8: {'l': 5}, -2: {-7: 'd'}}
z[-4]['w'] = b[1]
length(m)
length(j['p'])
test(b)
z[-7]['u'] = 'v'
length(n[4][-2][1])
length(l['f']['j'])
f['k']['g'][4] = h['v']
test(l[2])
p['c']['v'][-5] = a[8]['z']
length(p['c'][4])
o[-3]['x'][-5] = {'a': {-8: -7}, 'r': {'c': {'f': 'u'}, 'l': {6: 's'}}, 'b': {'z': 'h'}}
length(c)
u['e'][-5][6][-9] = p[-1][-9]['n']
g[-6]['p'] = 7
length(i[4])
test(z['h'][-6])
length(l[-5])
y['d'] = -9
length(m[1][2])
u['e'][-5]['i']['y'] = i
m[3]['k'] = {-8: {'i': {'i': 'e'}, 2: {1: -4}}, 'h': {-7: {-3: -7}, 5: {'u': 3}}, 'k': {3: {-8: {'v': 8}, 'o': {6: 'f'}}, 5: {'c': -9}}, 'g': {'h': {'g': 7}, -5: {'q': 7}, -3: {9: -3}}}
s['g'] = z[-7]
e[3][2] = 0
length(y[-7][3])
test(g['i'][0])
d[-2][-9]['s'][2] = s['g']
length(w[4][7])
p[-1][-9]['n'] = w[4][7]
b[-4]['h'] = 'u'
w[4][7][-4] = -9
test(c['s'])
test(f['k'][-3])
j['t']['f'] = {2: {5: -7}, 8: {'g': -4}, 'k': {-9: -3}, 'c': {'t': 'q'}, 'w': {'m': 8}, -9: {2: 'l'}, -6: {'i': 'a'}}
c['d'] = 9
r['v'][-5]['a'][-8] = {-7: {'q': 'j'}, 2: {'w': -8}, 'b': {'e': 'g'}, -1: {'u': 2}}
k['j']['d']['k'] = 'g'
b[2]['e'] = 5
u[0][-5] = k[7][-7]
test(h['i'])
test(y[-7]['y']['d'][-6]['u'])
t['t']['b'] = -3
a[8]['z'][-8] = b[1]
r['v'][-5]['b'][-6] = 's'
length(n['c'])
g[-1]['a'] = t[-6]
length(e[3])
length(z[-7])
test(g[5])
length(v['i']['l'])
z['h'][-4][0] = 8
r[1]['z']['s'] = 'a'
test(y)
h[4]['c']['q'] = {'h': {8: {'b': -4}, 9: {'l': 'l'}, 5: {'b': 'b'}}, -2: {3: 's'}, 'x': {-5: 0}}
v[-1][-2][-5][4][-2] = g[3]
length(f[-1]['l'])
e[3]['n'] = 'a'
n['c'][-8] = 'd'
d[-5] = {'a': {6: 'r'}, 'm': {'h': {1: 'e'}, 6: {-3: 1}, 7: {-7: {'v': -1}, 'c': {2: -8}}}}
c['i']['m'] = s['g']
v['y'][-7]['t'] = -1
test(e)
test(s['g'])
t[-6][-9] = q['m'][-3]['i']
j[5][8] = {'i': {-1: 'q'}, 8: {'j': 'm'}, 'c': {'d': {0: 'h'}, -9: {'h': 'i'}}, 'q': {'c': -4}, 5: {'d': -2}}
l[6][-4] = 'z'
length(w[4])
length(g[3])
test(p['c'])
test(x[-4]['b'])
k[7][-7][5] = f[-1]['l']
q['m'][-3]['i'][6] = {'x': {'s': 2}, 'b': {-1: 1}, 4: {'s': {'j': 'z'}, 'k': {-4: 'i'}}}
u['m'][4]['r'] = 6
t['z']['f']['p'] = {'x': {1: 8}, 'h': {'b': 'c'}}
length(h['v'])
length(e[3])
length(r[1])
test(c['e'])
test(o['z'])
h['v'][-5] = 8
t[-6][-9][6][4]['s']['j'] = 7
x['m'][6]['c'] = e[-2][8]['t']
h['v'][-5] = {'x': {5: {'g': 7}, 'v': {-9: 8}}, 3: {-8: {3: 2}, 'x': {'r': 's'}}}
z['h'][-4][6] = k
test(t)
o['z']['c'][-8] = 5
l[0]['g']['m'] = k[7][-7][5]
length(p[-1]['x'])
test(x['u']['a'])
a[7]['i'][8] = {'a': {-8: 2}, 'c': {'y': 'i'}, 3: {'n': 'y'}, 9: {5: -4}, 'j': {1: 'o'}, 'o': {-7: {2: 'i'}, 's': {-6: 's'}}, -8: {6: 4}, -5: {'a': {'u': 'b'}, 'm': {'a': 'u'}}}
length(n['v'])
length(h['v'][-5]['x'][5])
length(b)
o[4]['o']['h'][9] = {2: {0: {1: 'w'}, -6: {1: 5}, 4: {8: 'a'}, -2: {'l': 4}}, 6: {'q': 3}, -2: {'y': {'m': 4}, 'c': {'q': 'i'}, 3: {'l': 'm'}, 7: {'r': 8}}}
f[-1]['l'][-4] = 'i'
r[7] = 'h'
c[-9][9] = {9: {'q': {-1: 'p'}, -3: {8: 1}}, 'r': {'i': {'a': -1}, 'j': {-6: 'a'}}, 'u': {'h': 'r'}}
v[6]['a']['e'] = {'h': {'x': {-6: {-9: 7}, 'd': {'b': 5}}, 'z': {-4: 'c'}}, -1: {3: 'z'}}
length(y[8])
test(c['e'])
length(h)
d[9] = i['a'][4]['q']
length(p['c'][4])
o[-3]['x'][-5]['b'] = {-8: {-8: {6: 'k'}, -5: {'p': {'g': 'v'}, 3: {'y': 7}}, 6: {'a': 9}}, 't': {'a': {'n': 'p'}, 'g': {-3: -3}}, 7: {'q': {0: -8}, 'n': {'i': {'q': 2}, 'e': {'v': 'k'}}}}
d[-2][-9]['s'][2]['u'] = t
q[-8] = a[8]['z'][-8][-8]
length(m[3]['k']['h'])
length(c[-8])
f['k']['e'][4] = -2
s[3][9]['z'] = -6
length(x[7][4]['h'][9][2][-6])
v[6]['a']['e'][-1] = 'v'
test(u)
c['s'][-5] = k['j'][7]
f[-1]['l'][-4] = k['j'][7]
f[-1]['t']['b'] = 5
test(x['m'][6]['c'])
test(z)
test(w['p'])
test(b[-4])
z[-7]['u'][-6][-9][6]['b'][-8] = 'p'
w['p']['m'] = -6
k['j']['d']['i'] = 'o'
a[8]['z'][-8] = 'y'
test(w['p'])
length(t[-6][-9])
test(r['v'][-5])
l['b']['p']['h']['b'] = {1: {'w': 4}, 'u': {'f': 'h'}}
length(w[4][7])
length(z[-7]['u']['s'][-5])
test(i[-8]['b'])
w[4][7][8] = 9
b[-4][5] = 8
z['h'][-6][-8] = 1
q[-8][-2] = -4
e[3]['x'] = -5
m[3][0] = p[-1]['x'][9][-2][7]
k['j'][7]['b'] = {'x': {'o': -9}, -5: {'d': -3}}
l[-5][5] = 'v'
test(e[3])
z['h'][-4][6][7][-7][5][-4]['b']['x'][2] = p['k']['a']
x['u'] = u[0][-5][5][-4]['b']['x'][2]
z['h'][-4][6]['j']['d'][-3] = 'd'
test(o['z']['f'])
length(r['v'][-5]['b']['t']['a'])
i[4]['g'] = {'q': {'i': 2}, 3: {'h': 0}}
test(x[-4]['b'])
e[-2]['v']['v'] = {9: {'g': -1}, -2: {'p': -3}, -1: {8: {0: 'v'}, 'n': {4: -9}}}
length(j[-1]['s'])
p[-1]['x'][9][2][4][8] = -8
test(t['s']['t'])
x['u'] = -4
l[6][-4] = {-5: {0: {'s': 8}, 9: {'v': 2}, -2: {'m': 8}}, -3: {9: -2}}
o[-3]['x'][-5]['b']['t']['a']['n'] = 4
length(q['m']['y'])
test(w[4][7])
m[-9][5] = -6
c['e'][-9] = i[-2][2]['u']['z']['f']['p']['x']
n['v']['l'] = f['k']['g'][4][-5]['x']['v']
test(o[-3]['x'][-5]['r']['l'])
length(p['k']['r']['z'])
r[1]['z'][1] = f['k'][-3]
length(x['m'][6]['c'])
o[-3]['s'][7] = 3
test(l['m'])
test(l[6][-4][-3])
test(y[8])
o[-3]['x'][-5]['b']['t']['a']['n'] = 'q'
test(v['i'][9])
q[-1]['v'][-5][7][9]['v'][-2]['f'] = {'p': {'i': {-4: 'a'}, -9: {-4: 'p'}}, -5: {0: 6}, -3: {-7: {-4: 'd'}, -4: {-8: {'l': 9}, 7: {-5: 3}}}}
length(u['e'][-5][6][-9])
length(k[7][-7][5][-4]['b']['x'][2]['o'][-1]['e']['m'])
v[-1][-2][-5]['r']['x'] = b
l['b']['p']['x'] = 8
length(d[-5]['m'][7][-7])
c['i'][8]['i'] = s[-5]['z']
u[0][-5][5][-4]['b'][-5]['d'] = {-8: {-2: {'t': 'c'}, -9: {'l': 'o'}}, 'd': {'a': {0: 'r'}, -7: {'q': 1}}, 6: {9: 9}, 'v': {'o': -5}}
i[-2][2]['u']['r'] = 'd'
length(r[1]['z'][1])
x[-4]['b'][8] = {1: {1: 'o'}, 8: {'k': 'd'}, 9: {'s': 's'}, 'm': {'t': 'q'}, 'q': {-8: 'b'}, 'w': {8: 0}}
test(s['t'][-6][7])
length(w[4])
f[-1]['l'][-4]['b'] = {'q': {3: -9}, 'j': {6: 'r'}, -3: {'r': 'b'}}
test(e[-2][8]['t'])
r[1]['z'][1][4] = 'd'
length(a[7])
f['k'][-7][0] = 0
d['a']['o']['h'][9] = 'm'
j[-1]['s'][6] = 6
f['o'] = -1
v[-4] = c[8]
r[1]['z'][1]['c'] = {'b': {2: 7}, 'd': {3: 'a'}, 6: {'j': 'b'}, 7: {'l': 'j'}, 'o': {-7: 'b'}, 's': {'g': 3}, 'z': {-2: 6}, -3: {-2: 1}, -1: {'g': {-5: -1}, 'f': {'i': -7}}}
length(u[0][-5][5][-4]['b']['q'])
test(h['v'][-5]['x'][5])
r[1]['a'][-6] = {'p': {'g': 1}, 'u': {'b': 'h'}, 'o': {'l': 'r'}}
c['s'] = p[-1]['x']
r['v'][-5]['r']['l'][6] = 6
length(p[-1][-9]['n'])
length(g[8])
z[-7]['u'][8][1] = u[8]
test(p['c'][4])
length(s)
j[5][8][8]['j'] = 's'
j[5][8][5]['p'] = 'r'
o['z']['f'][6] = {'h': {'y': {6: {'t': 1}, -1: {'w': -2}}, -1: {5: 1}}, 9: {'c': {'r': -1}, -4: {'c': 2}}}
length(n['c'])
l[6][-4][-3][9] = -2
i['a'][4]['b'] = 'v'
n['c']['k'] = 'g'
t['s']['t'][7] = {'a': {'o': -4}, 'v': {2: -9}, 'n': {-8: 'g'}}
length(y[0][9])
length(v[5])
test(y[0][9])
test(g[-1]['a'][-9][6])
o['z']['f'][6][9][-4][-2] = {1: {8: 't'}, 6: {'b': 3}, 'g': {-6: -6}, 9: {-8: {4: 'x'}, -4: {1: 'n'}}, 'v': {'l': 4}, -7: {'b': {-1: 0}, 'm': {2: 's'}}}
y[8][1] = -8
length(g[-1]['a'][-9][6]['x'])
k[7][-7][5][-4]['b'][-3]['r'] = -4
length(e[-2][8][-6])
s['b']['z'] = 'z'
c[8][-1] = 'a'
test(y[8])
l['s'] = {'a': {-5: {-3: -5}, -1: {5: 4}}, 'f': {'i': 2}, -1: {-7: {'x': 'b'}, 'k': {-1: 'q'}}, 'g': {-5: {'p': 5}, -9: {'t': -6}}, 'v': {9: {-6: 'p'}, 'p': {'k': 'b'}}}
test(r['v'][-5]['r']['l'])
r[1]['f'] = {'z': {'h': {6: 0}, 'j': {-4: 'm'}}, -5: {5: 4}, 'e': {'f': 'n'}, 'l': {'z': 'j'}, 'o': {'h': -5}}
f['k'][-3]['c'][7]['l'] = -6
k[7][-7][5][-4]['b'][-3][-3] = 3
z[-7]['u'][-6][-9][6]['b'][-1] = 9
m[3]['k']['g'][-5]['q'] = 'x'
l[-5][-4] = {'k': {-4: 'd'}, 'r': {'f': 'j'}}
o['z']['f'][6][9]['c']['r'] = -3
c['j'] = p['c']['x'][-6]
d[7]['s'][-3][3] = 8
test(s['t'][8])
n[4][4][3] = 'a'
r['v'][-5]['b'][-8][6] = -9
a[8] = i[-2][2]['u']['t']
q['m']['y']['u'] = s['b']
k[7][-7][5][-4]['b']['j'][6] = -9
length(r['v'][-5]['r']['l'])
p['k']['r']['z']['y'] = p[-1]['x'][9][-2]['c']
l[0]['g']['m'][-4]['b'][-3][-3] = g[-6]
o['z']['c']['e'] = 9
w[4][7]['r'] = 7
d[-5]['a']['l'] = {-7: {'s': {'k': {'g': 'g'}, 'g': {7: 6}}, 'm': {-4: 3}, -3: {'b': -4}, 'f': {'j': 'b'}}, 'w': {'i': {1: {'q': -1}, 3: {-2: 9}}, -3: {'g': -3}, 'v': {'d': 'd'}}}
length(e[-2])
s[-5][-6]['c'] = 'n'
length(k['j']['d'])
m[-9] = d['a']['o'][8]
x[-4]['b'][8][1]['r'] = p[-1][-9]['n']
w['p']['h'] = {-7: {'h': {-7: -2}, 'f': {'i': 'e'}}, 4: {'v': 'f'}, 'l': {-9: 8}, 'd': {-2: 'h'}}
q[-1]['v'][-5][7][9] = u['g']['o']
m[1][-3] = -2
v[5]['b'] = a[7]['i'][8][3]
i[-2][2]['u']['t']['b'] = k[7][-7][5]
length(v['i'][9])
j[5][8]['c'][-9][4] = -1
e[3]['v'] = {4: {'i': {'k': 'a'}, 'e': {'t': 'v'}}, 3: {3: {3: 'v'}, 'f': {9: 8}}, -4: {'l': 'l'}}
test(j['v'])
length(s[3][9])
test(d)
d[7]['s'][-3][3] = 'h'
y[8][3] = 'i'
x[7][4]['h']['u'] = {3: {1: -4}, 9: {4: 6}, 't': {-7: 'l'}, 'w': {-2: 'k'}, -8: {'w': 'x'}, -7: {'n': 'a'}, -5: {-3: 9}, -3: {2: 'e'}}
b[1][9] = 5
b[1] = {8: {'h': 'r'}, -7: {1: 4}, -6: {3: 7}, 2: {8: -3}, 6: {-7: 'q'}}
test(q['m'][-3]['i'][6]['x'])
test(e[-2][8]['t'])
length(l)
u['e']['z'] = -4
test(x[7][4]['h']['u'][-7])
n['y'] = -3
length(y[-7]['q']['b']['c'])
o[-3]['s'][-7] = -1
c['e'][-9]['t'] = -5
w['p']['h'][4]['v'] = {'a': {5: 5}, 3: {-7: -7}, 'k': {'b': 'r'}, 'q': {-5: 'b'}, 'b': {4: {'o': 2}, 6: {'b': 6}}, -7: {'h': 'o'}, -6: {9: {'m': -6}}}
length(i['a'][4][1])
d['a']['o']['h'][4] = 'e'
g[8][-1] = p['c']['x'][-6]
test(t[8])
length(g['d'])
length(s['t'][-6])
p[-3] = 'r'
g[8][-1] = 'd'
k[7]['c'] = 'r'
test(q[-1]['v']['j']['g'])
length(r['v'][-5]['r']['l'])
h['v'][-5] = t[-5]
o[4]['o']['h'][9][-2]['y'][8] = {'p': {'c': 6}, 'c': {'l': 'h'}, 'o': {'m': -1}, 1: {'v': -7}}
w['p']['h'][-7]['f'][2] = r
test(q[-8])
n['c'][-8] = t['t']['b'][-4]['b'][-3][-3]
length(i['a'][4]['s'])
x[7][4][3] = r[1]['a'][-6]['o']
length(t['z']['f']['p']['h']['b'][1])
p['k']['a']['o']['e'][6][3] = {'c': {1: {'q': 'i'}, 'z': {-7: 'q'}}, -1: {'l': {'m': 'e'}, 't': {-8: 8}}, 'f': {'c': 5}}
j[0] = 0
a[8]['b'][-4]['b']['q']['n'] = -6
x[-8] = -3
u['g']['o']['e'] = g
e[3]['v'][-4]['r'] = 6
k['j']['d'][-3] = 'y'
length(t['z']['f']['p']['h']['b']['u'])
j['v']['r'] = 7
i[4]['g']['q']['a'] = 5
y[0]['f'][5]['s'][8] = p[-1]
j['t']['f']['c']['n'] = -7
test(q[-8])
x[-4]['b'][8]['m']['q'] = -7
length(j['p'])
c[-9][9]['r']['i'][3] = 'n'
b['b'] = 'j'
s['m']['k']['q'][-1] = l[0]['g']['m'][-4]['b'][-3][-3]
test(w[4][7])
m[1][5]['x'] = {-8: {9: {'v': -3}, 5: {7: 3}}, 'l': {-5: 'k'}, 6: {'p': -1}}
g[-6]['b'] = w[4][7]
k[7][-7]['t'] = -7
p[-1][-9] = 'r'
s['b']['w'] = -3
h[-8] = w[4][7]
test(w['p']['h']['d'])
u[0][-5][5][-4]['b'][-3][-3]['b']['r'] = a[8]['b'][-4]['b']['j']
test(z[4][5])
z[-4]['w']['c'] = i[4]['g']
t[-6][-9][6]['b'][-8] = 1
g['n'] = {8: {-6: {'u': 'j'}, 6: {'g': 3}}, 'x': {4: {'g': 9}, -9: {'v': 'd'}}, -3: {3: {'k': -4}, 'z': {0: 4}}, 'a': {3: 'l'}, 'y': {0: {'o': -7}, 'm': {7: 'f'}}}
o[-3]['s'][7] = 'h'
t[-5]['b'] = m[-9]
test(z[4][-2])
m[-4][-4][-9]['b'] = z[-4]['w']['c'][3]
v[5]['b']['w'] = -4
test(s['t'][8])
length(c)
test(x[7][4]['h'][9][2][-2])
length(l['m'])
length(t[-5]['b'])
e[-2]['v']['v'][9]['g'] = y[8]
d[-2][-9]['s'][2]['u'][8][1]['h'] = 'p'
b[2]['e'] = 'b'
v[-1][-2][-4]['g'] = 1
length(m[-5])
length(g['s'])
length(n['v']['l'])
m[3]['k']['k'][3]['o'][6] = {-8: {'i': 'k'}, 'g': {-4: 'q'}}
d['h'][-7]['z'] = 2
b[-4]['h'] = 'h'
i[-2][2]['u']['s'] = v[-4]
length(q['m']['y']['u'])
h[4]['c']['q']['x'][5] = {'b': {7: -1}, 'e': {'b': 'b'}, 'g': {'q': 'z'}, 9: {'e': 'c'}, 'n': {'w': -3}, 'p': {'m': {'u': 'y'}, 'w': {5: 'j'}}, 'r': {'i': -2}, 'w': {-7: 3}}
q[-8]['c']['q'][-6] = 'b'
a[7]['o'] = o
o[-3]['x'][-5]['r']['c']['f'] = 'n'
n[4][-2][-4] = 'c'
test(r['v'][-5]['a'][-8][2])
test(k[7][-7][5][-4]['b']['q'])
length(q[-8]['c']['q'])
h['v'] = -1
length(q[-8]['c']['q'])
h[-8]['r'][6] = 'a'
f['k']['e']['k']['o']['f']['r'] = -4
length(r['v'])
m[1][5]['x']['l'][-5] = 'u'
r['v'][-5]['a'][-8]['b']['j'] = {-8: {'p': 8}, 'h': {'q': {'s': 0}, 'n': {6: 1}}, 'g': {-3: 'z'}}
n[4][4][3] = z[-4]['w']
w['s'] = {'b': {'s': {'i': -2}, 'r': {7: 'q'}}, 'g': {-2: 9}, 'u': {-7: 'z'}, 'v': {'k': 't'}, 'x': {'z': 'v'}, -3: {'c': 'n'}}
r[7] = x['m'][6]['c']
length(l['f']['j'])
test(v)
length(r[1])
test(z['h'][-4][6]['j']['d'])
l[-5][-4]['r']['f'] = {9: {7: 9}, -6: {'t': 'g'}, 'b': {'e': -2}, 'e': {'g': 'p'}, 7: {9: {9: 'f'}, 'r': {3: 7}}}
test(g['t']['r'])
v[-1][-2]['y'][6] = {'i': {'a': {'g': 2}, 4: {'a': 7}, -1: {'m': -7}}, 's': {'k': {'v': -1}, 'l': {'f': 4}}}
length(g['t']['r'])
test(l['b']['p']['h']['b']['u'])
b[1][-6][3] = 'x'
c['e'][-9][6] = -6
test(c['i'][8]['i'])
t[-6][-2] = {'q': {'z': {'r': 'o'}, 7: {-5: 'z'}}, 1: {'a': {7: 7}, 'z': {-1: -4}}, 2: {3: {-1: 3}, -9: {'v': -5}}, 4: {'s': {5: 'l'}, 'd': {'z': 2}}, 5: {'q': {-1: -4}, -3: {-3: 'b'}}}
l['s']['a'][-5][-3] = 'h'
v['i']['j'] = -3
length(c['j'])
length(a[8]['b'][-4]['b']['j'])
n['c'][-8]['b'][6] = -3
length(s['b'])
test(m[-4][-4]['a'])
length(q[-8])
length(s[3][9]['e'][5])
length(e[3]['v'][-4])
c[-9][9]['u']['h'] = c[-9][9]['r']['j']
z[-7]['u']['z']['f']['p']['h']['b'][1][2] = u['g']['j']
length(d[9])
test(z[-7]['u']['t']['b'][-4])
r[7][-6] = 'z'
test(i[-8]['z'])
a[8] = 'c'
p[-1]['x']['u'][-7][4] = 'e'
t[8][1][1] = a
length(t['s'])
v[-2] = 'b'
test(j['p'])
k[7][-7][5][-4]['b']['q'][3] = 'z'
length(q['m'])
length(u['g']['o']['e']['i'])
v[6]['a']['e']['h']['v'] = {'p': {-9: -5}, 3: {'i': {'e': 'h'}, -7: {2: 'g'}, 2: {-7: 'x'}, 'n': {'q': 'x'}}, 4: {'r': {-2: 4}, 'z': {'z': 'e'}, -5: {'e': {'e': 'b'}, 'd': {'t': 7}}}, -3: {-2: 2}}
length(w)
length(q[-8]['c'][3])
length(a[7][-5])
length(n[4][-2][1])
g['n']['a'][3] = 7
f['k']['g'][4][-5]['b'][-7] = z[-7]['u']['s']
length(f[-1]['t']['b'])
test(i['a'][4])
test(y[8])
length(l['m'])
length(d[7]['s'][-3])
test(p['k']['a']['o'][-4]['q']['q'])
z[4][-2][4] = f['k'][-3]['c'][-3]
s['m'][8] = c[-9][9]
i[4]['g']['q']['n'] = -4
v['i'][9]['r'] = 8
w['s']['v']['k'] = 'p'
test(k['j'][7])
d[-5]['m']['h'][1] = 'm'
test(s['b'])
d['z'] = {-7: {6: 'z'}, 'd': {-2: 2}}
length(f)
a[7][-5]['w'] = x['m']
q[-8]['c'][3][-9] = 'q'
t['s'][-1] = 6
o[4]['o'][3]['d'] = t['s']
test(a)
a[7][-5]['w'][6]['c']['u'] = {'h': {'z': {'a': 'u'}, 6: {0: -3}}, -1: {0: {-2: 'c'}, -6: {-5: 1}}, 'v': {'q': {'p': -8}, -8: {'q': 6}, 4: {'u': 'j'}}}
length(p['c']['x'][-6])
y[8][-1] = 2
k[7][-7] = {'k': {-5: 'k'}, 5: {-8: {5: -4}, 'c': {'z': 5}}}
c['e'][-9][1] = c
p['c'][4][-9] = 6
n[4][-2][3][-2] = {1: {'i': 'r'}, -6: {3: 'c'}, 7: {-4: 5}, 'n': {'k': 'v'}}
o[4]['f']['c'] = -9
w['s']['g']['v'] = 6
v[6]['a']['e']['h']['z']['q'] = 'b'
test(j['v'])
o['z'] = 7
w['p']['h']['d'][-2] = l['m']
test(e[3]['v'][3][3])
d[7]['s'] = 'm'
e[3]['v'][3][3][3] = {-5: {-9: 5}, -4: {3: 8}, 5: {-5: {'m': 'x'}, -2: {'g': -6}}}
length(w[4][7]['r'])
length(n[4][-2][2])
v['i']['l']['m'] = {'r': {'y': {-8: {1: 3}, 1: {9: 'x'}}, 6: {-6: -4}}, 4: {'i': {'r': 'e'}, 'f': {-6: -4}, -2: {-8: -1}, -9: {9: 'x'}}}
u[8]['h'] = -1
x[-4][-6]['j'] = 6
length(n['c'][-8]['b']['r'])
length(o[4]['o']['h']['u'])
v[-1][-2]['y'][6] = u[0][-5][5][-4]['b'][-3][-3]['b']['r']
t['z']['f']['p']['h']['b'][1][2]['o']['s']['v'] = 'y'
v[-4][-1] = {0: {'e': 'l'}, 'a': {'p': 'q'}, 3: {4: 'd'}, 'i': {3: 'c'}, 9: {'n': 'y'}, 'v': {'m': -1}, 'x': {'j': -1}, -5: {'l': 2}, -3: {'a': -4}}
test(g['t']['r'])
length(u['m'][4]['r'])
length(g['n']['x'][4])
test(x['m'][6]['c']['u']['h'])
q['m']['y']['u'] = o[4]['o'][3]['d'][-1][-3]
length(g[8])
length(v['i'])
e[3]['v'][0] = a[7][-5]['w'][6]['c']['u']['v']['q']
y[-7]['q']['b']['c']['u']['h'][6][0] = -1
test(f['k'][-7])
d['z'][-7][5] = {-8: {'e': {-8: 'j'}}, 's': {-5: {2: 2}, 4: {1: 'x'}}, 'u': {'s': {'f': 'n'}, 'l': {-8: 'j'}, 't': {'i': 'f'}}}
d[-5]['a'][-6] = e[-2][8][-6]
y[8][1] = {'h': {'a': {'r': -2}, 4: {'m': 'e'}, -2: {-7: 5}}, 6: {9: {4: 5}, 's': {8: 'n'}}}
m[1][2]['r'] = z[4][-2][4]
length(l['m'])
length(v[6]['a']['e']['h']['z'])
b[1][2][8] = {'j': {'c': {-6: 7}, 'u': {0: 8}}, -4: {9: {-2: 'v'}, 'w': {-3: 'm'}, 7: {-7: 1}}, 6: {1: {'t': 3}, 2: {'p': 't'}}, -2: {4: 'k'}}
j['t']['f'] = p['c']['x'][-1]
length(w[4][7]['r'])
p[-1]['x']['u'][-7] = 9
test(r[1]['z'][1]['c']['d'])
n['c']['k'] = 7
test(h[-8]['r'])
d[9][8] = 4
m[-9] = {'c': {-7: -2}, -2: {'w': 'r'}}
p[-1]['x'][9][6]['q'] = {'m': {8: -4}, 'o': {-5: 'j'}}
length(o[4]['o'][3]['d'][-1]['v'])
v[5]['b']['n'] = -2
length(f['k'][-7])
i['a'][4]['s']['m'] = 3
length(i['a'])
q[-8] = {0: {-2: 8}, -3: {-7: 8}, 'o': {'u': 'o'}}
length(h[4]['d'])
b[1][8][5] = 'c'
e[3]['v'][-4][-9] = e[3]['v'][0]
l[-5][-4]['r']['f'][7]['r']['i'] = 'j'
test(p['k']['r']['z'])
length(y[-7][3][5][-4]['b']['q'])
length(n[4][4][3])
length(f['k'][-7])
test(d['z'])
d['z']['d'][-2] = 'g'
r[7]['u']['v'][-8]['o'] = {8: {'t': -2}, -4: {'g': 'f'}, -3: {'y': 'p'}, 'o': {'i': {'k': 'f'}, 'n': {'e': -6}}}
q[-8][0][-2] = {0: {'h': 'b'}, 'i': {'a': -2}, 'k': {'q': -2}, 8: {'f': 'l'}, 't': {'x': 'v'}, 'v': {1: {'r': 1}, 'v': {'k': 'l'}}, 'y': {0: 3}, -2: {1: 'j'}}
length(x)
length(i['a'][4]['s'])
r[1]['z'][1]['c'][-3][-2] = {3: {6: {'o': 'y'}, 7: {'i': {3: 'k'}, 'o': {'k': 2}}}, 'z': {9: -2}}
z[-4]['w'][-2] = {6: {8: {-5: 'r'}, 'w': {'m': 's'}}, 'g': {'c': {-4: 'k'}, 'n': {'v': 0}}, 'j': {-8: -7}, 'w': {'s': -9}, 'y': {'d': -1}, -6: {'w': 1}, -1: {'e': 'n'}}
length(z[4][4])
u['s'] = 'm'
d[-5] = 'l'
p[-1]['x']['u'][9][4] = 'z'
v[-1][-2][-4]['g'] = -5
v['i'][9][7] = x[7][4]['h']
test(r[7]['u']['h']['z'])
f[-1]['l'][-4]['b'][-3][-3]['b']['r'][6] = 'k'
length(o[-3]['s'])
test(f['k'])
length(z[-4]['w'][-2][6][8])
a[7]['o'][4]['o']['h'][-9] = u[8][1][7]
length(e[3]['v'][0])
length(e[-2][8]['t']['u'][-1][0])
s['t'][8]['u'] = m[3]['k']['k'][5]
length(d[9])
i['a'][4]['k']['n'] = w[4][7]['r']
z['h'][-6][-6] = 'c'
length(b[3][-2][7])
z[-4]['w'][-2]['g']['c'][-9] = 'i'
length(z[-4])
o[-3]['s'][-7] = h['i']
c['i'][-6]['i'] = -6
a[7]['o'][4]['o']['h']['u'][-3][9] = i[-2]
length(o[-3]['s'][-7])
t['t']['b'][-4]['b'][-9] = 'h'
h['i'][-5] = -9
i[4]['f'] = k['j'][7]['b']['q']
z['h'][-6]['i'] = 'w'
r[1]['a'][-6]['o']['d'][-1]['a']['n'] = 'x'
length(c[8][-1][9])
j[4]['r']['v'] = {'p': {-4: 9}, 'm': {'u': -6}, 'f': {'d': 'l'}}
length(t)
length(s[3][9]['e']['d'])
length(e[-2]['v']['v'][-1])
length(p[-1]['x'][9][6]['q']['o'])
length(r[7]['u']['v'][-8]['o'][-3])
v[5]['b']['t'] = n[4][-2][2]
test(i[4]['g'])
l['b']['p']['h']['b']['u']['f'] = {'x': {'k': {-1: {3: -9}, 'n': {4: -9}}, 's': {2: -7}}, 4: {9: {3: 'p'}, -4: {'l': -5}}}
b[3][-2][7][3] = 'y'
w['s']['u']['w'] = -7
length(d)
l['b']['p']['x'] = {8: {0: {'o': -4}, 'u': {-4: 7}}, -4: {9: 4}}
r[1]['f'][-5][7] = -7
f['k']['e']['k'][-2][3] = b
u['b'] = 'w'
r[7]['u'][-1][0][-2] = {'u': {'q': 'q'}, 'j': {'i': 'a'}, 4: {-8: 's'}}
h['i']['f'] = {8: {'i': {-1: 'q'}, 'e': {'i': 9}, -5: {-2: 'd'}, -4: {-4: 'h'}, -3: {0: 'h'}}, 'j': {-2: {'u': 9}, 'n': {6: 'u'}}, 't': {'c': {'t': 'f'}, 'l': {2: 'd'}}}
w['p']['h'][-7] = -5
r[7]['u'][-1][0] = z[-4]['w'][-2][-1]
v['i'][9][7][-9][7] = 'q'
d['a']['o'][-1][0] = 2
k['j']['d']['s'] = {1: {2: 7}, -6: {-1: 4}}
j['t']['f']['s'] = {-8: {-2: 'g'}, -1: {1: -5}, 'o': {-8: 'p'}}
length(n[4][4][3][-2][-6])
g['d'][2] = 'r'
test(b)
v['y'][-7]['m'] = 8
length(h)
o[-3]['s'][-7] = -5
test(k[7][-7][5][-8])
n[4][4][-1] = i[-2][2]
s['b']['u'] = g['s']
test(f[-1]['t']['b']['t'])
test(w[4][7]['r'])
f['k']['e']['k'][7]['d'] = -3
test(c)
h[4]['c']['q']['h'][9][-2] = 'q'
m[1][2]['r'][-2][3][6][3] = -6
n[4][-2][2]['e'] = b[1][-7]
s[-5]['y']['i'] = 'y'
j['p'][-4] = q[-1]['v'][-5][7][9]
test(x['m'])
test(f)
length(k['j'][7]['b']['j'])
k['j'] = {'q': {'a': 'e'}, 8: {'e': {8: {6: -5}, 2: {'s': 1}, 'l': {'m': 'j'}, 'f': {'r': -1}}, -9: {'a': -3}}}
g['d'][2] = v[-1]
length(p['c']['v'][-5]['c'][3])
e[-2]['v']['v'][-2] = {'s': {2: {3: {0: {'i': 'c'}, 't': {9: -6}}, 'n': {-9: 7}}, 'j': {'k': 8}}, 'u': {'x': 5}, 'l': {-7: {'o': 'l'}, -6: {'x': -8}, 'x': {7: -4}}}
w[4][7]['r'][-3] = 'w'
q[-1]['v'][7]['r'] = 5
y[8][1]['h'][4]['z'] = {9: {'s': 'w'}, -5: {'k': -7}, -3: {'g': 'p'}}
k['j'][8]['e'][2]['x'] = 'v'
length(u[8][1][7]['o'][-3]['x'][-5]['b']['t']['a'])
b[3][-2][7][3] = i[-2][2]['u'][-5]['b'][-7][-1][3]
g[5][3] = -1
length(m)
test(z[-7]['u'][8][1][1][7][-5]['w'][6]['c']['u']['h']['z'])
test(a[7]['o'][4]['f'])
length(i)
t['s'][-1]['v']['m'] = 'r'
length(o[-3]['x'][-5]['b']['t'])
j[-1]['w']['r'] = t[8][1][1][7]
test(o[4]['f'])
a[7][-5]['w'][6]['c']['u']['h']['z']['k'] = q[-1]['v']['j'][4]
a[7]['i'][8][-8]['b'] = 1
m[-5]['v'] = c
test(s['m'])
e[3]['v'][-4][-9]['p'] = {0: {'c': 'k'}, 'e': {-9: 'm'}, 'j': {'u': 4}, 'q': {-2: 'o'}, 'y': {6: -3}, 'z': {'c': 'y'}}
length(h[-8]['r'])
length(b[1][-7])
f['k']['g'][4][-5]['i'] = p['k']['a']['o'][-1]['e']['b']
length(z[4][-2][4][-2][3][7]['i'])
m[-4]['h'] = -2
test(e)
r[1]['z'][1]['c']['o'][-7] = o[-3]['x'][-5]['b']['t']['g']
z[4] = s['b']
test(p['c']['x'][-1]['s']['o'])
q[-8]['o']['u'] = {8: {'c': 'g'}, -1: {-3: 'o'}}
g[-1]['a'][-9][6]['x']['z'] = 6
r['v'][-5]['a'][-8][2]['w'] = 'k'
length(b[1])
n['c'][-8]['b']['r'][6] = 6
k[7][-7]['k'][-6] = 'i'
y[8][1][6][9]['m'] = {'i': {'p': {'f': 't'}, -3: {1: 'd'}}, 'k': {-2: -6}}
a[7]['i'][8][3]['t']['e']['h'] = 2
test(f[-1]['t']['b']['t']['e'])
y[-7][3][5][7] = a[7][-5]['w'][6]['c']['u']['v'][-8]
a[7][0]['b'] = -8
test(t[8][1][1][7]['i'][8]['j'])
test(j[4]['r']['v']['p'])
test(i[-2][2])
test(b[1][-7])
e[-2][8][-6]['q'] = 'z'
test(a[7][0])
b[1][-6][3] = {'i': {'b': 7}, -7: {0: {-4: 'j'}, 'b': {'m': 0}}, 's': {2: {'c': {2: 'j'}, 7: {0: 'h'}}, 'e': {-7: {'n': 'u'}, -4: {'o': -3}}}, 'k': {'u': 'b'}}
length(i[4]['f'])
test(f['k'][-3]['c']['b'])
length(q['m'][-3][-6])
test(x['m'][6]['c'])
i[-2][2]['u']['z']['f']['p']['h']['b']['u']['f']['x']['k']['n'][4] = -7
test(u[0][-5][5])
test(f['k'])
s['g']['u']['t']['b'][-4]['b'][-3][-3]['b']['r'][8] = l[6][-4][-5][9]
length(h['i']['f'][8][-3])
z[-4]['w']['c']['q']['z'] = 2
x[-4]['b'] = {8: {-8: 'i'}, 'x': {8: {-1: 6}, -9: {'z': 'l'}}, 'k': {-6: {5: -5}, 3: {2: 'n'}}, 'h': {8: {'b': 4}, 't': {'y': 0}, -9: {-2: 1}}}
test(s['t'][-6]['x'])
m[-5]['v'][-9][7] = z[4]['u']
length(q['m']['y']['u'])
length(s['m']['t'])
length(l[2])
x[-4][-6] = l['f']['j']
length(j[-1]['w']['r'][-5]['w'][6]['c']['u']['h'][6])
r[1]['f']['l']['q'] = 'p'
length(o[-3])
r['v'][-5]['r']['l'][-8] = 8
e[-2]['v']['v'] = d[7]
test(u['e'][-5][6][-9]['i'])
i['a'][4][1] = y[-7]['y']['d'][-6][-7]
g['a'] = 'o'
length(e[3]['v'][3]['f'])
u['g']['o']['e'][-1]['a'][-2][5][-3][-3] = 2
test(e[-2][8])
length(v[6][-7])
length(a[7]['i'][8]['j'])
p[-1] = 'a'
m[-5]['v']['i'][8] = 'a'
r['v'][-5]['a'][-8][-1]['e'] = n[4][-2][3]
b[2]['e']['h'] = 8
z[4]['u'][3] = 8
length(n)
k['j']['q']['t'] = 'v'
i[-8]['b'][-2] = y[0][9]
k['j'][8][-9][0] = 'x'
test(q)
test(s['g']['u'][-6])
b[2]['e']['u'] = r['v'][-5]['r']['l']
length(w)
f[-1]['l'][-4]['b'][-3][-3]['b']['r'][8]['v'] = {6: {2: 8}, -2: {'s': 'x'}}
p[-1] = o[4]['o']
test(g['i'][0])
test(i[4])
test(j['t'])
u[8][1][7][0]['o'] = {7: {3: 'r'}, 'f': {'d': 'h'}}
test(z[-4]['w'][-2]['g']['n'])
j[4]['r']['v']['m'][6] = {-8: {3: -2}, 4: {4: 1}, 5: {0: 'd'}, -9: {9: 4}}
e[-2]['v']['v']['q'] = k[7][-7]['k']
q[-8][0][-2]['i']['a'] = o
j[5][8]['q']['c'] = {'r': {-8: {8: 'c'}, 'j': {'i': -4}, -3: {9: -1}}, 5: {'k': {'y': {'p': {'i': 'n'}, 'm': {-6: 'm'}}, 5: {'c': 1}}, 'e': {'z': -7}}, 'w': {8: {9: -7}, 'n': {-3: -8}}}
length(o[4]['o'][3])
test(z[-4]['w'][-2])
o[-3]['x'][-5]['b'][7]['q'][-2] = {-4: {-7: 8}, 7: {'t': 7}}
length(g[-1]['a'][-2]['q'][7])
length(a[7][-5]['w'][6]['c'])
a[7]['i']['k'] = {-8: {'q': 4}, -7: {'l': 'p'}}
length(b[1])
test(p['k']['r']['z']['y'])
l['m'][-8] = 'k'
o[-3]['s'][7] = 'x'
test(j['t']['f']['s'][-8])
length(n[4][-2][1][8])
g[-6]['b']['r'][8]['v'][-2]['o'] = 'r'
length(s['t'][-6]['x'])
k[7][-7][5][-8][-9] = 6
p[-1]['h']['u']['w'][7] = 'h'
u['e'][-5]['t'][5] = x['m'][6]['c']['u']['v'][-8]['o'][-3]
t['s'][-1]['i'][3] = j
length(j['p'][-4]['e']['i'][0])
e[-2][8][-6][-7] = {6: {9: 4}, 9: {-6: 3}, 'j': {'g': 'r'}, 'o': {-5: 'c'}, 'r': {-2: -7}, -9: {'j': 8}, -2: {'v': 'r'}}
p[-1][3]['d'][-1][9]['n'] = {'x': {-6: 'v'}, -1: {'m': 'r'}}
v[5]['b']['t']['e']['u'][-1] = {'y': {-8: {9: 'v'}, 0: {'s': 'a'}, 5: {-2: -1}}, 'p': {9: {'a': 'y'}, 5: {'g': 'r'}, -1: {8: 'z'}}, 'm': {-5: 0}}
v[6][-7]['f'] = c[-8]
length(v['y'][-7])
n[4][-2][3] = {3: {'v': -4}, 'd': {'i': 'j'}, 7: {'j': 7}, 'f': {'m': 'h'}, 'l': {9: 4}, 'n': {-9: 1}, 'r': {'u': -4}, 't': {'v': 5}, 'y': {-3: 's'}, -1: {-5: 5}}
m[-5]['v'][-8][0] = 0
s['b']['u']['b'] = c[-8]
t[-6][-2][5]['p'] = -4
r[1]['f']['e']['z'] = 7
m[1][2]['r'][-2][3][7]['o']['k'] = 'o'
x[7][4]['h']['u'][-5][-3] = 'n'
k[7][-7]['k'][-6] = z[-4]['w'][-2]['g']['n']
length(f['k']['g'])
p['c']['v'][-5][-2][-6]['y'] = 'g'
x['m'][6]['c']['u'][-1][0]['s'] = 'p'
y[8][1]['h']['a']['y'] = {8: {'j': 7}, 9: {-3: 2}, 'n': {'y': {-3: 'j'}, 'z': {'z': 'z'}}}
length(l)
v[5]['b']['t']['e']['u'][-1]['y'][0][-3] = a[7][0]['o']['f']
l[0]['g'][6] = -6
q[-8] = 'w'
test(h['i']['f'])
test(s[-5]['y'])
i[-2][2]['u']['s'][-1][3][4] = f[-1]
test(u[8][1][7][0]['o']['f'])
v[-1][-2][-4]['g'] = {1: {'f': -9}, 'b': {'j': -7}, 6: {'n': -3}, 'p': {-1: 6}, -7: {-9: 'z'}, -3: {4: 1}, -2: {-4: 'f'}}
j[4]['r']['v']['f']['d'] = 0
test(z[-7]['u'][8][1][1][7]['i']['k'])
length(f['k'][-7])
o[4]['o'][3]['d'][-1]['a']['y'] = 's'
r['v'] = -7
m[-4][-4][-9]['b']['y'] = {'a': {'i': 'e'}, -5: {'i': {'m': 'y'}, 8: {'n': 'r'}}, -1: {1: {-6: 'q'}, 'k': {-5: 9}, 'o': {'a': 0}, -7: {3: 6}}, -9: {'h': {'c': 5}, 'r': {1: -7}}}
length(n['c'][-8]['b']['r'][8]['v'][-2])
i[-8]['j'] = {'i': {8: -3}, 'm': {'c': {2: 'd'}, -1: {'t': 0}}, 't': {'j': 8}}
u[0][-5][5][-4]['b'][-3][-3] = r[1]['f']['l']
length(k['j']['q'])
u[0][-5][5][-4]['b'][-3][-3]['d'] = {'p': {-4: 'p'}, 3: {'y': {'p': 'o'}, -9: {-3: 'i'}}, 'm': {4: 9}, -3: {'s': 6}, 'l': {4: -8}}
r[1]['f']['z']['h'][6] = {8: {'l': -2}, 'c': {3: -6}, 'u': {'x': 'd'}, -3: {1: 3}}
test(x['m'][6])
length(i['a'][4]['k']['n'][8]['v'][-2])
d['h']['o'][7] = -2
length(s['b']['u']['b'])
r[0] = {1: {'r': 6}, 5: {'a': 'i'}, 6: {9: 's'}, 'g': {'g': 'g'}, 'r': {5: 'm'}, -7: {3: {-1: 7}, 'f': {'l': 'c'}}, 'x': {-4: {5: 'i'}, 7: {'g': -8}}, -6: {7: 'f'}}
n['v']['l'][-9] = 'g'
l['u'] = {3: {'h': -6}, -5: {4: 0}, -2: {8: 'g'}}
test(m)
v[5]['b'][-1] = {'c': {2: -5}, 'i': {0: {'d': -2}, 'i': {-9: 'a'}}, 'j': {'w': {8: -7}, 'o': {-1: -6}}, 'x': {1: 'e'}, -6: {-9: 5}, -4: {'a': -7}}
o[-3]['s'][3] = c['i'][-6]
s['m'][8][9]['q'][-1] = {9: {2: 6}, 'w': {'d': 'c'}, 'f': {-9: 'k'}}
test(j[5][8]['c'][-9])
test(o[4]['f'])
v[6][-7]['f'][0] = 'x'
length(t['s'][-1]['i'][3]['t']['f']['s']['o'])
d['a']['o']['a'][-2] = 2
k[7][-7][5][-8][5] = z[4]['u']['b']
e[3]['v'][4]['e']['t'] = l[6]
g['n']['x'][-9]['v'] = t['z']['f']['p']
length(r[0][-7]['f'])
test(i)
test(y[0]['f'][5][-4])
length(o[4]['f'])
s[-5]['y'][-8] = 9
e['t'] = v[6]['a'][5]
b[3][3]['v'] = -4
j[-1]['s'][6] = {'q': {-3: 7}, 'u': {0: {'w': 5}, 'm': {-2: 1}}, -3: {'x': {-5: 'd'}, 'c': {2: {'w': 'w'}, 5: {'w': 3}}}, -2: {'m': 'f'}}
length(g['n']['a'])
y[8][1]['h'][4]['z'][9][-8] = -9
test(x)
m[1][5]['x']['l'][-5] = 6
test(m[-5]['v'])
f['k'][-7][5] = -5
length(h[4]['d'])
k['t'] = {'m': {'p': {1: 8}, 7: {0: 'j'}}, 4: {'k': {'n': 'u'}, -1: {3: 'w'}}, -9: {'p': {'q': {0: 'c'}, 'p': {'t': 2}}, 'n': {'n': -8}, 'h': {'u': 'u'}}}
d[7]['q'][-6]['e'] = -5
length(h[-8]['r'][8]['v'][-2])
t[8][1] = -7
y[0][9]['k'] = 'l'
test(i[-2][2])
i['a'][4]['s'][8] = 1
r[1]['a'][-6]['u']['b'] = {'c': {'q': -8}, 'b': {'s': 6}, 5: {'s': 8}}
test(t[8])
k['j'][8]['e']['d'] = {-8: {-1: 'j'}, 'h': {'e': -3}, 'j': {0: {'h': -8}, 7: {1: 7}}, 'd': {-4: {-9: 0}, 'd': {'e': 'b'}}, 7: {'r': -7}}
d['z']['k'] = {-6: {'k': 9}, 't': {'i': 8}}
w['p']['h']['l']['o'] = 5
length(l['s']['a'][-5])
o[4]['f'][3] = 'n'
y[-7]['q']['o']['e'] = 'l'
u[8][1][7]['i']['k'][-8][-5] = j[-1]['w']['r'][0]['o']['f']
o[4]['f'][3] = w[4][7]['r'][8]['v'][6]
test(v[-1][-2][5])
u['m'][4]['r'][8]['v'][-2]['o'] = 2
w['p']['h']['d'][-2][-8] = c
r[1]['z'][1]['c'][-3][-2]['z'][9] = 'r'
test(u['g']['j']['o'][-7])
a[7]['o'][4]['f'][3][-6] = 'd'
h[-8]['r'][8][0] = 7
y[0][9]['k'] = {'q': {-8: {'r': 'g'}, -3: {'p': 'w'}}, -4: {'q': {'b': 'e'}, 'x': {-9: 'v'}, 2: {-7: {'s': {'p': 0}, 'o': {0: -7}}, 'e': {'i': -1}}, -4: {8: 's'}}, 'n': {1: {'a': 9}, 'o': {7: 'e'}}}
j[4]['r']['v']['m'][6][4] = 0
t['t']['b'][7]['o'][-4][-7] = 7
k['t']['m'][7][0] = -6
length(h[-8]['r'])
length(i[4]['g']['q'])
length(k)
length(h[-8]['r'][8]['v'][6])
x[-4]['b']['h'][-9][-2] = {0: {3: -1}, 4: {-4: -7}, 'd': {'z': 4}, 8: {-4: 'l'}, 9: {'a': 'z'}, 'x': {'f': 'e'}}
h['i']['f']['t'] = 'j'
length(l[-5][-4]['k'])
t['s'][-1][3] = h
length(f[-1]['l'][-4]['b'])
x[7][4][3]['d'][-1]['a']['r'] = {7: {'f': 'h'}, -3: {'x': 4}, 't': {-4: 't'}}
m[-4][-4]['w']['m'] = 0
f['o'] = t['t']['b'][7]['o']['o']['n']
test(l)
test(k['j'][8])
test(d[7]['q'][-6])
p['k']['r'] = 'f'
length(j[-1]['w']['r'][-5]['w'][6]['c']['u']['v'])
length(d[-2]['s'])
t[-6][-2]['q'][7][-5] = a[7][-5]['w'][6]['c']['u']['v']['q']['p']['y']
length(d['z']['k'][-6])
l['s']['g'][-9][-5] = {1: {-4: 4}, 4: {8: 5}, 6: {'r': 's'}, 'i': {'p': -4}, 'u': {'f': 'z'}, -8: {-7: {'s': 'x'}, 't': {-9: 'i'}, -3: {'y': {'e': 4}, 6: {-7: -1}}}, -3: {'e': 6}}
k['t']['m'][7][2] = 1
m[3][7] = 'f'
y[-7][3] = {-7: {'h': 'b'}, -6: {1: 7}, 'z': {0: {-9: 'p'}, -9: {-4: -1}, 7: {-9: 'p'}}, 1: {'t': 'n'}, 7: {4: {0: 'a'}, 6: {4: 'l'}}}
h[-8]['r'][8]['v'][-2] = 'n'
j[5][8]['q']['c']['r'][-8]['o'] = {'b': {'t': 7}, 5: {-3: 'l'}, 'i': {-7: -1}, 9: {-3: 'd'}, -8: {-2: 'e'}, -7: {'h': 'u'}, -5: {'v': 'd'}}
t[-5]['b'][-7][-1]['a']['r']['t']['b'] = {-5: {4: 'l'}, 5: {'l': -2}}
length(u['e'][-5]['t'][5])
d['a']['o'][8][-7][-1][-5]['p'] = 3
k['t'][4]['k']['e'] = r[7]['u']
k[7][-7][5]['c']['h'] = -1
length(f['k'][-7])
v[6][-7]['f'][0] = {1: {'a': 'o'}, 6: {4: 1}, 't': {'q': -9}, 'g': {1: 'n'}, 'o': {'c': {'q': -7}, 5: {'v': 3}, 'l': {6: 4}}}
test(f['o'])
o[-3]['x'][-5]['b'][-8][-5][3][8] = {8: {'x': 'f'}, 'l': {-6: 'n'}, 't': {'c': 8}}
test(r[7]['u']['v'][4])
test(k['j'][8]['e']['l'])
s['t'][8]['y'] = {'p': {-7: {'k': 6}, 'c': {-7: {1: -2}, 'z': {-7: -5}}}, 't': {'q': {0: {'q': 'b'}, 'a': {'i': -9}}, 'o': {'i': {-7: 'w'}, -1: {9: 'b'}}}}
test(g['n']['y'][0])
length(z[-7])
test(p[-1][3]['d'][-1][9]['n']['x'])
j['p']['w'] = {'q': {-8: {'t': 'z'}, 9: {'o': 'h'}, -3: {-5: 4}}, 'p': {-2: 'p'}, 'c': {'p': 'w'}, 'j': {'p': {'v': 'v'}, 'm': {-6: 'i'}}}
n['v']['l'][-9] = 'h'
k['t'][4]['k']['e']['h'][6][0] = -2
n['c'] = {'j': {9: {5: 'y'}, 'd': {'m': {1: 6}, 'd': {6: 'w'}}, 'o': {'v': 'o'}}, -9: {'c': {'z': 4}, 'w': {3: 'z'}}}
z[4]['u'] = {0: {0: 'z'}, 1: {'m': 5}, 'b': {'c': -4}, 4: {6: -2}, 'f': {'g': 'v'}, 8: {-7: 'h'}, 's': {7: 4}, 'r': {'j': 'x'}, -5: {'h': 'q'}}
length(j['v'])
u['g']['j']['o'][-7][-4] = 's'
test(k[7][-7][5][-8])
c[-8][0][6][4] = 'i'
length(o[-3]['s'][3])
x[-4]['b'] = 9
u['e'][-5]['u'] = {0: {'v': 0}, 'k': {'p': 5}, 'f': {8: 'k'}, 'r': {'k': 'i'}, 'n': {'i': {-2: 'u'}, 'd': {-1: 'l'}}}
length(o[4]['f'][3])
test(i[4]['f'])
h[4][9] = y[8]
length(s['b']['u'][0])
a[7]['o'][-3]['s'] = 'b'
v['p'] = -1
w['s'][-3]['h'] = 7
r[7]['u']['h'][6]['s'] = 'k'
u['e'][-5]['i']['y'][4]['g']['q'][-6] = f['o']
m[-9][-2][-5] = 'd'
s[3][9]['e']['t']['r'][8]['v'][6][-6] = -7
test(r[1]['z'][1])
l[2]['d'] = b[1]
test(f['o'])
n[4][4][3]['c']['q'][-6][6] = 4
length(g['i'][0])
length(g['t'])
y[-7]['y']['d']['a']['m']['l']['z'] = 'o'
test(q['m'][-3][-6]['x']['f'])
c[-9][9]['r']['i']['d'] = -5
b[2] = 's'
z['h'][-4][6]['t'][-9]['h']['x'] = {2: {6: 'q'}, 3: {'u': {'o': -5}, -1: {'i': 'r'}}, 6: {8: {'a': 'z'}, 'r': {'z': 'm'}, 'd': {'f': -5}, 't': {'a': -1}}, 'j': {'f': 'e'}}
test(x[7][4]['h'][-9]['i'][8][-5]['a'])
w[4] = -1
n['c']['j']['d']['d'][6] = {8: {0: {-1: 'b'}, 'x': {-5: 9}, 'z': {-8: -7}}, 3: {'x': {8: -7}, 5: {'w': -5}, -1: {'u': {'r': 9}, -2: {-6: -4}}}}
q[-1]['v']['j']['g'][-2][1]['h']['a']['y']['t'] = {3: {-5: 8}, 7: {'u': {-6: -6}, 6: {-4: 7}}, 'i': {'k': 'l'}, 'm': {-5: {9: 'h'}, 'o': {8: 'k'}}, 'r': {'q': 1}, -2: {'f': 0}}
s['g']['u']['z']['f']['p']['h']['b'][1][2]['o'][-7][-4] = l['b']['p']['h']['b']['u']['f']['x']['k']['n']
test(j[-1]['w'])
t['z'] = i['a'][4]['s']
r[0]['x'][-4][-7] = 'i'
h[4]['c']['q']['h'][8][-7] = 2
u['n'] = z['h'][-6]
v[-1][-2][-5][4][-2]['d'] = 't'
test(y[8][1][6][9]['m']['i'][-3])
test(p['c'][4])
length(q['m']['y'])
o[4]['o']['h']['u'][9][4] = -4
i['a']['f'] = {-8: {-1: {'i': 'd'}, 'v': {-3: 'f'}}, 9: {3: {6: 'g'}, 7: {0: 'w'}}, 'd': {8: {-8: 'q'}, 'w': {-3: -6}}, 0: {-5: 2}, 'f': {'x': 'u'}}
test(v['y'][-4][6][5][-4]['b']['q'])
l[0]['g']['m'][-4]['b'][-3][-3]['d']['m']['c'] = 8
length(r[1]['z'])
t['z']['r'] = -7
d[9][7] = {'h': {'i': {'w': 0}, 'b': {'v': {-5: -1}, 'n': {'w': 2}}}, 'e': {'q': {6: -6}, 7: {'y': 'x'}}, 'f': {'a': {'j': {3: -4}, 'n': {3: 'r'}}, 's': {-7: {4: 'b'}, 's': {-4: 'r'}}}}
d[-2]['s'][7] = e[-2]['v']['v']['q'][-6]
s['t'] = -6
m[-4][-4][8]['c'] = -1
l['f']['g']['u'] = 9
length(a[7][0]['o']['f'])
length(t)
w['p']['h']['l'] = y
length(j[-1]['s'][6][-2])
length(u[8][1][7]['o'])
m[3]['k']['h'][-7][-3] = k['t'][-9]['p']['p']
y[8]['v'] = {0: {4: 5}, 1: {3: 'l'}, 'l': {3: 'a'}, 's': {'s': {'i': -9}, 't': {'n': 'x'}}, 'r': {'j': 'z'}, 'a': {'f': -6}, -9: {2: {-9: 'g'}, -5: {'y': 't'}, 5: {-8: 7}}}
n['v']['l']['a'] = 'h'
o[4]['o']['h']['u'][3][1] = 6
o[-3]['x']['r'] = 8
o[-3]['x'][-5]['a'][-8][-7][3] = p['k']['a']['o'][-1]['k']
u['e'][-5][2] = 'l'
b[1][-6][3][6] = k['j'][8][-9]
z[4]['u'][4][7] = p['k']['a']['o']['e'][6][3][-1]['l']
w['p']['m'] = {2: {3: {'t': 'a'}, 't': {0: 9}, -9: {'j': 'q'}}, 5: {'u': -2}}
test(b[1][2][8][-2])
a[7]['i']['k'][-7][7] = 8
r[1]['a'][-6]['u']['b']['c']['q'] = 7
test(e[3]['v'][-4][-9]['p']['e'])
t[-5]['i'][-7] = -5
test(m[-5]['v'][8][-1][0])
test(q[-1])
length(u[8][1][7]['i'][8])
s['m']['k'][-8]['y'] = v[5]['b'][-1]
test(k['t']['m']['p'])
o[-3]['x'][-5]['a'][-8] = 'f'
c[-9][9][9] = {'a': {'s': 'o'}, 'i': {7: 'f'}, 'k': {'j': -1}, 'l': {'i': 's'}, 'o': {'s': 'k'}, 's': {'o': 5}, -4: {'e': 'h'}}
n[4][4][3][-2]['j'][-8] = 'z'
l[1] = 'w'
test(n)
j['t']['f']['s'][-1][1] = -7
p['c']['x'][-6][-7] = -9
b[3][-1][-5] = 'b'
length(e[-2][8][-6][-7][-2])
length(y[-7]['q']['b']['c']['u'][-1][0])
length(h[-8]['r'][8]['v'])
length(j[4]['c'])
test(e)
f['o']['e'] = 'a'
w['p'] = 'v'
t[-5]['b'] = 't'
y[0][9]['k'][-4][2]['e']['i'] = {1: {'u': 'f'}, 't': {9: 'r'}, 'l': {-4: -6}}
test(s[-5]['z'])
length(s['m']['k']['q'][-1]['b']['r'][8]['v'][6])
length(t[8])
m[-5]['v'][-8][0]['o']['c']['u'] = v[-1][-2][-4]['g']['p']
b[3]['y'][1] = {'i': {-8: {'s': 'j'}, -7: {7: -1}}, 4: {7: {'s': 3}, -9: {7: 'q'}}, 'o': {-5: {'e': 'g'}, -9: {1: 5}}, 'f': {'y': {6: 6}, 'z': {'c': 7}}}
length(x[-4][-6])
p['c']['v'][-5][-2]['j'][-8] = 'd'
test(a[7]['i'][8]['c'])
a[7]['o'][4]['f'][3][1] = {4: {-6: 0}, -2: {'n': 9}}
c[-9][7]['b'][0][1]['a'] = m[-5]['v'][-8][0]['t']
g[3][-1] = 'e'
i[4]['f']['k'] = {'a': {3: -6}, 'h': {'g': -7}, 3: {'y': 'r'}, 6: {8: -4}}
test(t[8])
length(u['e'][-5]['i']['y'][4]['g'][3]['y'][-5]['i'])
o[4]['o']['h']['u']['t'][-7] = 7
length(j['t']['f']['s']['o'])
test(q['m']['y']['u'])
test(g['d'][2][-2])
length(n['v']['l'])
v[6][-7]['f'][0][6][4] = s[3][9]['e']['d'][2]
test(r[0][1])
v['i'][-9]['y'] = q
q['m'][-3][-6] = 'h'
test(w)
p['k']['a']['o'][-1]['k'][-2] = -1
f['k']['g'][4][-5]['i'][-3] = 'i'
k[7][-7]['k'][-6][-8] = n['v']
l['a'] = r[0][-7][3]
test(p[-1]['h'][9][-2]['c'])
test(f)
length(u['e'][-5])
q['m']['y']['u'][-7] = 'w'
length(j[-1])
test(k['j'][8]['e'][8])
d[9][7]['h'] = -5
o[4]['o'][3]['d'][-1][0][7] = g
x[7][4][3]['d'][-1]['t'] = -2
length(l['f']['j'])
v[6] = 'o'
length(g[3])
v[-4][-1][0][7][8][-1] = p['k']['a']['o'][-1]['e']['m']
s['g'][-7] = {2: {'f': {-3: -2}, 7: {-5: 'r'}}, 'o': {0: 'x'}}
d[7]['q'][-6][-8]['l'][-9] = {'q': {4: 8}, 'p': {6: 'r'}, 's': {-5: 'w'}, 3: {-7: 1}}
m['r'] = 'l'
f[1] = {'y': {5: {4: 'r'}, 7: {'m': 'u'}}, -9: {'h': {'h': 'd'}, -7: {-8: 'j'}}, 7: {'n': 'x'}}
test(e['t']['f']['p'])
test(b[3]['l'])
w['s']['e'] = -3
o[4]['f'][3][1][-2]['n'] = 1
j[-1]['s'][6][-3]['x'][8] = o
test(b[3][7])
length(w['s']['g'])
test(y[0])
d[9][7]['e']['q'][6] = -3
v['y'][-7][-3] = 3
length(z[-4])
r[1]['a'][-6]['o']['d'][3] = q['m'][-3]['i'][6]['x']
length(l[2]['d'][6])
d['h'][-7][0] = {'a': {'s': 1}, 5: {'b': -2}, 7: {4: {-6: 'c'}, 6: {'l': 'h'}}, 'm': {'u': -4}, -9: {5: 't'}, -6: {-7: -9}}
k[7][-7][5]['c'][-4] = -6
test(l['m'][-8][8][3])
d['h'][3] = {8: {'f': -1}, 1: {'a': {'w': 'g'}, -4: {-8: 'l'}}, -1: {'p': {'a': 7}, 's': {'b': 5}}}
m[-4][-4]['a']['z'] = i[4]['f']['k']['a']
test(x[-4][-6])
length(e[3]['v'][3]['f'])
v['i']['a'][-9] = {1: {-5: {'o': 'o'}}, -6: {'u': {'c': -5}, 't': {-7: 7}, 'v': {'l': 6}}, -3: {5: 5}, -2: {9: 6}}
v['i'][-9]['y']['m'][-3]['i'][6]['x']['z'] = 'n'
x['m'][-4] = e[3]['v'][4]['e']
h[-8]['r'][8]['v'][6][1][-2]['i'] = 'c'
test(v['y'][-4][6][5][-4]['b']['j'][8]['v'][6][1][4])
test(d['z'][-7][5]['s'][-5])
length(k['t']['m'][7])
c['e'][-5] = 1
a[7][0] = {8: {'f': 2}, 'i': {'y': {-3: 'y'}, 'w': {'z': 5}}, -6: {'g': {9: 5}, -9: {-1: -4}}, 0: {9: 7}}
test(u[0][-5][5][-4]['b']['q'])
q[-1]['v'][-5][7][9]['e']['t']['r'][8]['v'][6][1][4][-6] = {'c': {9: {'h': -3}, 'b': {6: 'r'}, 5: {'q': {'n': -4}, 'g': {'l': 'k'}}}, 2: {9: {'q': -6}, 'j': {7: 2}, 6: {-1: 'i'}}}
test(e[-2])
x[-4][-6][-3] = b[1][-6][3][6]
q['m']['y']['u']['s'] = i[-8]
t['s'][-1]['i'][3] = 6
q['m']['h'] = 'y'
h['i']['f'][8]['e'][-5] = {'f': {'n': -7}, 9: {'u': 'u'}, 'j': {'d': 'd'}, 'q': {5: {'q': 0}, -1: {'o': 1}}, -9: {'s': 5}, 'v': {5: 's'}}
test(a)
l[0]['g']['m'][1] = {0: {'y': {'j': {'d': 9}, 7: {'v': 'p'}}, 'p': {'u': {-3: -2}, -1: {5: -8}}}, 'm': {8: {'t': 5}, 's': {3: 'o'}, -6: {'e': -2}, 'u': {'c': {5: 'j'}, 'm': {'j': 2}}, 'l': {-4: -6}}}
t[-5]['h'] = h[-8]['r'][8]['v'][6][1][4][-6][2][6]
c['j'][-4] = 8
t['s'][-1]['v']['v'] = g['s']['b'][0][6][4]
length(p[-1]['h'][9][-2][7])
test(b[3]['l'])
h[4]['d'] = 't'
z[-4]['w']['c'][3]['y'][-9]['r'] = {0: {3: 'j'}, 'l': {-7: {'y': 't'}, 'u': {'z': -9}}}
length(r[7]['u']['h'][6])
k['t'][4][-1]['z'] = {'m': {-7: {'v': 7}, -6: {-7: -9}}, 'o': {'p': {'h': 6}, 'd': {-4: 'x'}}, 'f': {'o': {-9: 'v'}, 'n': {'o': 'm'}}}
test(n)
r[7]['u'][-1][-6][5] = 't'
s['g']['u']['t']['b'] = 't'
w['s']['b']['r'][7] = 'v'
a[7][-5]['o'] = -9
test(w['s'][-3])
u['g']['o'] = p['c']['v'][-5][-2][-6]
q[-1]['v']['r'] = -9
length(w['s']['g'])
length(v)
n[4][4][-1]['u'][8][5] = {3: {9: -7}, 5: {'r': -6}}
length(x['m'][-4])
c[-8][0]['o']['c']['u'][-9] = 'n'
length(k['j'][8]['e']['l'])
l['b']['p']['h'] = 0
length(s['m']['k']['q'][-1]['b']['r'][8]['v'][6][1][-2])
length(x[7])
test(l[-5][-4]['r'])
g['d'][2][-2][-5]['r']['x'][1][6][-7] = 'b'
length(g[5])
a[7]['o'][4]['f'][3][1][4][-6]['c'][9][-2] = 4
length(e[3]['v'][0]['p']['z'])
z[4]['u'][8][4] = w
e[-2]['v']['v']['q'][-6][-8] = {'c': {'t': 'z'}, 3: {-3: 'u'}, 2: {-6: -2}, 'u': {-7: 'v'}, -1: {0: -3}, 'w': {'u': {2: 'j'}, -2: {'g': 'u'}}, -2: {'k': -5}}
test(m[1][5]['x']['l'])
length(j['p']['w']['c'])
g['s']['b'][0]['o']['c']['u']['k'] = 8
test(h['i']['f'][8]['e'])
z[4]['u'][8] = 9
length(v[-4][-1][3]['i']['f']['j']['n'])
n['v']['l'][-9][3][-4] = s[3][9]['e'][8][-1]
i[-2][2]['u'][-6][-9][6]['x']['z'] = 'g'
m[-4][-4][3][-1] = {-8: {'w': 4}, 3: {1: -2}, 'g': {'a': {'r': -3}, 's': {'q': 'q'}}, 6: {'a': {'h': -1}, 2: {'q': 't'}}, 'v': {-6: {1: -3}, -5: {9: 'j'}}}
l['u'][-5] = 9
m[3][0]['e'] = -2
e['t']['f']['r'][6] = b[3]['t']
test(d[-2][-9]['s'][2])
b[1][-7]['u'] = 0
test(j[-1]['w']['r']['o'][4]['f'][3][1][4][-6]['c'][5]['q'])
length(v[-4][-1][3][4][9][1][6]['s'])
g[-1]['a'][-2][2][-9]['v'] = d['z']['k']['t']
k['j'][8]['e']['l']['d'] = 'p'
test(n['v']['l'][-9]['q'])
test(d['z']['k']['t'])
v[5]['b']['f'] = 9
m[-4][-9] = 'f'
a[7]['o'][-3]['x'] = i[-8]['b']
length(r[7]['u']['h'][6])
z[4]['u'][-5][-4] = 4
h['i']['f'][8]['e'][-5]['j'][7] = c['e'][-9][1]['j']
length(l[0]['g']['m'][7]['o']['o']['n'])
m[-9]['c'][-7] = 1
e[3]['v'][3]['f']['i'] = {'x': {2: 'z'}, 7: {-6: 6}}
test(a[7][-5]['w'][6])
o[-3]['x'][-2] = 'y'
length(m)
b[1][-7]['h'] = 'k'
length(o[4]['f'][3][1][4][-6][2][6])
test(x['m'][-4]['t'][-4][-3])
e['t']['f']['p']['s'] = {'t': {4: 1}, 5: {8: {'o': 'w'}, -1: {'r': 'd'}}}
length(m[3]['k']['h'][-7][-3])
s['b']['u']['r'][0] = q[-1]['v'][7]
n[4][4][3]['c']['q'][-6]['e'] = 'w'
test(a[7])
o[-3]['x'][-2] = 'b'
u['g'] = m[-5]['v']['e'][-9][1]['i']['m'][-7][2]['f']
j[5][8]['q'][0] = q['m']
test(s[3][9]['e'][-6]['b']['r'][8]['v'][6][1][-2])
s['g']['u']['z']['m'] = 'y'
h[-8]['r'][8]['v'][6][1][-2]['n'] = {'a': {-8: 't'}, 4: {6: 0}}
o[-3]['x'][6] = -6
l['a'][-1] = 2
b[3]['f']['m'] = 'i'
j[-1]['w'] = {-6: {-7: {'i': -1}, 's': {1: -2}}, 't': {-5: {-7: 'l'}, 7: {-7: 's'}}}
test(t)
d['z']['d'][-2] = 'l'
length(h['i']['f'][8]['i'])
i['a']['f'][-8]['v'][8] = 'v'
test(j)
i[-8]['j']['i'] = 1
test(s['b']['u'][1])
length(a[7][0])
test(d['h'][-7][0][7][4])
e['b'] = {0: {4: 't'}, 'z': {8: 'b'}, 'l': {1: -7}, -5: {'v': 7}}
p['k']['a']['o'][-4]['w']['g'] = b[1][6]
x['m'][-4]['t'][-4][-3]['w'] = 'n'
p['c'][4][0] = 'x'
l[6][-4][-3][9] = {-7: {0: {'r': 'b'}, 'g': {'v': 'r'}}, -6: {'y': 4}, 5: {'p': {-6: -6}, 'j': {-3: 'c'}}, 'n': {1: 'l'}}
h[3] = {-4: {'y': {4: 1}, 'd': {'g': 'x'}, 7: {9: {3: 'g'}, 's': {'c': 'w'}}}, 'w': {-1: 'c'}}
s['g'][-7]['o']['a'] = 'f'
q['m'][-3]['i']['x'] = {-4: {'t': 'j'}, 'd': {1: 'v'}}
s[3][9]['g'] = -9
test(b[3]['r'])
g[8]['e'] = {'i': {3: {'v': 3}, 'w': {-2: 1}}, 's': {-9: 2}, 5: {'m': 'h'}, -3: {'u': 8}}
e[-2] = e['b']['l']
n[4][4][3][-2]['j'] = t
q['m'][-3]['i']['x']['d'][1] = t
test(t['z'])
c['i']['m']['u']['v'] = m[-4][-4][-9]['b']['y'][-5]['i']
test(q[-1]['v'][7])
g['t']['r']['o'] = o
u['m'][4]['r']['o'][4]['f'][3] = -9
length(r[7]['u']['v']['q']['p']['z'])
g['t']['r'][8]['v'][6][1][-2]['i'] = -4
test(h['i']['f'][8][-3])
q['m'][-3]['i'][-1] = 'b'
f[-1]['t']['b'][-1][7] = f['o']
y[-7]['y']['d']['a']['m']['l']['z'] = z[-7]
k['t'][-9]['p']['p'][-4] = {9: {4: {-2: 6}, 'u': {'z': 2}}, 2: {5: 'w'}, 4: {'y': 'p'}}
test(e['t']['b'])
y[0]['f'][5][-8]['v'] = 7
d['z']['k'][-6]['k'] = 'y'
x[7][4][3]['d'][3]['v'] = g[-6]['b']['r'][8]['v']
w['s'][-3]['c'] = {'e': {'s': {'c': 'q'}, 'u': {-9: 'q'}}, 'd': {-5: 'x'}, 7: {'n': 's'}, 'p': {'i': 'a'}, -6: {-5: {9: -6}, 'm': {2: {-6: -7}, -2: {-1: -7}}}, -4: {-9: 'h'}}
test(b[3]['l'])
test(e['t']['b'])
test(i['a'])
length(m[1][5]['x'])
t[-6][-2]['q'][7][-5][6] = 6
test(x)
length(a[7][-5]['w'][6]['c']['u']['v'][-8]['o'])
b[3][7][2] = {2: {'p': 'r'}, 6: {5: -6}, 'f': {'y': 5}}
test(w['s']['x'])
x['m'][-4] = 't'
length(b[1][2][8]['j']['c'])
test(s[3][9]['e'][-6]['b']['r'][8]['v'][6][1])
test(b[1][6])
l[-9] = g['s']
length(i[-2][2][-7][2][7])
length(v[5])
q[-1]['v'][7][8] = {9: {-7: {-8: 'a'}, 'j': {'l': 'o'}}, 'k': {2: 'i'}, -2: {-6: 'j'}, 'f': {-6: {'r': {8: 's'}, 'm': {'z': -5}}, 'e': {6: 'z'}}}
c['e'][-9][1]['s']['u'][-7] = w['s']['g']
h['i']['f'] = a[7]['o']
test(o[-3]['x'])
r[1]['a'][-6]['u']['b']['b']['s'] = {'y': {'x': {-1: -6}, -6: {8: 4}}, 'i': {5: 'd'}, 'c': {4: 'x'}, -6: {'c': 6}, 't': {'v': -2}}
u[0][-5][5][5] = i
q[-1]['v'][-5][7][9]['e']['n']['y'] = e['b']['l']
h[3][-4][-9] = 'j'
m[-5]['v'][8][3]['v'][6] = 'q'
test(h[3]['w'])
q['m'][-3][-6] = 2
length(e['b'])
j[-1]['s'][6][-3]['x'][8][-3]['x']['n'] = 0
c[-8][0]['o']['l'][6] = {'h': {9: 6}, -5: {'f': 'a'}, -4: {'l': -9}}
y[8]['v'][1][5] = 9
n['v']['l'][-9]['p'][6] = 'a'
g['d'][2][-2][5][-2] = 'y'
length(f[-1]['t']['b'][-1][-4])
test(q)
test(z['h'][-4][6]['j']['q'])
z[-7][-7]['o']['e'] = {'r': {-3: 0}, 5: {'u': -7}, 'o': {'p': {'q': 6}, 'f': {'s': -5}}, 'd': {9: 'z'}}
v['y'] = 'e'
test(x[-4][-6][-3])
k['t']['m'][7][0] = {2: {'m': 'e'}, 7: {-7: 7}, 'i': {7: -6}, 'h': {-3: -7}, 'k': {'m': 'd'}, 'o': {'m': -6}, 'q': {'r': -2}, 8: {0: 1}, -5: {7: 'w'}}
m[1][2]['r'][-2][3][6][3] = 'z'
length(o[4]['f'])
q['m']['y']['u'][-4] = 'x'
m[-4][-4]['w'][-5] = {'q': {'u': -3}, -3: {'n': 's'}}
test(w['s'][-3]['c']['p'])
length(a[7][0]['i']['w'])
test(d['a']['o'][-1])
w['s']['v']['k'] = -3
length(p[-1][3])
test(a[7]['o'][-3]['x'])
p['k']['a']['o'][-4][1]['l'] = 'h'
test(r)
i['a'] = 'g'
w['s']['b']['s'][-9] = -3
length(j[5][8]['q'][0]['y']['u']['s']['z'])
d['a']['o'][8][-7][3]['v']['r'] = {'y': {-6: {9: {'n': 'z'}, 4: {3: {'z': 'i'}, 'o': {0: -6}}}, 'z': {'y': 0}}, 3: {'f': {'u': 4}, -3: {'d': {'j': 'q'}, -9: {7: 'i'}}, 5: {-8: -3}}}
length(j[-1]['w'][-6][-7])
e[-2][1] = 'o'
r[0][-7][3][-1] = k['t'][4][-1]['z']['f']['n']
b[1][2][8][-2][-7] = -9
length(f[1]['y'][5])
length(g[-1]['a'][-9][6][4])
l[-5] = {'c': {'n': 8}, 'f': {'b': 7}, -3: {'e': 5}, 7: {-6: -4}}
length(q)
length(x[7][4][3]['d'][3]['v']['r']['y']['z'])
n['v']['l'][-9]['q'][4] = {'v': {-9: 8}, -4: {-4: 'l'}, 'w': {-6: 't'}, -9: {-8: 'e'}}
test(i[-2][2]['u']['z'])
length(l['s'][-1]['k'])
h['i']['f'][-3]['x'][-2] = 'm'
a[7][-5]['w'][6]['c']['u'][-1][-6]['k'] = 7
n[4][4][3][-2]['w']['s'] = g[8]['e'][5]
length(a[7]['i']['k'][-8][-5])
v[-1][-2]['y'][6][8]['v']['r'][4] = -1
length(i[-8])
test(a[7])
test(q['m'][-3]['i']['x']['d'])
length(d['a']['o']['a'])
length(v[5]['b'][-1][-4])
r[1]['z'][1]['c']['d'][3] = -3
test(a)
length(q['m'])
u['e'][-5]['s'] = {'q': {'j': -9}, 3: {-6: 8}, 'r': {'b': 'a'}, 'o': {-7: {'o': -4}, -5: {-1: 'w'}, 1: {'j': 'q'}, 'm': {9: -5}, 'n': {'a': 't'}}, -1: {-1: 7}}
test(b[3])
w['p'] = {'c': {'y': {'c': 8}, 5: {'w': 't'}}, -9: {-7: 'e'}, 'x': {'n': 4}, -6: {4: 4}, 'z': {-3: 'j'}, -1: {-7: 9}}
length(h)
c['i'][-6]['i'] = {'a': {-7: {-2: 'u'}, 'k': {'w': 'z'}}, 9: {'i': {'k': 'w'}, 'r': {3: 'i'}}}
o[4]['f']['c'] = {0: {-4: 2}, 'g': {'s': 'm'}, 9: {'e': -9}, -8: {-5: 'z'}, 'y': {-3: 'q'}, -2: {-3: 8}}
l['u'][-2][8] = 'i'
length(g['n']['y'])
i[-2][2][-7]['o']['e']['o']['f'][-9] = 'k'
f[-1]['e'] = x[7]
length(d['h'][3][-1])
k[7]['g'] = {'j': {'o': -4}, 'b': {-7: 4}, 7: {9: 4}}
test(p['k'])
test(m[-4][-4]['w'][-5][-3])
length(k['j'][8]['e'][8])
length(m[1][5]['x'][-8][5])
length(l)
test(z[-7][-7][2])
length(e['b']['l'])
test(j[4]['c'])
i[-2][2]['c'] = 'y'
e['t']['b'] = -9
test(w['p']['z'])
o[-3]['x'][-2] = {9: {7: 'e'}, 'z': {5: -7}}
t['s'][-1]['v']['v'][-2][-5]['r']['x'][1][8]['h'] = {'o': {3: -7}}
test(z[-7]['u'][-5]['i'])
y[-7]['q']['b']['c']['u']['h']['z']['k'][-7] = {0: {-7: -2}, 'c': {'v': 'v'}, 7: {'h': 2}, 'm': {'n': 2}, 'l': {-7: -5}, 'y': {'k': -6}, -6: {'p': 'g'}}
g[3][-7] = 'j'
p['c'][4] = -5
i[-2][2][-7][2][7][0] = 'p'
length(g)
x['m'][6]['c']['u'][-1][0][2] = {'q': {-9: -5}, 'o': {0: {-4: 'b'}, -5: {-8: -5}}}
q['m'][-3]['i'][6]['x']['v']['r']['y']['z']['v'] = 'r'
length(y[8][1])
length(i[4]['g']['q'][-6])
p[-1]['h']['u'][-3][2] = x[-4][-6][-3]
n[4][-2][3][7][2][-4] = c[8][-1][9]['n']
h[4][9][1][6]['s']['s'] = b
j[4]['r']['v']['f']['d'] = {'i': {-8: {-8: 'g'}, 4: {'y': 'u'}}, 'y': {-1: {-5: 9}, 'v': {'w': 0}}, -4: {'x': 8}, -8: {'j': -9}}
o[4]['o'][3]['d'][3]['v']['r']['y']['z']['t'] = {'x': {-4: {0: 'd'}, 4: {'j': 'n'}, 'l': {'t': 'c'}, 'e': {3: -8}}, -6: {'s': {-7: 'z'}, 7: {6: 'u'}}}
t['s'][-1]['i']['x'] = p
q['m'][-3]['i']['x']['d'][1]['t']['b'] = 'a'
z[4]['u']['s']['k'] = 'y'
j[5][8]['c']['d'][-6] = z['h'][-6]
x[7][4]['h']['u']['w'][-2] = p
i['a'] = 'w'
w['s']['b']['s']['i'] = 'v'
b[1][-6][3] = c[8][3]['v']['r']
length(b[3][3])
test(y[8]['v']['r'])
k[1] = -9
test(c[8][3]['v']['r'][3])
n['v']['l'][-9][3][-4]['p'] = 0
test(h[-8]['r'])
m[0] = i[-2][2]
d[9][7]['e']['q'][6] = 'a'
length(j['v'])
q['m'][-3]['i'][6]['x']['p'] = -1
i[-8] = 8
k[7][-7]['k'][-5] = 'v'
x[7] = r[1]['f']
q[-1]['v'][-5][7][9][-7] = 'j'
k[7]['g'][7] = y[-7]['y']['d'][-6]['c']
k['t'][4][-1]['z']['m'][-6][-7] = 't'
p[-1]['h']['u'] = k['t']
length(s[3][9]['e'][8][-1])
length(x['m'][6]['c']['u']['v']['q']['p']['j'])
u[0][-5][5][5] = 'q'
length(h)
length(p[-1][3]['d'][-1][3][3][-4][7])
length(a[7])
c[-9] = {'e': {'y': 'o'}, 'o': {'l': -1}, 'r': {'j': {-9: 8}, -1: {'w': 9}}, -9: {9: {-4: 'b'}, 'e': {'h': 0}}, -7: {1: -3}, -4: {'r': {-5: 'd'}, 'b': {4: 'e'}}, -2: {'q': -5}}
m[-5]['r'] = 'k'
length(k['t'][-9])
length(c[8][-1]['x'])
r[0][1] = {-8: {'g': -4}, -2: {'e': -5}, 'r': {'v': 'q'}, 'l': {'s': 'f'}, 6: {'m': -1}}
w['p']['x']['n'] = -3
q['y'] = {'a': {'p': 'm'}, -2: {'f': 4}, 'w': {-7: {'t': 'e'}, 'p': {'x': 's'}}}
test(p['k']['a']['o']['e'])
length(o[4]['f']['c'][9])
a[7]['i']['k'][-7]['j'] = -8
test(y[8]['v']['s']['t'])
q[-1]['v'][7][8][-2][-6] = l[-5][-3]
s['m']['k'][9] = q[-1]['v'][-5][7][9]['e'][-6]['b']['r']
s[-4] = {'a': {'d': -9}, 'c': {'w': 7}, 4: {5: 0}, 'd': {'i': 'd'}, 'f': {'m': -2}, 't': {-6: 3}, -3: {-2: 'o'}, -2: {-2: 'c'}}
test(q['m'][-3]['i'])
x[7][-5][5] = {'y': {7: 0}, 'o': {-5: 'w'}}
length(q['y']['a'])
c['e'][-9]['t'] = 0
o[4] = 'r'
u[8][1][7]['i']['k'][-7] = {'c': {'q': -1}, -2: {'c': -9}, 7: {'t': -8}}
length(o)
length(h[3])
length(t[-5]['i'])
test(p[-1]['h'][9][-2][7])
f[1][-9]['h']['h'] = {'c': {8: {2: -5}, 1: {4: {-4: -7}, 'o': {'g': 'y'}}, 'i': {3: -6}, -1: {7: 'd'}}, 'e': {'q': {'b': {-5: 'h'}, -2: {'s': 'y'}}, 9: {'q': 7}}}
d['h']['o'][7] = 'r'
t['z']['m'] = 'c'
length(r[0][1])
length(u['n'])
p['c']['v'][-5][-2]['y']['d'] = 'c'
test(q['m'][-3]['i'][6])
r[7]['u']['v']['q']['p']['z']['f'] = {'d': {2: 'r'}, -9: {9: 'r'}}
o[-3]['x'][-2][9][7] = 8
v[-4][3]['s'] = {-7: {8: {'n': -2}, 'h': {7: -7}}, 'j': {'m': -8}, 'w': {5: 'l'}, -2: {'t': 0}}
v[-4][-1]['i']['x']['k']['a']['o'] = f['k'][-7]
o[-3]['x'] = a[7][-5]['w'][6]['c']['u'][-1][-6]
q['m'][-3]['i']['x'][-4]['z'] = c['s'][9][6]['q']['o']
k['j']['p'] = {'a': {'k': {'q': -9}, -5: {'e': 7}}, 0: {0: {-4: 'x'}, 'b': {'z': 'w'}}, 's': {'x': 'e'}, 'h': {'r': {8: 'o'}}}
u['n']['h'] = 'x'
r[0][-7]['f']['l'] = 'y'
length(u['g'])
z[-7][-7][2]['f']['m'] = -3
e[-2] = 'w'
b[1][6][8] = -3
o[-3]['x'][-3] = z[-7][-7]['o']['e']['o']['p']
test(o[-3]['x'][-3])
r['v'] = {'a': {'p': 0}, 4: {'e': 's'}}
v[-1][-2][-4]['g'] = -5
test(c['i']['m']['u'][-6][-9])
f['o']['x'] = 'm'
test(m[3])
l[0]['g']['m'][1]['m'][-6][-3] = 'r'
m[-4][-4]['m'][-6][-4] = 't'
x[7]['o']['y'] = 's'
y[0]['f'][5]['x'][-7] = k['j']['q']
length(h[3][-4]['d'])
d[7]['s'] = {'g': {0: 'j'}, 'v': {'i': {'g': -2}, 6: {-2: 'l'}}}
o[-3]['x'][-3]['q'] = {-8: {9: 'v'}, 'l': {'f': 5}}
test(h[-8]['r'][8]['v']['r'][3])
length(f['o'])
g['i'][0]['f'] = 'h'
test(q['y'][-2])
length(p[-1]['h'][9][-2]['c'])
g[-6]['b']['r']['o'][-3]['x'][-3]['q'][-8][9] = {6: {9: 4}, 7: {'o': 0}, 8: {5: 't'}, 'h': {'q': -7}, 'm': {'d': 3}, 'n': {'h': {'x': 'k'}, 4: {-3: 'y'}}, 'p': {8: 'g'}, 'v': {'j': 'n'}, -2: {'n': 2}}
length(k['j'])
i[-2]['a'] = z[-7]
i[-2] = k['t'][4][-1]['z']['o']
d[9][7]['f'] = {2: {'m': {'u': 'b'}, 'f': {'a': 'q'}}, 7: {4: {'y': {9: 'l'}, -8: {1: 1}}, 't': {-2: 7}}}
c[8][3] = s['m']['t']
f[1][7]['n'] = d[9][7]['f'][7][4][-8]
test(j['v'])
h[4][9]['v']['r']['i'] = {'r': {'r': {'o': 'x'}}, -4: {-5: {'t': 'c'}, 4: {5: 'u'}}}
k[1] = 'o'
z[-4]['w']['c']['q'][-6]['e'] = d
test(g[3])
length(j[5][8])
g[8][-1][5] = -6
length(o[-3])
g['s'] = {0: {'u': 's'}, -8: {'j': {-2: 'z'}, -2: {6: 'w'}}}
length(n['v']['l'][-9]['p'])
test(v[-1][-2][-5]['r']['x'][1][2][8][-2])
length(r)
d[1] = v[-1][-2][-4]
p['k']['a']['o'][0] = {'a': {'r': 'r'}, 'c': {'z': -9}, 3: {'a': 'a'}, 5: {9: 'u'}, 6: {'i': 8}, 8: {'h': 3}, -9: {8: 7}, -2: {2: 't'}, 'd': {1: 4}}
a[7]['o'] = 'd'
v['i'][-9]['y']['m'][-3]['i'][6][4]['k'] = {-8: {'y': 8}, -7: {'h': {'x': 'x'}, -3: {-2: -8}}, 'u': {0: {'s': 'b'}, -7: {'a': 's'}}, 't': {-1: 'm'}, 'x': {'z': {'a': 5}, -4: {-7: 'j'}}}
t['v'][-2] = {'q': {'e': 1}, 'h': {'u': {7: 'g'}, -9: {'t': -2}}, 2: {'u': 8}, 'r': {-5: 4}, 4: {8: 8}}
length(n['c'][-9])
test(a[7][-5]['w'][6]['c']['u']['h'][6])
test(v)
j[4]['r']['v']['f']['d']['y'][-1][-5] = 4
length(j[5][8]['i'])
c['j'][-4] = 7
g[3]['l'] = q[-1]['v']['j']['g'][-2]['v'][-9][5]
e[3]['v'][4]['i'][-8] = {1: {'g': 'o'}, 'e': {8: 6}, 6: {3: 'r'}, 9: {'i': 'a'}, 'k': {-6: {'c': 'y'}, 'k': {3: 'a'}}, -9: {8: 'a'}, 'z': {-2: -7}, -3: {8: 'c'}}
test(m[-9]['c'])
s['a'] = -8
o[-3]['x'][-3]['q']['l']['f'] = 'b'
test(q['y'])
test(e['b']['l'])
e[3]['v'][4]['e']['t'][-4][-5][0]['s'] = w['p']['x']
m[-4][-4][-3][-9] = 'g'
d[9][6] = o[-3]['x']
length(f[1][-9]['h']['h']['e']['q'][-2])
test(q['y']['a'])
length(g[3]['l'])
a[7][-5]['w'][6]['x'] = 'r'
length(x['m'][6]['c']['u'][-1][0][2]['q'])
o[-3]['x'][-3]['q'][-8][9][-2]['n'] = o[-3]
x['m'][6]['c']['u'][-1][-6][-3]['q']['l']['f'] = -5
s['m']['t']['k'] = 'i'
length(v['i']['l']['m'][4])
a[7][-5]['w'][6]['c']['u']['v']['q']['p']['w'] = z[-7][-7][2][7]
test(v[5]['b'][-1][-4])
a[7][0][0] = 'i'
s['g']['u'][8][5][5]['r'] = 'a'
d[1]['g'] = {'h': {-5: 2}, -6: {'r': {'o': -2}, 'd': {'x': 'i'}}, 'z': {8: {7: 'g'}, 'q': {-9: 'l'}}, 4: {-6: {'u': 'o'}, 'w': {8: -6}}}
t['t']['b'] = d[9][6][-3]['q']['l']
length(i[-2]['d'])
v[3] = 7
length(b[3][-1])
s['b']['u']['r'] = 'l'
length(o[-3]['x'][-3]['q'][-8][9]['m'])
length(h[3]['w'])
w['s'][1] = l[-9]['b'][0][1]['a']
h['i'][-5] = {8: {'a': {'s': 7}, 's': {8: 'l'}}, 'r': {-5: {'q': {'y': -7}, 4: {-7: 'b'}}, -1: {'c': 2}}, 'b': {-8: -9}, -1: {-4: {-9: 'w'}, 'g': {'a': 'm'}}, 'n': {4: -7}}
v[5]['b']['t']['e']['h'] = l
test(e['t']['f']['r'][6])
k['t']['m'] = 'q'
o[-3]['x'][-3]['q']['l'] = 'q'
test(f['o'])
test(q['y']['w'][-7])
m[1][2]['r'][-2][3][6] = 1
test(a[7]['i'])
g['d'][2][-2][-4]['g'][-6]['d'] = {'x': {5: -5}, 3: {-7: 4}, -4: {'t': 'e'}, 'z': {'a': 'w'}, -2: {'m': -8}}
d[9][7]['e'][7]['p'] = v['i']['a']
b[3]['l'][0] = 'm'
b[1][2][8][-2]['m'] = {'y': {1: 'b'}, 'b': {'w': 6}, 'o': {'g': 'o'}}
w['p'][-6][-2] = q['m'][-3]['i']['x']['d'][1]
p[-1]['b'] = 'r'
test(c['j'])
z[-7][7] = {1: {2: 5}, 6: {9: 'g'}}
length(i[-2]['p'])
m[-9][-2][-5] = 6
length(v[-4][-1][-5])
test(m[1][2])
o[-3]['x'][-3]['q'][-8][9][7][7] = 'a'
test(s['b']['u'][1])
g['s'][0]['g'] = 'x'
test(j[4]['r']['v'])
length(r['v'][4])
z['h'][-6][-6] = {1: {9: {-4: 'j'}, -4: {4: 'p'}}, 'r': {8: {'q': 'o'}, 'd': {8: 'm'}}, 7: {'y': {'o': -9}, 'm': {'u': 9}, -4: {-7: 9}}}
length(l)
test(r[7]['u']['v'][4])
test(s[3][9]['e'][8][-1])
y[-7][3][-7]['h'] = 'h'
s['m']['k'][9]['o'][4] = 'o'
g['i']['h'] = 'v'
s[-4][-2] = {-8: {'x': {0: 7}, 3: {'m': 3}}, 's': {'w': -1}, 'j': {'m': 6}, -1: {'w': 'a'}, 'f': {'q': -6}}
j['v'][-4] = 'p'
a[7][-5]['w'][6]['c'][-4] = r[1]['a'][-6]['u']['b']['b']['s']['i']
e['b']['z'][-7] = y[-7]['q']['o']
test(b[3]['n'])
length(z['h'][-6][-6][7]['m'])
d[9][6][-3]['q'] = k['j']
length(i)
v[-4][-1][3]['i'][-5][8]['s']['s'] = {'z': {'s': 2}, 'u': {'c': {'k': -3}, 6: {'e': 'n'}}, -5: {'h': -6}}
z[4]['u']['s']['p'] = -8
test(f[-1])
length(d[-2]['s'])
w['p'][-9][-7] = -2
test(v[-4][3])
a[8] = g[-1]['a'][-9]['x'][-4]['z']
test(e[3]['v'][3][3][3][5][-2])
a[-2] = {'a': {1: {-3: -8}, 7: {-4: 7}}, 6: {-1: 5}, 8: {'d': {-1: -7}, 6: {'m': 'b'}}, 'p': {'s': {3: -1}, 'l': {'y': 'd'}}, 's': {1: 'd'}, -4: {0: {-2: -9}, -3: {'r': -3}}}
h[3][-4]['d'][-4] = u['e']
test(t[-6])
test(b[1][8]['h']['o'])
f[1][7]['n'][-7] = n['c']['j'][9]
e['b'][-5]['k'] = s['g']['u'][-5]['h']
u['n'][-6][7][-4][-7] = 'a'
test(l[6][-4][-3][9][-7][0])
u['n'][-6][1][-4][4] = {'a': {'b': {'c': 3}, 'g': {'f': 6}}, 'h': {9: 'f'}, 'g': {1: 'g'}, -9: {'j': 5}}
test(z[-4]['w']['c']['q'][-6]['e'])
k[7]['g']['b'][-8] = 'l'
z[-4]['w']['c']['q'][-6]['w'] = 7
c[8][-1][-5]['l'] = 'a'
e[3]['b'] = -4
i[4]['f']['k']['a'][-1] = l[-5]['c']
length(x['m'][6]['c'][-4])
j['p'][-4]['e'][8][-1]['x'] = n
length(g['n'][-3])
s['y'] = j[4]['c']
l[6][-4][-5][0]['s'][2] = {'f': {3: 6}, 'l': {-2: {'a': 4}, -9: {'d': 0}}, 'o': {-7: {'j': -9}, 7: {-8: 'x'}}, 'p': {8: 4}, 'x': {'x': 2}, -4: {-2: 'j'}}
e['e'] = {'c': {0: {'q': 8}, 'i': {-1: 'v'}}, -6: {'u': {'m': -4}, 'd': {6: 'w'}}, 'z': {'q': 'w'}, -3: {-3: {'m': -2}, 6: {'g': 'p'}}}
b[1][6][-7] = -5
c[-9][-9][9][6] = x['m'][6]['c']['u']['v']['q']['p']['q']
w['s']['u'] = {4: {8: 'f'}, 6: {7: 'a'}, 7: {'q': 'v'}, 'm': {'u': 'l'}, 'u': {'z': 3}, -9: {'u': 'n'}}
j[4]['c']['q'] = {3: {'a': -3}, 1: {-5: {-7: 4}, 'j': {'n': 'h'}}, 'n': {1: {'n': 7}, 4: {-9: -9}}, -9: {'u': {'c': 7}, 'w': {9: {3: -3}, -1: {'u': 'v'}}}}
test(x[-4][-6][-3])
o[-3]['x'] = 6
test(b[1])
v[-4][3][-1] = -7
length(u)
b[3]['y'][1]['f']['z']['c'] = 2
u[0][-5][5][7]['q'] = {4: {8: 1}, 'o': {'w': 'e'}}
s['m']['t'][9] = {3: {'i': {-1: 8}, 'j': {1: -7}, 4: {4: 's'}}, 6: {'t': {0: {'z': 'o'}, 'l': {'m': 'a'}}, 'n': {9: 7}}}
test(c[-9][-7])
test(n['c']['j'][9])
g['d'][2][-2]['y'][6]['o'][-3][-4] = {0: {-8: 'e'}, 3: {'p': 'm'}, 4: {'e': 'p'}, 6: {3: -4}, 9: {'w': 8}, 'w': {'e': 'y'}, 'y': {'m': 'u'}, 'x': {4: 'q'}, -5: {'p': 8}, -3: {-2: 'c'}}
length(b[3]['r'])
o[-3][-4]['y'][-9] = -4
n['o'] = -9
z[-4] = {0: {6: 'e'}, 5: {'v': 6}, 6: {6: 't'}, 8: {'c': 0}, 'j': {-9: -2}, -4: {3: -1}, -2: {-1: 1}}
o[-3] = 9
o[4] = {-6: {'k': 'k'}, 'b': {'b': 6}, 'r': {'q': {'t': -1}, -3: {-6: 'x'}}, 6: {'n': 2}}
test(w['s']['u']['u'])
s[-5]['z'][-7] = b[1][6]
q['m'] = -4
j['t'] = {-8: {'l': 'd'}, 2: {8: {'f': 'm'}, 9: {'w': 'c'}}, -4: {'g': 'u'}, 'd': {'o': -8}, 'v': {2: -6}}
test(v[-4][3][9][6]['t'])
test(v[-1][-2]['y'][6]['o'])
f['o']['e']['a']['y'] = k['j'][8]['e'][8]
b[1][2][8][6][1]['t'] = 9
e['b'][-5]['k'][-1] = -4
h['i']['f'][4]['r'][-3]['o'] = -4
z[4]['u']['f']['h'] = 'f'
y[0][9]['k'][-4][2][-7] = {'a': {4: {-3: 'd'}, 'v': {1: 'h'}}, 'j': {'v': 'n'}, 'k': {-7: {-8: 'e'}, -6: {5: 1}}, -9: {'r': 3}, 'v': {'i': -2}, 'x': {-9: 'o'}, -3: {'d': 'w'}}
x['m'][6]['c'][-3] = q[-1]
a[8][-5] = {'g': {7: 's'}, 'm': {7: -7}, 'r': {'s': 'l'}, 'v': {'p': {'e': 'e'}, 3: {'n': 'x'}}, 'y': {'u': -5}, -6: {'q': 'e'}, 'z': {-4: 'z'}}
length(m[0][7][1])
j[5]['c'] = 3
c['j'][-7] = n['c']['j'][9]
test(t['t']['b'])
j['v'] = 'y'
test(y)
x[7]['e']['a'] = p['c']['x'][-1]['s']['o']
n['c'][-9]['w'][-9] = 4
o[4]['r']['q']['n'] = {'s': {'r': {'r': {-3: 8}, 'w': {'t': -5}}, -4: {1: {'c': 2}, 't': {'s': {9: 'r'}, 4: {'v': 'b'}}}}, 4: {-7: {3: {-2: 'g'}, -9: {'j': 'g'}}, -2: {'t': 'c'}}}
length(x['m'][6]['c'][-3]['v']['j'][4][-7]['l'])
o[4][6][7] = 'm'
length(r[0][5])
v[5]['f'] = 'v'
t['z'][-7] = 'l'
d[1]['g']['l'] = v[5]['b']
test(b[1][-6][3]['y']['z']['t'][-6])
f[-1]['e'][4]['h'][-9][-5]['w'][-2] = 'g'
h[3]['w'][-1] = o[4]
test(l['a'][-1])
g['s'][-8]['j']['m'] = {'k': {'a': {8: -2}, 8: {3: 'f'}}, 'w': {'e': 5}, -9: {6: 0}}
q['y'][7] = {'d': {8: 3}, 'o': {2: {'m': 'i'}, -3: {-9: 'b'}}}
length(p['k']['a']['o'][0][-2])
x[7][-5][5]['o'][-5] = {5: {'u': 'e'}, 6: {'a': 6}, 'f': {-9: 'a'}, 'm': {-3: -2}, 'o': {8: -6}, 'w': {'z': 2}, -8: {-1: -6}, -4: {'s': 9}, -1: {8: {-2: 'g'}, 'r': {7: 'b'}}}
b[3][3]['v'] = 'v'
length(g['s'][-8][-2])
test(f['k'])
length(i[4]['g']['q'][-6]['e']['h'][-7][0][5])
s[3][9]['e']['s'][0]['g'] = 5
v[-4][3][9][3]['i'][-7] = 'z'
j[4]['c']['q'][1]['j']['n'] = k[7]['g']['b']
d[9][6][-3]['q'][8] = -6
s[3][9]['i'] = 'y'
s[-4]['t'][4] = {'i': {1: {'k': 9}, 3: {-1: 9}}, -4: {'t': 1}, -3: {1: {7: 'w'}, 4: {'g': -1}}, -2: {'q': -7}}
length(u[8][1])
f['o']['e']['h'][3][8]['p'] = -5
v[5]['b'][-1][-4][2] = {'y': {0: {'d': 'v'}, 'm': {'j': 'k'}}, 'x': {'p': 'c'}, -5: {-6: 'w'}, 'm': {-7: {6: 'g'}}, 8: {'p': {'i': 'q'}, 2: {'l': 'o'}, 'x': {6: 'q'}}}
test(h[4][9][1]['h'][-2])
j[4]['r'][-2] = 'a'
length(m[3][0])
p['k']['a']['o'][0][-2][2] = c['i']
x[-4][-6][-3]['a'] = {1: {'c': 's'}, -9: {-9: -5}, 'j': {-5: 'd'}, 6: {'x': 'b'}, -7: {-1: 'u'}}
test(w['s']['v'])
length(m)
b[1][6][7] = {'i': {-8: 'l'}, 'k': {'l': -6}, 'r': {'u': {-1: 'v'}, 'o': {8: 0}}}
a[8][-5]['y']['u'] = g['s'][0]
length(z[-7])
v[5]['b'][-1]['j']['w'][8] = -6
length(z[4]['u'])
length(p['k']['a']['o'][0]['a'])
b[1][8]['h']['o'][6] = 3
u['g'][1] = f[1][7]['n'][-7]
test(i[-2]['p'])
m[-4]['u'] = {-5: {'p': {1: {5: 'k'}, 'b': {'v': 9}}, 2: {-7: -5}, 'o': {4: 'o'}}, 'f': {'k': {'j': {'o': {'k': -8}, 'v': {'u': 'p'}}, 'g': {-9: 8}}, 'd': {'w': 9}}, 7: {'o': {'t': -2}, 'f': {'u': 's'}}}
length(c[-9][-4])
y['m'] = 'l'
y[-7][3][-7] = 5
length(l['s']['a'][-1])
d['z']['k'][-6]['k'] = 1
c[-9][-7][1] = {'c': {5: 'f'}, 'd': {-6: 'b'}, 9: {-8: 'v'}, 'r': {'e': 'n'}, -8: {'z': 'h'}, -6: {'e': 'e'}, 'z': {'q': 'n'}, -2: {'e': 'a'}}
a[-2][6][-1] = d['a']['o']
j['p'][-4]['e']['d'][2] = -8
s['g']['u']['z'][5] = 6
b[1][6][7]['k']['l'] = {'d': {'r': 'y'}, 'w': {7: 3}}
r[7][-4][5] = 4
y[8]['v']['r']['i'][-4][-5]['t'] = {-6: {'y': 0}, -4: {'e': {'d': 'x'}, -2: {'g': 'x'}}, 'l': {'q': {-8: 'w'}, 7: {-3: 'u'}}}
w['s']['k'] = 8
b[3]['y'] = n['v']
w['p']['z'][-6] = n['v']['l']
test(l['b']['p']['x'][-4])
r[1]['a'][-6]['p']['r'] = -4
test(n['v']['l'][-9]['p'])
z['h'][-6][-6]['r'][8]['b'] = {'g': {4: {'x': 'g'}}, -9: {0: {-5: 'm'}, 'h': {7: -6}, 'k': {7: 3}, -1: {'x': 2}}}
c[8][-1][3]['i'][-5] = k['j']['q']
test(k['j']['q'])
z[-7][7][6]['u'] = -1
k[1] = 2
j['w'] = 's'
o[4][6][7] = -8
length(a[-2][8]['d'])
o[4][-6][1] = 'b'
l['u'][3]['l'] = -4
test(o[4][6])
e['e']['z'][-4] = {'o': {8: {-8: {2: 5}, 'b': {3: -5}}, -2: {'a': {3: 'p'}, -7: {4: 'p'}, -2: {8: 7}}}, 'v': {2: {1: {'y': -5}, 'j': {9: 'q'}}, 4: {-4: -9}}}
length(r[0]['x'])
test(f[-1]['e'][4][3]['d'][-1][0][7]['n'][-3])
e['b']['z'][-7]['b'] = {2: {-3: 9}, 'r': {5: 0}}
test(q)
a[7] = v[-1][-2]['y']
j[4]['r']['v']['p'] = r[0][5]
length(j[4]['r']['v']['p'])
s['b']['n'] = 9
z['h'][-6][-6][7][-4][-7] = {'d': {-3: 's'}, 'j': {'v': 'f'}, 'm': {-9: 'c'}, 'o': {-5: 'd'}, 'u': {'i': 5}, 't': {-8: {-8: -8}, 'f': {-7: 6}}, -6: {'z': 'x'}, -3: {-4: -3}}
g[-1]['a'][3] = {2: {'i': 3}, 4: {-8: -6}, 6: {'n': 0}, 'u': {-3: 4}, 'y': {'k': 2}, 'z': {-1: 'n'}, -1: {4: 'b'}}
length(h[4][9][1]['h'][4]['z'][9])
f['o'] = 'p'
f[-1]['t']['b']['t']['e']['h'][-5] = 'c'
length(u[8][1][8][-5]['v'][3])
w['p']['z']['u'] = {4: {'x': {'r': -1}, -4: {-7: 'z'}}, 6: {'e': {'r': 'b'}, -3: {'g': -1}}, 'v': {2: {'c': 8}, 'v': {'r': -1}, 'f': {'a': -1}}}
n[4][4][-1][-7]['o']['e']['d'][9] = t['z']
length(v[-1][-2][-4]['g']['z'][8])
test(x['m'][6]['c'][-3]['v']['j'][4][-7]['y'])
length(d['a']['y'])
y[0][9]['k'] = k['j']['q']
s['g'][7][1]['u'] = {'x': {-8: 1}, 'z': {-4: 'e'}}
y[8]['y'] = 'k'
length(q['y']['w'][-7])
length(r[7][-4])
test(c['s'][-9][0][-6]['g'])
length(u['n'])
length(q)
s['g'][7][6]['h'] = 1
test(d[-2]['s'][7][-8]['c'])
test(v[5]['b'])
length(p[-1][3])
h[4][9]['v'][0] = i
f['k'][-3]['c'][6]['j'] = 1
test(u['g'][1])
t['z'][2] = -8
length(p['k']['a']['o'][0][8])
test(u['m'][4]['r'][8]['v']['r']['y'][-6][9])
j['p'][-4]['e']['s'][0][3] = {-4: {'x': {'g': 0}}, 5: {'a': {'t': 0}, -9: {7: 'h'}}}
test(k['j']['p'])
g[-6]['b']['r']['o'][4][6]['n'] = -1
r[1][9] = 'j'
a[-2][-4][-3][7] = 1
i[-2]['d'][-4] = t[-6][3][6]
test(r[0][1][6])
t['v'][-2][4] = 'b'
v['y'] = a[7][6]['o'][4][-6]
l['e'] = -2
test(n['c']['j']['d']['d'][6][8][0])
e[3]['v'][0]['p']['w'][-5] = 'n'
length(l[0]['g']['m'][7]['q']['o'])
h[-8]['r']['o'][4]['b']['b'] = 's'
test(o[4][6])
k['j']['p']['h']['r'][9] = 0
f['k']['g'][4][-5]['i'][9] = l['s']['v']['p']
test(r[0][5])
u['m'][4]['r'][-1] = {8: {'a': 7}, 'y': {'d': 2}, -3: {-8: 'o'}, 6: {'u': -9}}
length(y[8]['v']['s']['t'])
length(k[7][-7])
t['v'][-2]['q']['e'] = {'e': {9: {-4: 'd'}, 6: {-8: {-1: 'g'}, 5: {8: 7}}}, 5: {7: 'z'}, 9: {'q': -1}, 'j': {1: 'b'}, 'l': {'n': -9}, 'n': {'l': -7}, 'v': {'d': 'k'}}
test(b[1][8]['h']['o'])
u[8] = q[-1]['v']['j'][4][-7]['c']
b[1][8]['h']['o'][3] = -9
u[0][-5][5][1][0]['p'][-1] = r[7]['u']['v'][-8]['q'][4]
b[1][8]['h']['o'][3] = z[-7][7][6]
test(j['p'])
h[3][-4][7]['s']['c'] = r['v'][4]
i[4]['g'][3]['y'][-5][8]['n'] = {'y': {4: -9}, 'h': {-6: 'j'}, 2: {'x': {'k': 9}, 'r': {'r': -9}}}
length(q['y'])
l['u'][-2][1] = 4
test(f[1][7]['n'][-7])
length(v['y'])
l['m'][-8]['i'][-6]['i'][9] = {'q': {0: {'a': 5}, 'k': {'h': -4}}, -5: {-1: 4}}
h['i']['q'] = 'q'
test(x[-4][-6][-3]['a']['j'])
n['c']['j'][9][5] = 'k'
r[7] = g['t']['r']['o'][4][6]
x[7][-5][-8] = -6
k['j'][-5] = {'a': {'p': 7}, 1: {'n': 'j'}, 'g': {7: 7}, 7: {'t': -8}, 'm': {2: 7}, 'u': {'r': -8}, 'w': {4: 'b'}, -5: {9: -6}, -3: {'m': 'c'}}
test(a)
test(y[8])
length(x[7]['z'])
length(k[7][-7][5])
test(t[-6])
h[3] = q[-1]['v'][-5][7][9]
s[-5][-6]['c'] = 'p'
m[-4]['h'] = {'i': {-1: 9}, 1: {'b': 'n'}}
length(t[-5]['h'])
x['m'][6]['c'][-4]['r'] = {'i': {'f': -1}}
d['h'][3][8][-7] = r['v']
f[-1]['t']['b']['t'][-3] = j['p'][-4]['e']['i'][7][-9][8]
test(u['n'])
test(f[1][7]['n'][-7])
g[5][-3] = 'a'
v['i'][9][7]['a'] = f[1][7]['n'][-7]
length(v['y'])
z[-4]['j'][-9] = 'n'
v[-1][-2][-4]['g'][4]['w'][3] = 7
y[-7]['y']['d']['a'][-7][-3] = {0: {6: 'i'}, 'e': {'f': 'i'}}
length(s['m']['k']['q'][-1]['b']['r'])
e['t']['f']['p'][-3] = i[4]['f']['k'][6]
test(v)
p['c']['x'][-6][-7]['c'] = t[-5]['h']
test(a[7][6]['o'][4][-6])
u[8]['v'] = -5
test(h['i'][-5])
j['t'][-4]['s'] = f['k']
test(h[-8]['r']['o'][4][-6])
r[0]['g']['g'] = -6
y[0]['f'][5][7]['e'] = z[-4][6]
a[7] = 's'
v[-1][-2]['q'] = 1
i[-2]['d'] = -2
length(m[0][-7][2][7])
z['h'][-4][6][7]['g']['b'] = {1: {'m': {'d': 0}, -2: {'y': 8}}, -6: {0: {'v': 'u'}, 'n': {'r': -2}}, 6: {'a': {-7: 9}, 2: {'q': -3}}, 'g': {'z': 0}}
y[0][-1] = h['i']['f'][4][6]
b[1][6][7]['i'][-8] = 1
b[1][8]['h']['o'][3][9] = 7
m[0]['u']['t']['b']['f'] = 1
b[3]['y']['l'][-9][3][-4]['x']['y'] = 6
test(g['n'][8][6])
l['s'][-1][-7]['v'] = {-6: {-8: 8}, -4: {'r': 6}, 'v': {'k': 7}}
d['z'][-7][5][-8]['e']['j'] = l['b']['p']['x'][-4]
test(y[-7])
f['k']['e']['k'][-8]['l'] = 'w'
c['e'][-9][1]['s'][-9]['i'][4] = r['v'][4]
test(e['b'])
length(s['g'][7][6])
length(m)
s['y']['q'] = -9
length(s['m']['k'][9][-1][6])
w['p'][-1]['k'] = 'j'
t[3] = -2
length(z['h'][-4][6]['j']['p'][0][0])
d[-5] = 'a'
m[-5]['v']['s'][-9]['i']['k'] = 0
length(o[4][6])
test(n[4][-2][1][6][7]['k']['l']['d'])
test(c)
test(w['p'][-9])
c[8][3][9]['p'] = -2
length(w['s']['g'])
x[-8] = q[-1]['v'][7][8]
length(x['m'][6]['c']['u'][-1][0][2]['q'])
q[-1]['w'] = y[0]['f'][5]
m[-4]['u'][7]['f']['u'] = 'n'
x[-8]['f'][-6]['r'][7] = 'y'
test(s[-5]['y'])
a[-2]['a'][7]['x'] = {'x': {'w': 'j'}, 3: {5: -8}, 'd': {-8: {-9: 1}, 's': {'h': 'i'}}, -1: {'t': -1}, -9: {'n': 0}}
c['i'][9] = p['c']['x'][-1]['s']
h[3]['e'][-6]['b']['r'][8]['b'] = -8
b[3]['l'][0] = {3: {0: 'x'}, 7: {'i': 9}, 8: {'z': 1}, 'l': {-8: -6}, -9: {9: 6}, -7: {-3: 'o'}, -3: {-2: 'y'}}
m[-9]['c'][-8] = -4
u['e'][-5]['i']['y'][4]['f']['k'][3]['y'] = 'c'
k['j']['p']['h']['r']['v'] = {-4: {'u': 9}, 'l': {0: {3: 'p'}, 'm': {'z': -7}}}
y[8][1]['i'] = 'o'
length(l[-9])
test(n[4][-2][3]['f'])
q['y'][7]['d']['u'] = {'x': {-7: {'f': 'k'}, 'w': {-8: 'm'}}, 'e': {'z': {7: 'q'}, 'n': {'u': -6}}, 't': {3: 3}, 'v': {-8: 'r'}}
e['t']['f']['r'][6]['l'] = b[1][-6][3][3]['f']
l['u'][3]['h'] = -6
w['s']['b']['r'][-7] = 'l'
test(a[8])
d[9][6][-3]['q'][-5]['m'][2] = u['n'][-6][7]['y']
m[-9]['c'][-7] = s
e[3]['v'][4]['i'][-8][6]['i'] = {-4: {-9: 't'}, 'w': {'b': {'r': 7}, 'u': {'e': 'i'}}, 7: {'m': 'i'}}
j[4]['r']['v']['f']['d']['y']['v'][8] = {'a': {'p': {-7: 'z'}, 6: {'r': 'o'}}, 1: {'h': 'h'}, 3: {-7: 'c'}, 'g': {'r': {-3: 0}, 4: {5: -8}}, 9: {-7: -8}, -9: {'e': -4}, -7: {4: 'p'}, 'h': {-2: 'i'}}
m[0]['u']['z'][2] = 'o'
u['m'][4]['r'][-1][6]['u'] = -7
g['d'][7] = 'd'
length(u[0][-5][5])
test(j['t']['d'])
test(k['j']['p']['s'])
f['o'] = 5
length(j[-1])
j['w'] = g[5]
test(v[-4][3][9][6]['t']['l'])
m[-4]['h']['i'][-1] = -6
length(p)
s[-5]['y']['u'] = 'a'
q['y']['w']['p']['q'] = 'c'
length(l)
g['t']['r'][8]['v']['r']['y'][-6][4]['o'] = h[3]
test(r['v']['a'])
k['t'][4][-1] = 6
u['n'] = -5
l[-9]['b'][0]['o'][5]['v'] = {8: {'a': {'b': -7}, 'x': {'i': 'r'}}, 'f': {-8: {5: 8}, 'o': {3: 'e'}}}
length(s['y'])
length(a[-2][8]['d'])
m[-4][-4][-3][-9] = -8
test(d['a']['o'][-1])
test(v['y'])
z['h'][-4][6][7]['g']['b'][1]['m']['d'] = 3
d['z']['k']['t']['i'] = 3
length(l['m'][-8]['i']['m']['u'][-5]['i'][9])
t['v'] = -5
f[-1]['t'][-3] = 'p'
test(c['e'][-9][1]['s'][9][-2][7])
length(g['i'][0])
u['g'][1]['c'][3] = 't'
test(k['j']['p']['s'])
x[-8]['f'][-6]['r'][7] = p[-1]['h']['u'][4]['k']['e'][-1][0][2]['q']
length(h[-8]['r'])
h['i']['f'][-3] = 6
test(l['u'][-2])
k['t'][-9]['p']['q']['e'] = 0
test(l['s'][-1]['k'])
a[8][-5]['g'][7] = 's'
e[3]['v'][-4][-9] = 'o'
s['y'][3] = 'g'
p['k']['a']['o'][0][-2][2][9]['d'] = {8: {-7: 'j'}, -2: {'q': {7: 'j'}, 1: {4: 'w'}, 'b': {'x': 'g'}, 'e': {-5: {'o': 0}, 't': {'g': -9}}, 'n': {'e': 4}}}
b[1][2][8]['j']['u']['o'] = 8
y[3] = {'y': {1: 3}, 'c': {'a': {'p': 't'}, 'u': {'h': 'f'}}, 'r': {'e': 'x'}, 'd': {5: 'f'}, 'z': {'a': {'g': -2}, 'p': {-9: 5}}}
f[0] = -9
test(r[1])
length(a[-2][-4][0])
t['t']['b']['f'] = {'d': {4: 7}, 'f': {'f': -2}, 8: {'z': 'r'}, 'h': {9: -6}, 'm': {-3: -1}, 'p': {8: 'e'}, 'u': {'q': -4}, 't': {'j': 'i'}, 'v': {'d': 5}, -2: {'p': 0}}
o[4]['r'][-3]['h'] = 6
w['p'][-9]['f'] = 'j'
test(g['d'])
x[-4][-6][-3]['a'] = {'i': {-5: {1: 'o'}, 'j': {'e': 'g'}}, -2: {-6: 5}}
t['t']['b']['f'] = {'i': {2: {-6: -6}, 'e': {6: -4}}, 'y': {-9: 9}, -6: {4: {-3: 'u'}, 'g': {'y': 'z'}}, -1: {'t': 'j'}, 6: {-4: 6}}
d['z']['k']['t'][1] = 3
o[4]['b'][-5] = {'h': {1: {'q': 2}, 'e': {'y': 'l'}, -9: {'x': 'e'}}, -2: {-8: {-4: 'j'}, 'b': {'t': {'h': 'i'}, 'o': {5: 'u'}}, 5: {-5: 5}}}
length(h[-8]['r'])
length(y[3]['r'])
f['k'][-7][0][3]['w'] = 1
length(t['s'][-1]['x'])
c[-8][0][1]['a']['q'] = {'s': {'k': {1: 4}, 'j': {'y': 6}}, 6: {6: {'y': {-4: 9}, 'c': {-9: 'i'}}, 'g': {3: 4}}, 'o': {'j': {-7: -2}, 4: {'y': 3}, -9: {'h': 4}, 'v': {'m': 2}}}
length(l['m'][-8]['s']['a']['c'])
k['t'][4]['k']['e'][8] = m[-4][-4][-9]['b']
length(i)
d[1]['g']['z'] = v[-4][3]
length(u[8])
e['t']['f']['p'][-3]['o'] = {9: {9: {-4: 'm'}, 'z': {'n': 'h'}, 'g': {3: 'k'}}, 'b': {'t': 4}, 5: {-6: {-8: 'i'}, 5: {-6: -9}}}
length(b[3][-1])
i[4]['g'][3] = {-7: {8: {'n': 'e'}, 6: {'o': 1}}, 'x': {8: -9}, 5: {4: {'b': -4}, 6: {1: 'a'}}, 'd': {8: {'b': 'r'}, -2: {8: -8}, 6: {'d': 'c'}}, 'p': {'b': 'e'}}
n['v']['l']['p'] = 'o'
length(t['s'][3][9])
test(v['i'][-9]['y']['y'][7]['o'][2])
s[-4]['d']['h'] = -9
length(i[4]['f']['k'][6]['o'][9]['z'])
e[3]['v'][3]['f']['i'][7][9] = j[4]
n['c'][-9]['j'] = {2: {'l': {'j': 'o'}, -2: {-7: 5}}, 5: {-7: {-7: {'w': 'e'}, -3: {-8: 't'}}, 'b': {'r': -3}, 'e': {-3: 3}}}
h[-8]['r'][8]['v']['r']['y'][-6][-5] = 3
o[4][6]['y'] = a[-2]['s']
e['e']['c']['i']['k'] = 2
r[1]['a'][-6]['o']['d'] = {'c': {0: {'u': {-4: 'f'}, 'o': {'r': -5}}, 6: {'s': -8}}, 6: {'n': -9}}
length(j[4]['r']['v']['m'][6])
r[1]['f']['o']['z'] = 5
length(v[-4])
x['m'][6]['c'][-3]['v']['j']['e'] = 'i'
r[7]['y'][1] = -5
test(p['c'])
length(m[-5])
b[3]['f']['q'] = 'm'
w['s'][1]['q'][-9] = -5
test(n[4][4][-1]['u'][-5]['h'])
k['j'][-5]['l'] = {'c': {'z': {'z': 'e'}, 'u': {-2: 'd'}}, 'j': {'c': 3}, 'g': {'x': 'p'}, 7: {'o': -6}}
test(g['d'])
length(v[-1][-2])
o[4][6]['y'][-9] = {0: {-6: {9: {'y': 'u'}, 'l': {1: 'i'}}, 'l': {-9: 'l'}}, 3: {'m': -3}, 7: {-3: 'w'}}
a[8][-5]['v'][3]['u'] = f['k']['e']
e['t']['f']['p']['s'][5][-1]['r'] = 2
length(e['t']['f']['p']['s']['t'])
i[4]['f']['k'][6]['o'][5][-6][-9] = 'n'
test(a[8][-5]['v'][3]['u']['k']['m'])
length(m[-9][-2])
test(m[-4]['h']['i'])
length(b[1][2][8][6])
r[7]['d'] = b[1][8]['h']['o'][3]
length(u)
test(y[0]['f'][5])
length(t['z'])
v[5]['b']['t'][-3][-1] = u['g']
test(x[-8]['k'])
n['c'][-9]['w']['l'] = 'b'
test(a[-2]['s'][-9][3])
k['t'][-3] = -7
test(r['v']['a'])
test(r['v'][4])
q['y']['x'] = -1
y[8][-8] = -9
o[4]['r']['q'] = 'd'
length(z[-7]['u']['z'])
i[4]['g']['q'][-6]['e']['z']['d'][-2] = -1
t['t']['b']['f']['i'][2][-6] = -8
test(f[1])
test(s['g'][7][6])
x[-4][-6][-3]['a'][-2][-6] = {'m': {'e': 2}, 'l': {7: 0}, 'o': {-3: -7}, 'q': {'v': -2}, 'y': {'v': 0}, -8: {'h': 'x'}, -4: {-5: 'l'}, -2: {'o': {'f': -6}, -9: {'n': -2}}}
length(o[4]['r'][-3])
length(h[3]['e'][-1]['a'][-9]['x'][-4]['z'][-5]['y']['u'][3][5]['a'])
x[7][-5][5]['y'][7] = n['c']['j'][9]['c']
test(u['m'])
w['s'][1]['q']['s']['k'][2] = -4
b[1][-7]['h'] = -8
length(c['j'][-7]['c'])
v[-4][-1][3][-8]['r'][8]['v']['r'][3]['f']['u'] = l['b']['p']['x'][8][0]
v[5] = r[7]
o[4]['b'][-5]['h'][-9]['m'] = i[-2]['p']
length(v['y'])
m[-9]['c']['n'] = 'q'
test(a[-2][6][-1])
n[4]['s'] = {'g': {-4: -4}, 'd': {'f': 9}, -2: {-7: {'x': 5}, -9: {-5: 8}}}
s[-4][-3][-2] = -9
d[1]['g']['l'] = 'k'
r[0]['x'][-4][9] = -5
g['d'][7] = 1
u['e'][-5]['u']['f'][8] = -9
test(x[-4][-6][-3]['a']['i']['j'])
length(j[-1]['s'][6][-3]['c'][5])
length(t['s'][-1][3][-8]['r'][-1]['y'])
x[7]['z']['j'][6] = 'x'
test(d['a'])
b[3]['y']['l'][-9]['p'][6] = g[-6]['b']['r']['o'][4][6]
r[1]['z'][1]['c'][-3][-2][3][7]['o'][1] = z['h'][-6][-6][1][-4][4]['a']['g']
length(e['t']['f']['p']['s'][5][-1])
k[7][-7]['k'] = n['c']['j']['o']
r['v'][4]['e'] = g
h[-8] = -3
length(n['v']['l'][-9]['p'][6]['d'])
length(g['d'])
length(t[8][5][5])
z[-7]['u'][8][5][-2] = r[7]['y'][-9][3]
g['d'][7] = {'j': {'o': 'w'}, -4: {9: {-8: 'x'}, -3: {'s': 9}}}
v[5]['y'][-9][7][-3] = 'c'
t[8][5][5]['r'] = 's'
j[5]['o'] = 0
u[8]['v'] = 'w'
t[-5]['i'][9]['k'] = -7
q[-1]['w']['t'] = 'w'
y[-7]['q']['b'] = z[-4][8]
a[8][-5]['g'][7] = {2: {9: {'z': 'z'}, -1: {5: 'k'}}, 3: {'k': 'o'}, 'd': {'g': 'i'}, 'k': {3: 6}, 'n': {'x': {'t': 9}, 2: {6: 'n'}}, 'y': {'z': -3}, -6: {'w': 'y'}}
p['k']['a']['o'][0]['d']['l'] = n['v']['l'][-9]['p']
q[-1]['w'][-4][4] = 'a'
o[4][6]['y'][-9][0] = 'h'
h['i']['f'][4]['r'][-3]['t'] = {'c': {-1: 'o'}, 'r': {9: 7}, 'e': {-6: 6}}
x['m'][6]['c'][-3]['w'][-3]['w'] = m
length(u['m'][4]['r'][8]['v']['r']['y'])
c[8][-1]['i']['x']['c']['v'][-5][-2]['y']['d'] = {'q': {-4: {'b': 2}, 'g': {8: 6}}, 't': {-8: {'v': 7}, 'd': {'x': 'w'}}, -2: {'v': 'z'}, 'v': {7: 'k'}}
length(d['z']['k']['t'])
length(q)
length(t['z'])
p['k']['a']['o'][0][-2][2][9]['o'][-8] = d['a']['y']
x[-8]['k'][6] = 't'
test(w['p'][-9])
l[6][-4][-5][-2][6] = 4
c['s'][9][2][0][-6] = 't'
g['t']['r'][9] = 'c'
length(v[-4])
length(m[-4]['u'][7]['o'])
i[-2]['p']['h'] = {1: {1: 'z'}, 'i': {'y': {5: -7}, 'q': {'s': 'c'}}, 9: {'w': 'b'}, 'n': {'b': -7}, 'z': {'t': -2}, -4: {1: {1: -7}, -9: {-6: 'f'}}}
h[4] = {-8: {'c': 6}, 1: {'n': 5}, -4: {'q': -7}, 'l': {'b': 'q'}}
length(f['k']['g'])
length(w['s']['u'][-9])
w['p'][-6][-2][8]['b'] = b[1][-6][3]['y'][-6][4]['o']['e']
a[-2][8][6]['m'] = 'd'
length(f[-1]['e'][4][3]['d'][6])
length(f['k'][-3]['c']['z'])
i[-2]['p']['h'][9]['l'] = 'a'
i[-2]['p']['h']['n']['b'] = 'j'
length(a[8][-5]['y']['u'][3][-4]['x'])
r['v'][4]['e']['i'][0][-9] = j['w']
length(v['y'])
test(g[-1]['a'][-9]['x']['d'][1][-6][-2][4]['s'])
test(g[5])
length(k['j'][-5])
length(g[5])
length(p['c']['v'][-5][-2])
a[-2]['p']['l']['y'] = t
test(d[-2])
k['t'][4][-1] = a[-2][6][-1]
length(f)
u['e'][-5]['u']['f']['s'] = {'d': {'a': {7: 'c'}, 'y': {-1: 'z'}, 's': {4: 'x'}, 'o': {-4: -2}, 'g': {5: 1}}, 'o': {1: {'u': -5}, 7: {'w': 6}}}
test(l[2]['d'][2][8][6][2])
n[4][4] = -4
p['k']['a']['o'] = a
test(f['k'][-7][0]['c'])
length(r[7]['d'])
s['g']['u']['t']['b']['q'] = 's'
test(c[8][-1]['x'])
q[-1]['v'][7][8]['k'][6] = {'h': {0: {'g': {3: 'o'}, -2: {8: -2}}, 4: {4: 'u'}}, -3: {'c': {'z': -6}, 4: {1: {'f': 4}, -9: {'t': -5}}}}
a[8][-5][-6]['q'] = c[-8][0][1]['a']['q'][6]['g']
test(g['i'][0][-9])
t[8][5]['d'] = 8
length(r[0][6])
test(i[4]['g']['q'][-6]['e'][-2]['s'])
r['v'][-7] = {-8: {'m': {5: 'u'}, 'n': {'p': 'w'}}, 1: {'q': -4}, 'c': {'b': {0: 't'}, 'g': {'b': 'd'}}}
g[5]['a'] = -2
x[7]['z']['j']['t'] = 'f'
d['a']['o'][-1][0] = e['t']
test(v[5]['d'])
p[-6] = v[-1][-2][-5][4][-2]['l']
test(p[-6])
test(t[-5]['i'][9])
p['c']['x'][-6][-7]['c'][3] = {4: {-4: 's'}, -4: {-8: {'p': 6}, 'm': {'q': 'c'}, -9: {-1: 1}}, 't': {'s': {'x': 'z'}, 'b': {-5: -8}}, 7: {'q': {'h': 'f'}, -7: {3: 9}}}
u['m'][4]['r']['o'][4]['b'][-5]['h'][1]['q'] = h[4]['l']
b[3][7][2][2][-6] = 3
j['p']['w']['q'][-3][-5] = 'w'
q[-1]['v']['j'][4][-7][7]['a'] = l['u']
h['i']['f'][4]['r'][-3]['t']['r']['t'] = {'a': {'a': -7}, -8: {-2: {6: 't'}, -9: {'d': 'n'}}, 'w': {'p': {'f': 'b'}, 4: {'p': -2}}}
n['c'][-9]['c']['z'] = -7
j['p'] = {'x': {-6: -8}, 3: {'t': -7}}
test(w['s']['g'])
length(g[-1]['a'][-2]['q']['z'])
test(k['t'][4]['k']['e']['v'][4])
y[0][9]['k']['a'] = -3
d[1]['g'][-6]['d'][-2][0] = 'x'
v[5]['d'][9] = n['c']
length(o[4]['b'])
c[-8][0]['t']['q']['s']['j'][8] = 'i'
z['z'] = {'p': {'c': 4}, -6: {1: 'r'}, -5: {'h': 1}, 'u': {'j': 'd'}, 9: {8: 'f'}}
n[4]['s'][-2][-9][-9] = 0
v[-1][-2][5]['p'] = 4
u[0][-5][5][7]['q'][4][-2] = 'z'
i[4]['f']['k']['h'][4] = {6: {-2: 5}, 7: {'j': 4}, 'h': {-8: 'x'}, 't': {'g': -5}, -8: {9: -7}, -1: {'v': 2}}
s['m']['k'][-8]['y']['j'] = 'y'
m[-5]['v']['j'][-7]['c'] = {-6: {'x': {6: 'j'}, 'z': {1: 'j'}, 'l': {'i': 3}, -2: {'y': 'i'}}, 'j': {4: 'l'}, 'v': {'a': {3: {9: 'l'}, 'f': {'m': 5}}, 5: {-7: {5: 't'}, 's': {-2: 'e'}}}}
test(c)
test(t['z'])
test(o[4][6]['d'][9]['j'][9]['c'][-6]['l'])
test(r[1]['f'])
x[-4][-6][-3]['a'][-2] = 'f'
test(r)
h[3]['e'][-6]['b']['r']['o'][4][-6][3] = {0: {0: {'b': -2}, 'd': {'f': 'o'}}, 6: {'b': 3}, -9: {'g': 8}}
f['k'][-3]['c'][-3][-2]['z']['t'] = 'u'
b[3]['x'] = 'u'
x[-4][-6][-3]['a']['i'][-5][1] = b[1][8]['h']['o'][3][9][-9]['j'][5][-7][-7]
n['j'] = 7
x[7]['l']['d']['m']['d'] = 't'
length(t)
length(f)
a[8][-5][-6]['q']['l'] = 'k'
j[-1]['s'][6][-3]['c'][2]['r'] = -2
length(z['h'][-4][6]['j'][-5][-5])
test(b[3][7][2]['f'])
v[5][7] = {8: {'p': -7}, -7: {2: {'i': -9}, 'm': {'i': {'j': 't'}, -9: {'i': 'x'}}}}
z['h'][-6][-6]['r'][8]['b']['g'][4]['x'] = q
length(e['t']['f']['p'])
d['z']['d'][-2] = l[6][-4][-5][9]['v']['r']
test(t['z'])
length(w['s'][-3]['c']['e']['s'])
length(v[-4][-1][-3]['s']['j']['m']['c'])
m[-5]['v'][-9]['o']['o'] = 'm'
length(j['t'][2][8])
o[4]['r'][-3]['t']['e'][7] = -3
v[-1][-2]['y'] = 8
c[-8][0][6][4][-2][-5]['r']['x'][3][3][4] = {8: {'a': 'j'}, 3: {'b': 9}, 'u': {'f': 'd'}, 'w': {'t': 2}}
length(l[2]['d'][2][8])
o[4]['r'][-3]['t']['r']['t']['w'] = 'e'
test(e[3]['v'][-4])
w['s']['g'][0] = 'y'
length(m)
length(f[1][7]['n'])
j['w'][7] = z['z']['u']
length(p)
w['s']['b']['r'][-3] = 1
b[1][-6][3]['y'][-6][9] = 5
i['o'] = 'o'
length(o[4][-6][3])
test(p['k']['a']['o'][8][-5]['z'])
n['c']['j']['o']['v'] = 'f'
length(c['j'][-7])
length(z['h'][-4][6]['t'][4][-1]['h'])
k[7][-7]['k']['v'] = 'q'
test(e[3]['v'][0]['p']['j'])
test(c['e'])
u['p'] = p[-1]['h']
x[-4][-6][-3]['a'][-2] = v['y'][3][0]['d']
test(y[-7]['q']['o']['b'][2])
length(f[1])
b[1][6] = i[-2]['p']['h']['i']['q']
b[3][3][4][8][5] = 3
b[1][8]['h']['o'] = 'k'
s['g'][7][1]['u']['x'][-8] = 'x'
test(g['s'][0][3][5]['a'])
b[3]['n']['p'] = u[8]
p[-6][-8] = {'a': {3: 'g'}, 1: {'l': -6}, 7: {2: 3}, 'h': {'u': {8: 'c'}, -2: {'f': 2}}, 'k': {-9: 'a'}, 'p': {'v': 'd'}, 'x': {-9: 4}, -5: {1: {7: -9}, -7: {'n': 'y'}}}
w['s']['v']['k'] = 'v'
k['t'][-9]['p']['p'][-4][4][0] = 'z'
test(w['s']['g'])
t[-6][-9]['x'][-4]['z'][-5]['y']['u'][3][-4]['x']['g'] = -4
e['b']['z'][-7]['b'][2][-3] = -3
s['b']['u'][-5]['h'] = c[-8][0]['t']['q']['o'][4]
w['p'][-6][-2]['z']['m'] = 2
length(o[4]['b'][-5]['h']['e'])
e['t']['f']['p']['s'][5][-1]['r'] = q['y']['w']['p']
test(o[4]['b'])
test(b[1][8]['h'])
test(p[-6][-8]['a'])
r[7]['y'] = {'h': {2: {'d': 'u'}, 'b': {'q': -2}}, 2: {'c': {'j': 'm'}, 'g': {'t': -1}}, 'b': {3: -2}, 9: {'q': {1: 1}, 'v': {'s': -7}}}
e['e'] = 'y'
test(r['v']['a'])
z['z'][9][8] = 'l'
test(e[3]['v'][4]['i'])
v[-4][-1][-5]['q'] = d[1]['g']['h']
g['n'][-3][3][-3] = 'q'
length(t['t']['b']['f'][-6]['g'])
length(o)
v['y'][3][6][-7] = l['m']
length(z[-7]['u'][8][5][5])
l[2]['d'][-6][3]['y']['z']['t']['x']['e'][4] = g[-6]
j[-1]['w'][-6][-7]['i'] = 'g'
length(z[-4][5])
test(v[5]['y']['h']['b'])
test(e[3]['v'][-4])
t['t']['b']['f'][-1]['t'] = -8
o[4][-6][3][-9]['g'] = 's'
test(h['i']['f'][4][-6][3][0]['d'])
r[7][7][-7]['m'] = 5
test(r[7][7][8])
length(h[3]['e']['d'][7][-4][9])
z[-7][7][1]['u']['z'][-4] = -2
length(e['t']['f']['r'][6]['l']['u'])
i['e'] = 9
z['z']['p'] = {0: {'a': {'g': 1}, 3: {'l': -8}}, 'k': {0: -5}, 'r': {-6: 's'}, 'e': {5: -4}, -2: {-7: -5}}
v['y'][3][-9]['v'] = {0: {'c': {'o': 'w'}, 'm': {'v': -8}}, 'c': {'z': -8}, 'm': {1: {'q': 'p'}, 's': {'i': 3}, 'u': {'x': 'h'}, 't': {'o': -5}, 7: {-4: 'b'}}, 5: {1: {'j': 'n'}, 7: {-4: 'y'}}}
length(u['p']['a']['c'])
i['o'] = -6
i[4]['f']['k']['h'][4][-1]['m'] = a[-2]['a'][1]
test(g['d'][7]['j'])
test(o[4])
k[7][-7]['k']['v'] = 'f'
test(b[3]['t']['l']['u'])
b[3][7][2][2]['f'] = {'e': {-1: 'r'}, -2: {'c': -2}}
l['a'][-1]['a'] = 'f'
test(n[4]['s']['d'])
y[0]['f'][5]['s'][8]['x']['u'][4]['k']['e'][8]['y']['z'] = q[-1]['w']['a']['v']
length(d['z']['k']['t'])
length(m[-4][-4]['a']['z'][-1])
d['h']['c'] = 2
f[1][7]['n'][-7]['c']['v']['a']['f'] = 'b'
length(o[4])
length(l['a'][-1])
test(p['k']['a']['o'][8])
s['g'][7][1]['u']['z'][-4] = 'w'
length(p[-1]['h'][-9]['i'][8][3]['t'][-3][-1][1]['c']['v']['a'][3])
test(n[4]['s'][-2][-7])
length(k['j']['p']['h']['r']['v']['l'][0])
k['t'][-9]['n'][-7] = 'l'
l[2]['d'] = 'd'
test(g)
a[-2][6][-1]['i'] = m[3]['k']['k']
l[2]['z'] = 'o'
test(s['y'])
q[-1]['v']['j']['g'][-2][1][6]['s']['s'][3][7][2][-4]['x']['p'] = 3
c['j'] = {-7: {'c': -4}, 'v': {'v': 'k'}, -2: {'z': 0}, 'n': {'y': {'n': -8}, 4: {7: 'e'}}}
t[-6][3][2][8] = e['b']['l']
test(s['y'])
length(s[3][9]['e']['s'][0][3][-4]['x'])
k[1] = {0: {-6: {-7: -6}, 'f': {'q': 'g'}}, 'q': {'u': {'e': 'f'}, -4: {'t': -5}}, 'h': {7: 6}, -8: {0: {5: -5}, 'e': {'n': 9}}, 7: {6: 'p'}}
length(e[3]['v'][-4])
test(a[-2][-4][-3])
length(f[-1]['t']['b']['t'][-3][-1])
length(o[4]['b'][-5][-2][5])
v['i']['a'][-9][-2][-9] = {'y': {'z': 'n'}, 'b': {'c': {-1: -5}, -9: {-4: 'x'}}, 't': {'i': {3: 'v'}, 'l': {2: 'u'}}, 5: {-7: {'u': 'u'}, 1: {'q': {'b': 'i'}, 'j': {-2: -5}}, 'n': {-3: 0}}}
j['p'][3][-6] = {2: {'w': 'l'}, 5: {3: 4}, 'i': {-2: -1}, 'm': {'z': 4}, 'v': {'e': -2}, -8: {'b': -8}, 'x': {-2: 8}, 'z': {2: -5}, -4: {-7: -4}, -3: {-3: 2}}
w[-4] = l[-9]['b'][0]['o']['l'][6]['h']
b[1][6]['s'] = 'z'
test(e['t']['f']['r'][6]['l']['u'])
length(r['v'][4]['e'][-1]['a'][-2][1]['z'])
y[3]['j'] = -7
length(c[-9])
test(h[3]['e']['d'])
i[-2]['p']['h'][9]['w'] = 4
k[1][7]['n'] = q['y']['a']
test(a[-2][8]['d'])
x[-4][-6][-3]['a']['i'][-5][1]['w'] = g['d'][7][-4][9]
a[-2][6][-1][-1][0]['f']['p'][-3]['o']['b']['t'] = 7
w['s']['u'][6][7] = 'u'
o[4]['b'][-5][-2]['b']['t']['h'] = {'h': {3: -4}, 'm': {-2: 'x'}, -9: {'g': 6}, -8: {1: 'h'}, -7: {-3: -6}, -4: {1: 's'}, -3: {-4: 0}}
s['a'] = 'y'
test(w['s'][1]['q']['s']['k'])
length(z['z'][-5])
test(u['g'][1]['c'])
k['t']['k'] = 'j'
w['p']['c']['y'][7] = -5
length(k[7][-7][5][-8][5][0])
length(q[-1]['v']['j'])
length(a)
length(z['z'])
n['q'] = m[3]['k'][-8][2]
m[-5]['r'] = -2
test(w[-4])
test(e['b']['z'][-7]['b'])
length(n['v']['l'][-9])
x[7]['z']['j'][6] = 'n'
length(k)
length(n)
w[-4][-7] = -8
b[3]['n']['p']['u'] = h[4]['l']
c['s'][9][2][-2]['x'] = 'r'
f[-1]['l'][-4]['b']['j'][-1][2] = {'q': {'a': {1: 3}, 'g': {'z': 'r'}}, -8: {6: {-6: -4}, -9: {-5: 'z'}}, 'l': {'j': {9: 'c'}, 7: {8: {'w': 't'}, 'g': {'n': 'l'}}}, 'v': {2: {'v': 'y'}, 't': {'y': 'f'}}}
i[4]['f']['k']['h'][4]['t']['g'] = l[0]['g']['m'][-4]['b']['j'][-1][8]
a[8][-5]['m'][-8] = 'b'
e['b']['l'][-2] = 'o'
a[8][-5]['g'][7]['d']['g'] = v['i']['a']
g['n']['a'][7] = {'i': {9: 1}, 8: {-5: 'x'}, 'z': {'y': {'i': 's'}, -1: {5: 'z'}}}
length(e[3]['v'][4]['i'][-8]['k']['k'])
u['m'][4]['r'][-1][8]['a'] = -2
length(e[3]['v'][0]['p']['w'])
x[-4][-6][-3]['a']['i'][-5][1]['w'][-7] = 'n'
t['t']['b']['f'][-6]['g']['y'] = 'q'
v[-4][3][9][3]['j'][-2] = 'o'
k['j'][-5]['m'][2]['g'] = 'x'
a[-2][6][-1][8][-7][-1]['i']['x'][-7] = 4
n['v']['l'][-9]['s'][-3] = c
u['g'][1]['c']['v'][5]['s']['s'] = {'c': {7: 3}, 'e': {'t': 'o'}, 'd': {'n': 'g'}, 8: {'p': 6}, 'q': {-9: 'w'}, 's': {'u': 3}}
test(x['m'][6]['c']['u'][-1][-6][-3]['q']['q'])
test(v[-1])
test(e['b']['z'][-7]['b'][2])
test(f['k'])
test(d[7]['q'][-6][-8][2])
d['a']['o'][-1][0]['f']['r'][6]['l']['u'][-5] = t[-5]['i'][9]
r['v']['a']['p'] = 2
length(b[1][-7])
length(z[4]['u']['f'])
length(c['s']['u'][-9]['h'])
length(v[-4][-1]['v']['v'][-2])
l['f'][7] = f[-1]['l'][7]['o'][-3]
e[3]['v'][0]['p'] = {'m': {'p': {-4: 'a'}, 'k': {'s': 'v'}, 'm': {'l': -7}, 'u': {'e': {8: -8}, 'd': {-4: 0}}}, -3: {'i': {'v': 'e'}, 'p': {'z': 3}, 'd': {-7: 'n'}}}
d[1]['g'][4]['p'] = 1
d[-2][-9]['s']['a']['u']['t']['b']['f']['i'][2]['m'] = {'p': {0: {'n': -2}, 9: {5: -4}}, 's': {'x': {'j': 9}, 'v': {8: 9}}, 'b': {-7: {'v': -8}, -6: {-5: 'h'}}}
length(o[4]['b'][-5]['h'][1])
r[6] = -8
j[4]['c']['y'] = -6
h[3][2] = {'q': {-1: 'q'}, 'f': {3: 'h'}, -5: {-1: -8}, 'n': {'i': 3}}
length(r[7]['y']['h'][2])
test(g['d'][7]['j'])
v[5]['l'] = m[1][2]
l['b']['p']['x'][8]['u'][1] = 'p'
b[3]['n']['p']['u']['b'] = 6
test(t)
u['p']['u'][4][-1][8][-7][3][9]['p'] = 'q'
u['e'][-5]['t'][5]['y'] = 'd'
test(j)
length(y[3])
p[-1][3]['d']['c'][6]['s'] = {1: {'y': 4}, 6: {'y': {'z': 'a'}, -6: {'p': 'g'}}, 's': {-8: {'r': -3}, 'n': {'u': 'q'}}, -8: {-8: 'p'}, -7: {9: {9: 6}, 't': {8: 'u'}}, -4: {4: 'u'}}
test(z[4]['u'][1])
length(k[1]['q'][-4])
b[3][7][2][-4]['x']['z'] = {'e': {'v': -9}, 'd': {9: -3}, 'o': {'y': {0: 7}, 't': {-4: 'x'}}, 'v': {6: 'w'}}
length(b[1])
z[-7][7][6]['u'] = 2
v['y'][3][-9]['v']['c']['u'] = 'e'
length(j)
h[4][-8]['c'] = p[-1]['h']['a']['c'][-6]['l']
length(p[-1][3]['d']['c'][0]['u'])
z['h'] = 'd'
length(z['z']['u'])
length(f[1][-9][-7])
o[4][6]['d'][9]['j']['o']['v'] = q['y'][-2]
b[3]['l'][0][3]['w'] = {'q': {3: {'e': 4}, 'g': {0: -6}}, 'i': {'x': 'u'}, -6: {6: -8}, -1: {0: {-2: 0}, 'o': {-5: 'v'}}, -2: {'v': 5}}
b[1][8]['h'] = {3: {3: {8: 'f'}, 'z': {4: 'd'}}, 'x': {'c': -4}, 'j': {'b': {'a': 3}, 'f': {'y': {'h': 'x'}, 'b': {2: 7}}}}
length(m[0][7][6][9])
f[-1]['l'][4] = 5
p['c']['x'][-1]['s']['d'][8]['x'] = t[-5]['h'][3][-4][-8]
c['s'][9][-2][3]['l'] = 9
test(b[1][-6][3][3]['f']['u'][-5])
j[5][8][5][4] = -7
test(w['p'])
u['g'][1]['c'][-6][-2]['h'] = 'p'
j['w'][7]['j'] = 'k'
y['c'] = {8: {-9: 7}, 2: {'i': -3}}
x[-8][9]['j']['l'] = -8
b[1][8]['h']['j']['f']['b']['b'] = {9: {'z': {'p': 'z'}, 'l': {7: 'b'}, -2: {5: -1}}, 'o': {-7: {9: {4: 'j'}, 'm': {'n': 'm'}}, 4: {-5: 5}}}
length(q['y']['w'][-7])
e[2] = u[0][-5]
length(h[4][1])
test(s['m']['t'])
length(l[2])
test(u[0][-5][5][7]['o'][-3])
test(x['m'][6]['c']['u'][8])
c['i']['n'] = -5
q[-1]['w'][-4][4] = v[5]['l']['r'][-2]
b[1][-7][6] = o[4]['b']
h['i']['f'][4][6]['y'][9]['q'][1] = y['c'][2]
test(r['v'][-7]['c']['b'])
t['z']['f'] = 'o'
n['v']['l'][-9]['p'][6] = {-8: {9: 'o'}, 0: {'t': 'j'}, -2: {-2: 3}}
h['i'][-5][7] = -5
b[1][2][8]['j'] = y[0]
test(x[-4][-6][-3]['a']['i']['j'])
test(u['m'][4]['r'])
length(f[-1]['e'][4][3]['d']['c'][6]['s'][-7][9])
test(p[-6][-8][1])
s['a'] = 'e'
j['w'][7]['j'] = {2: {'z': 'k'}, 3: {'a': 't'}, 4: {'l': 'l'}, -7: {2: 'e'}, -6: {'r': 'h'}, -5: {'i': 'h'}, -3: {'m': -1}, -1: {4: 9}}
length(i[4]['f']['k']['a'][-1])
test(t['t']['b']['f'][-6]['g'])
test(c)
t['z']['n'] = {0: {'a': {'l': 't'}, 'w': {'s': 't'}}, -4: {-4: 4}, 'm': {-7: 2}, 'd': {6: -7}}
length(r[1]['f']['l']['d']['m'])
s['g'][-7][2]['f'][1]['c']['v'][5]['s']['s'][8]['p'] = 'h'
t[-5]['h'][3][4][-4] = 'j'
length(y[0][-1][7][-7])
w['p']['z']['u'][4]['x']['r'] = 'k'
l[0]['g']['m'][-5] = 9
test(y)
length(r[0]['r'])
d[9][7]['f'][2]['m']['u'] = 9
e['b'][-5]['k'][3][-4]['m']['q'] = i[4]['g']['q']
i[-2]['p']['h']['z'][-7] = 9
t['z']['n']['d'][6] = 2
t[8][5][3][9] = k['j']
test(c)
p[-6][-8][7][2] = f[1][-9]['h']['h']['c']['i']
v[-4][-1][-5]['q'][-5] = 'p'
length(m[1][5]['x'][-8][5])
r[1]['z'][1]['c'][7] = {'i': {-9: 't'}, -6: {'c': -1}, 'b': {8: 5}, -1: {-4: 'e'}}
m[3]['k']['k'][3][-8]['v'] = -1
test(c['e'][-9][1]['j'][-2])
e[2][5][-4]['b']['j']['o'][4][6][7][-7][2]['i'] = {0: {'j': 9}, 'c': {'u': 'a'}, 'g': {9: -6}, 'm': {-1: 3}, 'o': {6: 'd'}, 'n': {'z': -5}, 'q': {'l': 6}}
v['y'][3][-9][-5] = {'o': {9: {'l': 7}, 6: {'v': 'p'}}, 'f': {'r': {-9: -9}, -5: {'m': 'l'}}}
l['m'][-8]['e'][-9][1][-8][0]['o']['l'][6]['h'][-3] = j[5][8][5]
test(h[3][2]['f'])
h['i']['f'][4][6][7][8]['y'] = 'w'
t['s'][7] = {9: {'i': {'r': 'h'}, -7: {'w': -9}}, 'g': {'q': 'p'}}
test(v[-4][3][9][6]['n'])
r['v'][4]['e'][-1]['a'][-2][4]['d']['h'] = 3
w['s']['v']['k'] = t[8]
a[-2][-4][9] = {'a': {'e': 'n'}, -7: {6: 7}, 'o': {-5: 'h'}, 'h': {8: 6}}
test(h[3])
n[4][-2][3][7][2][6][5] = f[-1]['t']['b'][-1][7]['e']['h']['o']
e[2][5][-4]['b']['j']['o'][4]['b'][-5]['h'][-9]['m']['h'] = m[0][-7]['o']['e']['r']
e[2][5][7]['o'][-8] = {'k': {'i': {'t': 'y'}, -4: {'p': 4}}, 'm': {'y': {1: -2}, 'i': {'p': {-4: 'v'}, 5: {0: 7}}, -5: {8: 'c'}, 'a': {-3: 'b'}, 'f': {-7: 'o'}}}
h['i']['f'][4]['b'][-5][-2]['b']['o'][5] = {2: {'v': 'w'}, 'b': {0: {'a': 3}, 1: {-8: {8: 'k'}, 'r': {-9: 'a'}}}, 4: {-8: 'u'}, 5: {5: 'l'}}
o[4][6]['l']['r'][-2]['z']['e'] = 't'
y[-7]['q']['o']['b'][2]['i'] = 'w'
i[-2]['p']['h'][4] = {1: {'p': -2}, 'w': {3: 't'}}
w['s']['b']['r']['w'] = {9: {3: 'f'}, 'r': {-3: 'l'}, 'z': {-5: 'd'}, 4: {'q': {'h': 5}, 2: {'k': -6}, 'g': {'w': 'z'}}, 7: {'w': 'h'}}
length(c['e'][-9][1]['j'][-7])
length(c[-9]['o'])
g[-1]['a']['o'] = 5
x['m'][6]['c']['u']['h']['z']['k'][-7]['m']['n'] = 3
h[3][2]['f']['g'] = o[4]['r'][-3]['t']['e']
test(d[-2][-9]['s'])
test(o[4][6]['d'][9])
t['s'][4] = r[1]['z'][1]
length(l[0]['g']['m'][-4]['b'])
length(v[-4][7]['g'])
h[4][-4]['q'] = {9: {5: {'b': -2}, -9: {-6: 'n'}}, -6: {'x': -6}, 3: {-8: 2}, -2: {'w': 'o'}, 'h': {'q': 'c'}}
length(w['p'][-6][-2][-6])
length(r)
test(w[-4][-3])
length(u['g'][1]['c'])
length(e['b'])
test(t['z']['n'][-4])
test(g[8]['e']['i'])
j[5][8]['i'][-9] = {1: {8: 'c'}, 4: {'y': {'k': -6}, -5: {'t': 'o'}}, 5: {6: 'c'}}
length(d[9][7]['f'][2]['f'])
test(f['k']['g'][4][-5]['i'][9])
x[7]['z']['h'][6][8][-4] = e[3]['v'][0]['p']
test(g)
h['i'][-5]['a'] = e['t']['f']['r'][6]['l']['u'][-5]
o[-7] = 'y'
length(r['v'][4]['e'][8][-1]['x']['v']['l'][-9])
test(y[-7]['y']['d']['a']['m']['l'])
x[7]['z']['j'][-4] = -8
length(l['s'])
j['w'][7]['j'][3]['a'] = 'h'
length(y[0]['f'][5][-4][4]['z'])
test(d['z'][-7][5]['u']['s'])
i[4]['g']['m'] = -6
o[4][-6][7] = {'a': {'i': 'm'}, 'y': {'d': 'u'}, 2: {-9: -4}, 5: {0: 'a'}, 'w': {'w': 'f'}}
length(e[2][5][7]['o'][-8]['k'][-4])
c[-8][0]['o']['c']['u'][3] = -9
y[8][1]['h']['a'] = {8: {-5: {'q': 'z'}, 'u': {'u': 9}}, 1: {'m': -6}, 'c': {'y': 4}}
d[7]['s']['v'] = 'z'
test(s['b']['u'][1])
length(h['i'][-5]['a'])
test(a[8][-5][-6]['q'])
length(b[1][-6][3]['y']['z']['t']['x'][-4])
s['b']['u'][4][7][6] = h['i'][-5]['a']
o[4][6][7][-7][2]['i']['n']['z'] = 7
m[3]['k']['k'][5][-9] = 'g'
length(h['i'][-5]['a'])
g['i'][7][-9][2]['k'] = 3
z['z'][9]['e'] = 'p'
k['j']['q']['a']['d'] = r[0][-7]['f']
test(a[8][-5]['y']['u'][3][5][-9])
q[-1]['w']['s'][8]['x']['a']['c']['j']['r'] = g[-6]['b']['r']['o'][4]['b']
p['c']['x'][-1]['s']['o'][-8][1] = 'm'
m[-9][-2][-5] = o[4][-6][3][6][-7]
y[-7]['y']['d'][-6]['c']['h'] = 'f'
e[3]['v'][4]['i'][-8][-3][9] = a[8][-5]['z']
o[4]['i'] = 'o'
h['p'] = -5
length(u[8]['u'])
s[-4][4]['p'] = {9: {'w': {'c': {3: 'v'}, -9: {5: 'c'}}, -9: {-2: 'o'}}, 's': {'f': 'c'}, -5: {'h': 'a'}, 'z': {8: {'v': 'h'}, -4: {-3: 'z'}}, 6: {6: -2}}
test(k[7][-7]['k']['v'])
r['v']['a']['l'] = {'q': {'f': 'w'}, 'o': {5: 'i'}}
length(q['y']['w'])
c[-8][0][1]['a']['q'][6]['g']['l'] = z[4]['u'][-5]['h']
w['p']['x'][2]['x']['x'] = {'i': {'w': 8}, -1: {'n': 3}}
test(v[-4][-1]['x'])
b[1][6]['z'] = {-8: {'p': 5}, 'e': {-1: 'x'}}
test(g['n']['x'][-9])
j[4]['c']['w'] = w['p']
test(p[-6][-8]['a'])
d[-2]['s'][7][-8][3]['b'] = f['k'][-7][0]
t['t']['b']['f'][-6]['g']['y'] = 'i'
length(c['s'])
test(v[-1][-2][-5][4][-2]['l'][-8]['p'])
t['t']['b']['f']['y']['f'] = {'c': {0: -9}, 5: {-9: -3}, 'f': {-1: 'q'}, 'o': {'g': -6}, 's': {'v': -1}, -4: {-6: {'s': 1}, 6: {'k': 0}}}
p[-1][3]['d']['c'][6]['s'][6]['y']['n'] = 'p'
d[7]['s'] = 'd'
l[-9]['b'][0]['g'] = 'm'
z[-7][-7][2]['f'][1]['c'][-6]['x'][4] = {0: {4: 'p'}, 'a': {9: 'v'}, 'f': {'w': 9}, 'n': {'q': 0}, 'q': {'b': {-9: 'z'}, 'g': {'l': -8}}, 'p': {4: -7}}
u['p']['a'] = 'w'
h['i'][-5]['a']['d']['l'] = b[1][6]
a['x'] = 6
test(y[-7][3]['z'][0])
test(i[4]['f']['k']['h'][4]['h'])
s['g']['u']['s'] = {'i': {'q': {-5: 'g'}, 9: {-5: 2}}, 2: {'h': {'e': 0}, -6: {8: -2}, 'e': {'w': 'j'}, 7: {'e': -7}}, 5: {'b': {'v': 'q'}, 'd': {-5: 'e'}, 'w': {-4: -6}}}
test(u['g'][1]['c'][-6]['x'][4]['p'])
t['z']['n'][-4][-4] = 'g'
length(a[8][-5]['z'])
m[1] = {0: {7: 'w'}, 'e': {-1: -8}, 'o': {6: 'b'}, 'p': {'q': 2}, 'x': {-9: 'y'}, -7: {-1: {'z': 7}, 7: {'k': -7}}}
test(o[4]['r'])
h['p'] = {1: {-5: {'j': 6}, 'z': {'o': 2}}, 'p': {'a': -2}}
c[8][-1]['v']['v'][-2][-4]['g'][4][-6]['m'] = g[5][7]['j'][-6]
length(h['i']['f'][4]['b'][-5][-2])
c['i'][9]['d'] = {'u': {'z': {'c': {'e': 'p'}, 2: {9: 'j'}}, 6: {-2: -4}}, -9: {'a': {-3: 9}, 'm': {'q': 7}, 'u': {0: 6}, 'w': {'l': 's'}, -2: {-2: 'u'}}}
w['p']['x'][2] = -2
length(t['t']['b']['f']['i']['e'])
length(z[-7])
r[1]['z'][1]['c'][-1]['g']['p'] = {0: {-5: {-7: 'f'}, 'e': {'v': 'i'}}, -7: {'k': {'o': 'l'}, -6: {'r': {'x': 7}, 4: {4: 'g'}}}, 'k': {'p': {-3: -7}, 'c': {4: -9}, 'r': {'y': 7}, 'n': {'d': 2}}, -4: {'e': 8}}
y['c'][5] = {-8: {-8: 'i'}, 'i': {8: 'g'}, 6: {8: 'k'}}
u['m'][4][-2] = 'w'
test(v['i']['a'][-9][-6]['u'])
t[-6][-2][5][-3][-3] = n
length(q['y'][-2])
length(f[1][-9][-7])
test(n['c']['j']['d']['m'])
e[3]['v'][3][3][3][-4]['j'] = p[-1][3]['d'][6]
f[1][-9][-7][3] = {-5: {'f': 'h'}, 'o': {'d': 9}, 7: {-7: 9}}
test(q['y'])
r[7]['l']['m'] = 8
length(n['c'][-9]['w'])
test(c['i'][9][-8])
h[4][-4]['q']['h'][2] = g['i'][7][-9]
f['k']['g'][4][-5] = 0
c['i'] = f['k']['e']['k'][7]
w['p']['z'][-6][0] = 4
p['k']['a']['o'][8][-5][-6]['q']['l']['y'] = z['z'][-6]
length(c[-9][-4]['b'])
o[4]['b']['t'] = -8
length(p['k']['a']['o'])
q[-1]['w'] = -7
length(x[-4][-6])
f[1]['y'][7]['m'] = {'p': {6: 'q'}, -6: {6: 't'}}
k[7][-7][5]['c'] = q[-1]['v'][-5][7][9][2]['f']['g']
t['s'][2][-6]['t'] = -8
length(c['i'])
test(n['v'])
k[7] = j['t']['d']
t['t']['b']['f'][-1]['t'] = 'e'
length(o[4]['r'])
length(v[5][7][8])
test(g['i'][0][-9][7]['j'][3])
j['p']['x'][1] = {4: {'s': 4}, 'g': {'l': -2}, 7: {'w': 8}, 'o': {'n': 'u'}, 'r': {'t': 3}, 'w': {'j': 'g'}, 'z': {4: 8}}
p['c']['x'][-6][-7]['c'][-6]['l']['c'] = {0: {3: {'u': 6}, 6: {3: 'x'}}, 8: {0: {-6: 'b'}, -4: {-7: 'g'}, 'v': {7: -1}}, -1: {'s': {'u': 'e'}, 'd': {2: 1}}, 'p': {'r': -6}}
length(r)
length(i[4])
u['e'][-5]['t'][5]['y'] = 3
length(u[0][-5][5][7]['o'][8])
k[1][7]['n']['p'] = 9
o[4]['b'][-5][-2][5][-5] = a[8][-5]['r']
j['t'][-4]['s'][-7][0][-9][8] = g['s'][-8][-2]
t['s'][2]['e']['o'] = l['b']['p']['x'][-4]
v['i']['a'][-9][-6]['u']['m'] = {8: {2: {'i': 'a'}, 'w': {-4: 'c'}}, 'h': {6: 's'}, 'b': {'g': 'p'}, -2: {'f': 0}}
length(w['s']['x'])
y[-7][3][-6][1] = f[-1]['l'][-4]['b'][-3][-3]['d']['m']
test(a[8][-5]['r'])
test(f['k']['e']['k']['l'])
g[-1]['a'][-8] = -7
test(u['e'][-5]['i']['y'][-2]['p']['h'][4][1])
length(p[-1]['h'][-9][0][8])
v['y'][7]['a']['i'] = 5
q[-1]['v'][-5][7][9][2][-5][-1] = 's'
test(f['k']['e']['k'][-2][3])
test(j['p'][3][-6]['i'])
j[0] = 'w'
length(q['y']['w'][-7])
g['t']['r']['o'][4]['r'][-3]['t']['r']['t']['a'][-5] = h[4]['l']
f[-1]['t']['b']['t'][-3][-1][1]['c']['j'] = 'l'
test(c['e'])
c['i']['d'] = {'x': {'j': {5: 0}, 'd': {'u': -3}}, 'p': {'x': {'g': -6}, 's': {'a': {'v': -1}, 3: {'o': -8}}, 'o': {-5: 7}}}
p[-6][-8][1]['l'] = 'b'
k[-7] = x[-4][-6][-3]['a'][-2]
c['e'][-9][1][-8][0][1]['a']['q']['o']['j'][-7] = -6
length(w[-4][-3])
length(n[4][-2][1][6]['z']['e'])
length(c[-8])
j[-4] = 'g'
a[8][-5]['z'] = -5
l[-9]['b'][0][6][4][-2][-4]['g']['z'][9][3]['j']['s'] = 'z'
length(i[4]['g']['q'][-6]['e'])
d['h'][3][-1]['p']['a'] = 's'
c[8][-1]['a']['r'][7]['f'] = a[-2]['a'][1]
b[1][-7][6][-5]['h'] = 'p'
o[0] = {'u': {-2: -9}, 7: {4: -8}}
test(t['t']['b']['f'])
f['k']['g'][4][9] = -3
test(d)
test(w['s']['u'])
y['c'][8]['r'] = 'g'
d[7]['q'][-6][-8][-1][0] = 'i'
length(o)
test(l['s']['g'][-9][-5][4])
length(l['b']['p'])
test(d[1]['g'][-6]['r'])
test(t['z']['n'][0]['w'])
test(n['v'])
k[-7]['d'] = 'h'
test(o[0]['u'])
length(l[-9]['b'])
x[-8][-2][-6]['w'] = n['v']['l'][-9]['q'][4]['w']
r['v']['a']['l']['b'] = -9
h['i'][-5]['a']['d']['l']['z'][-8] = {-7: {-4: 4}, 3: {9: 2}}
length(y[0]['f'][5][7]['e'])
p['c']['x'][-6][-7]['c']['v']['a'][3]['k'] = 2
h[3][2][-5]['q'] = p[-6][-8]
length(s['b']['u']['b'])
l[6][-4][-3][9]['n'][1] = {4: {-8: {'r': 'z'}, 5: {8: -8}}, 'w': {-2: 'g'}}
n['v']['l'][-9]['s'][-3]['i']['d']['p']['o'][-5] = 's'
t['t']['b']['f'][-1]['t'] = 'f'
n['v']['l'][-9]['q'][4]['v'][2] = w['s']['b']['r']['w'][7]
l['m'][-8][-8][0][6][4][-2][5][-2] = {'q': {'a': -1}, -1: {0: {0: 'd'}, 'm': {4: {-5: 0}, 6: {'s': 'd'}}}, 'v': {'q': {'a': 'i'}, 'c': {'s': 5}}}
j['t']['v']['u'] = 'n'
n[4][-2][1][6]['z']['y'] = -4
test(p[-1][3]['d'][6])
l['s']['a'][-1][5] = 'm'
length(d['h'][-7][0]['a'])
test(b[1][2][8][6][2])
d['a']['y']['o'] = d[7]['q'][-6][-8]['w'][-2]
j['p']['x'][1]['r']['g'] = a[8][-5]['r']
j[-1]['s'][6][-2]['m'] = 1
g['n']['y'][9] = {-8: {6: 8}, 3: {-8: 'k'}, 'e': {'v': 'r'}, -1: {'o': 1}}
d['h']['o']['z'] = -7
length(d[9][6][-3]['q']['q']['a']['d']['l'])
b[3][-1][3] = 'u'
m[3]['k'][-8] = a[8][-5]['g'][7][2][-1]
s['b']['u'][-5]['h'] = {'c': {'e': 8}, 8: {-6: 'r'}, 'o': {9: {'x': 'q'}, 4: {-1: 9}}, 'i': {'o': 'm'}, -6: {'y': 6}, -5: {8: 3}, -1: {'k': -5}}
f[1][7]['n'][-7]['c'][-6][-2]['m'] = -3
length(e)
p['c']['v'][-5]['c']['q'][-6]['e'] = 'p'
test(p['c']['x'][-1]['s'][-8])
d[-3] = 6
s['b']['u'][4][7][6]['d']['l']['z']['e'][-1] = 's'
test(l['b']['p'])
m[-5]['v'][-8][0][6][4][-2][-5][4][-2][-5] = e
e['t'][-7] = -7
n['q']['c'] = q[-1]['v'][-5][7][9][2]['q']
s[3][9]['i'] = {'a': {'v': 'o'}, 'r': {3: 'n'}, -2: {2: 8}, 'o': {'h': -5}, 'n': {'v': 6}}
test(r[1]['f']['e']['a'][-8]['o'])
a[8][-5][-6]['q']['l']['y'][1] = 'j'
i[4]['f']['k'][6][8] = d[7]
length(h['p'][1][-5])
s['b']['w'] = 'q'
e['g'] = {'k': {2: {'e': 'z'}, -2: {'i': {1: 'y'}, 1: {-6: 6}}}, 7: {'r': {'g': 'y'}, 'v': {'d': 4}}}
test(f[1][-9][-7][3][7])
test(q['y']['a'])
test(m[-4]['u'][-5][2])
test(z[4]['u'][0])
length(f[1])
test(l[-9]['b'][0][1]['a']['q']['s']['j'])
length(o[4]['r'][-3]['t']['r']['t'][-8][-2])
z[-7]['u'][-1] = l[-9]['b'][0]
i[-2]['p']['h']['v'] = x[-8]['k'][6][-3]['c']
j['w'][7]['j'][-6]['r'] = r
length(y[-7][3][1])
u[8]['u']['c'] = {'a': {'f': 'r'}, 1: {1: 's'}, 2: {-9: -9}, 8: {2: 1}, 'o': {9: {2: 'p'}, 'x': {5: 'y'}}, -9: {-7: 'u'}, -6: {-7: 't'}}
m[-5]['v'][-8][0]['o'][5]['v'][8]['x']['i'] = -2
length(t[-5]['h'][3][-4][-9])
test(o[0][7])
test(e[3])
length(l[-9]['b'][0])
s[-4]['d']['h'] = 'p'
test(w['p'][-9])
test(z[4]['u'][4][7][6]['d']['l']['z'][-8][-7])
x[-8][-2][-6]['w'][-6] = r['v'][-7][1]
b[3]['l'][0][8]['c'] = v[-1][-2][-5]['r']['x'][1][-7][6][-5][-2][-8]
v['y'][3][-9] = 'e'
test(q[-1]['v'][-5][7][9]['e'][-6]['b']['r'][-1][8])
d['a']['y']['o']['m'] = g['i'][0][-9][7]['j']
g[-1]['a'][-2][1]['a'][7] = r['v'][-7]['c']['g']
length(f['k'][-7])
h[4][-8]['c']['c'][8]['v'][-8] = {'u': {5: {6: 'g'}, 'g': {'a': 3}}, 'f': {9: 'e'}}
u['e'][-5] = {-8: {-4: -5}, 'j': {-7: {'q': {4: 1}, -4: {9: 'f'}}, 'w': {'c': {5: 'v'}, -9: {'z': 9}}}, 'w': {'m': 's'}}
c[-8] = -3
test(v['i']['a'][-9][1][-5])
length(r[7]['y'][2]['g'])
z['z'][9]['z'] = 3
test(z[-4][5])
k['j']['p']['h']['r']['v'][-4]['u'] = r[7]['y'][2]['g']
test(z[-7]['u'])
i[4]['f']['k']['a'][-1]['n'] = 5
r['v']['a']['l']['q']['o'] = 'p'
d[-2][-3] = {'i': {8: 't'}, 'h': {7: 'm'}, 'u': {'p': {'l': 9}, 'k': {-4: 0}}, -4: {9: -9}, 'm': {-4: -8}}
c['j'][-2][-6] = 'j'
g[3][-5][3]['v'][4]['e']['t'][-4][-3][9]['n'][1]['w'][-2] = 'm'
d['a']['o']['a'][-2] = 5
length(x['m'][6]['c'])
k[-7]['f'] = {2: {'z': 'd'}, 5: {'n': 3}, 'f': {'w': 'q'}, 'j': {'q': 'j'}, 'c': {4: -3}, 's': {-7: 8}, 'x': {'j': 'n'}, -7: {0: 4}, -3: {2: -2}, -1: {'v': 5}}
test(l)
c[8][7]['g']['q'] = {0: {'q': 'p'}, 'u': {'j': 0}}
test(d['a']['o'][-1][0]['f']['r'][6]['l']['u'][-5]['d']['l']['z'][-8][-7])
m[-4]['u']['f'] = {-9: {3: 'c'}, -3: {-5: -5}, 'w': {'x': {3: 'p'}, 'u': {'o': 'm'}}, 'd': {'w': 1}}
v[5]['y'][2]['g'] = -6
test(w[-4][-3])
length(b[3][3][4])
length(n['v']['l'][-9]['s'][-3]['e'][-9][1][-9][-2])
length(m[0][-7][2])
k['j'][-5][1]['n'] = p[-6][-8]['x']
x[-4][-6][-3]['a']['i']['j'][-1] = {0: {-8: 'i'}, 'p': {'q': 'h'}, 's': {'b': 'v'}, 'v': {'z': 5}, -6: {-6: 'l'}, -2: {-6: {'h': 'k'}, 2: {'w': -8}}}
test(k[1][-8]['e'])
j[5][8][5]['d'] = h[3]['i']['n']
test(y)
m[3]['k']['k'][3][-8]['v'] = k['t'][4][-1][-1][0]['f']['r'][6]['l']['u'][-5]['d']['l']['z']['e']
length(o[4]['b'][-5][-2][5])
i[-2]['p']['h'][4]['w'][3] = {'s': {'i': -9}, 'k': {'r': {9: -6}, -1: {'v': -9}}}
f[1]['y'][7]['m'][-6] = 'v'
test(p['c'])
j[5][8][8]['j'] = n['c'][-9]['j'][5]['e']
d['a']['o']['i'][3][-8]['v'][-1] = 'g'
a[-2]['a'][1][-3] = {0: {'m': 9}, 3: {'h': {2: -4}, -1: {'t': -5}}, 5: {'r': 'a'}, 'o': {-3: -7}, -9: {-3: 7}, 'z': {0: 7}, -3: {9: {-4: 'h'}, 'v': {-3: 4}}}
test(e[2][5][7]['q'][4])
length(p[-1])
test(x[-4][-6][-3]['a'][-2]['f']['s'])
length(g['d'][7]['j'])
c[-7] = 's'
x[-8]['f']['e']['z'] = 'h'
i[4]['f']['k']['a'][-1][2] = {'k': {'i': {-1: 9}, 'j': {-9: -6}, 'o': {'f': -1}, 's': {'q': 't'}, 'w': {4: 'y'}, -6: {-6: -9}}, 'g': {0: {1: -2}, 'l': {0: 'f'}}}
b[1][8] = {3: {-3: -3}, 'b': {'v': 'b'}}
length(s['g'][7][6][9][-9]['c'])
q[-1]['v'][-5][7][9][2][-5]['q']['a']['f'] = 'o'
f[1]['y'][5][4] = 0
length(c['i']['d']['x']['d'])
length(e['g']['k'])
e[-8] = {'h': {5: {'y': 8}, 6: {'t': -5}}, 'c': {'v': 'e'}, 's': {'d': 'i'}, 'g': {4: 5}, 'n': {'j': 'l'}}
test(p['c']['v'][-5][-2]['y']['d']['v'])
k[7]['o'] = {1: {'k': 'n'}, 'b': {8: -6}, 'e': {4: -9}, 'd': {'r': 9}, 'h': {'a': 'o'}, 'n': {'i': {'w': 7}, 'w': {'n': 'e'}}, 'x': {0: 'v'}, -5: {2: -6}, -3: {-7: -5}}
d['a']['y']['o']['m'][-6]['r'][7]['y']['c'] = p
test(o[4][6])
g[-1]['a'][-2][1]['z'][-1] = -3
q['y']['w']['p']['x'] = -8
length(a[-2]['s'][-9])
r['v'][4]['e']['i'][0][-9][7]['j'][-7][2] = {'y': {'p': {'w': -8}, -6: {6: -3}}, 9: {7: 'n'}, 's': {1: -2}, 5: {'q': {'k': -3}, 9: {'a': 'w'}}, 0: {6: {-3: 'h'}, 'n': {-3: -7}}}
test(f[1][-9]['h']['h']['c'][8])
test(b[1][2][8])
length(j[5][8]['q'])
f['k'][-3] = -7
length(e[3]['v'][-4])
test(p['k']['a']['o'][-2]['a'][7]['x'])
length(m[1])
f['k']['g'][4]['h'] = d['z'][-7][5][-8]['e']['j']
test(y[3]['d'])
q[-1]['v']['j'][4][-7]['c'] = v
length(b[1][8][3])
n['q']['c'][-1] = x['m'][6]['c']['u']['h']
g[-6]['b']['r'][-1][6]['u'] = {-7: {'l': -9}, 'd': {'b': 'd'}}
t['s']['i']['q'][-6] = -1
q['y'][7]['o'][-3][-5] = k[7]['o']
length(t['t']['b']['f']['y']['f'][-4][-6])
u[8]['u']['c'][-6]['o'] = 2
g[5][-3] = 'f'
g[0] = {1: {'y': 'x'}, 'e': {'b': 1}, 'd': {'i': 'f'}, 6: {1: -2}, 8: {'t': 'c'}, 'h': {8: 't'}, 'n': {'h': 1}, 't': {-7: 2}, -3: {'s': 'o'}, 5: {'s': -8}}
p['c']['x'][-1]['s'][-8][-2] = 'n'
v['r'] = {'s': {5: {-2: -9}, 'f': {9: 'q'}}, 'l': {5: {'x': 'd'}, 'l': {-4: 'j'}, -9: {7: -2}}}
length(r['v'][4]['e'][-6]['b']['r'])
g['t']['r'][-1][-3]['y'] = 'l'
y[3] = 0
a[-2][6][-1][8][-7][4] = 'a'
k[-7]['f']['f']['w'] = 6
length(x[-4][-6][-3])
test(f[-1]['t']['b']['t'][-3][-1][1])
w['p'][-6][-2][8]['b'][3]['l'][-8]['x'][-1] = {'a': {'y': 3}, 0: {'a': {8: -3}, 'o': {9: 'a'}}, 'd': {'s': {'f': 'v'}, 'r': {'z': 'l'}}, 'f': {'g': 'm'}, 7: {-4: 5}, -3: {'y': 'g'}, -2: {'o': 'j'}}
test(w[-4][-3]['d'])
test(g[8])
test(i[-2]['p']['h']['v'])
v[-4] = 'e'
length(o[0]['u'])
i[4]['g'] = u
l['m'][-8]['j']['v']['v'] = -4
length(q[-1]['v'][-5][7][9]['e']['t']['r'][-1][6]['u'][-7])
j['y'] = -4
x[-4][-6][-3]['a'] = 'z'
length(o[0])
test(r)
test(v[5])
z[4]['u']['f'][8] = 'd'
d[-2]['s'][7][-8] = {2: {'r': -2}, 'j': {'u': 7}, 'm': {'p': 'n'}, 'f': {'e': 'a'}}
test(b)
test(o[4][6]['y'][2]['c'])
d[7] = z[-7]['u']['t']['b']['f']
x[-4] = -9
n[4]['s']['d']['f'] = 9
test(f)
length(i[4]['f']['k'][3])
test(p['c'])
length(a[8][-5])
v['i'][-9] = {'y': {'w': 'h'}, -6: {'x': 8}, 'o': {'q': 'c'}, 'f': {'u': -1}}
test(j[-1]['w'][-6]['s'])
length(p[-6][-8]['p'])
d['a']['y']['o']['m'][-3]['m'] = 1
length(h['i'][-5])
test(c['e'][-9][1]['e'][-9][1][-9]['e'])
d[-2][-3]['m'][-4] = {'j': {0: {-3: 'k'}, -6: {'u': -2}, 'f': {2: 'k'}}, 7: {'o': {'e': 7}, -1: {'o': {'y': 'g'}, 'v': {-8: -9}}}}
b[3]['r']['a'] = 8
j[-4] = {4: {'s': 'g'}, 5: {'n': -5}, 'o': {'j': 'e'}, 'u': {'u': 'h'}, 'x': {'a': 'w'}, -6: {3: {'v': -2}, 'w': {'o': 2}}, -4: {-9: -8}}
s[-5]['z'][-7][3] = -2
j[-1]['w']['t'] = 's'
length(a[-2][6][-1][8][-7][3][9][3]['i'])
h[4][-4]['q'][-2]['w'] = {4: {'u': 's'}, 5: {-7: 'j'}}
test(w[-4][-3]['d'])
length(s)
length(f['k']['g'][4]['h'])
length(u['m'][4]['r'][-1]['y'])
n['c'][-9]['c'][-1] = f[1][7]
x['m'][9] = f[-1]['t']['b'][-1][7]
t['z']['n'][0]['w']['l'] = 3
x[-8][-2][-6]['w'][-6]['q'] = 'd'
r[7][4] = {0: {'k': {-4: 's'}, 't': {'p': 'o'}}, 4: {'v': 9}, 5: {4: 9}, 'g': {'t': 'j'}, 'y': {'g': 'c'}, -8: {'y': 'q'}, -6: {-4: 'f'}, -4: {8: -5}}
length(s[-5][-6])
y[8]['v'][-9]['v'] = h['i']['f'][0]
g['n']['y'][-9] = 'j'
g[-1]['a'][-2]['n'] = {-5: {6: 1}, 'd': {1: -8}, 'h': {0: {-4: 'l'}, 5: {'s': 1}}, 'r': {'j': 's'}, 'z': {'x': -4}, -2: {'t': {-2: 'v'}, 'v': {-2: 'e'}}, 5: {'w': {'d': 0}, 6: {-7: 'l'}}}
length(b[1][-7][6][-5][-2]['b']['o'][5][2])
length(q[-1]['v'][7][8][-2][-6]['w'][-6])
length(g)
k['t'][4][-1]['a']['u'] = 5
test(y[0][9]['k']['a'])
k['t'][-9]['h']['x'][6][8]['d'] = 'a'
l['m'][-8]['i']['d']['p']['o'][-5] = -6
v['l'] = {'a': {2: -3}, 'y': {-8: 'b'}, -4: {'p': 5}, -2: {'z': -5}, 0: {-1: 6}}
test(x['m'][6]['c'][-4]['r']['i'])
x[-8][9][-7]['f'] = {9: {'m': 7}, 's': {-6: 'w'}}
a[8][-5] = w['s']['b']['s']
z[4]['u']['f'][-4] = 6
test(d['z']['d'])
k[-7]['f']['f']['m'] = 'q'
b[1][-7][6][-5][-2][5][-5][9] = -8
b[1][-7][6][-5][-2]['b']['o']['j'] = 5
length(y[-7])
length(f['k']['e']['k'][7]['d']['x']['d'])
test(i[-2]['p']['h'][4]['w'][3])
o[4][6]['l']['r'][-2][3][7]['i'][8] = {'b': {-7: {'b': 'u'}, 'w': {'s': {'c': 'w'}, 3: {'i': -3}}, 'x': {'w': -9}}, 4: {'q': {'x': 'n'}, 1: {-8: 'j'}, 'j': {6: 3}, 4: {'p': 5}, 9: {'y': 7}}}
n[4]['e'] = 'p'
x[7]['s'] = 'h'
h['i']['f'][-3] = g[8][-1]['x']['c'][-9]['c'][-1]['n'][-7]['c'][-6]['l']
length(i[-2]['p']['h'][4][1])
x[-8]['f'][-6]['m']['p'] = e[-8]['h'][6]
k[-7]['f'][5]['n'] = 's'
m[1]['x']['m'] = 'd'
length(p[-6][-8]['h']['u'])
test(b[3][7][2])
b[1][-7][6][-5][-2]['b']['t']['h'][-7][-3] = {'h': {-4: 'w'}, -6: {-8: 'j'}, 'm': {'h': {'m': 'c'}, 's': {'t': -1}}}
length(i[4]['f']['k']['h'][4][-1]['m'][-3][0])
i[4]['g']['m'][4]['r']['o'][0]['u']['g'] = {'o': {-7: 'n'}, 6: {-6: 'e'}}
length(d[1]['g']['h'])
length(e['t'])
length(g[3]['l'])
c['s']['u'][4]['k'] = 'z'
x[-8]['f']['e'][6] = {7: {2: {'a': 'z'}, 3: {'x': {0: 'u'}, 'k': {5: 4}}}, 4: {7: 'a'}, -1: {'t': {4: 'e'}, 'o': {'m': 'j'}}, 'v': {'a': {'i': 'c'}, 'u': {-3: 't'}}}
f[1][7][-4] = d['a']['y']['o']['m'][3]
h['p'][1]['z'][-9] = 9
test(y[8][1]['h']['a'][8]['u'])
c[8] = -7
length(n['v']['l'][-9]['s'][-3])
n['q'][1] = -7
e[3]['v'][3]['f'][9] = {-6: {'n': -5}, 'f': {-6: 'a'}}
length(t[-5]['h'][3][-4])
s['g'] = 6
h['p']['p']['a'] = {'i': {8: 'j'}, 9: {'r': -9}, 4: {'z': {8: -9}, 'm': {-5: 9}}, 'd': {'e': {'l': 'f'}, 7: {'m': -3}}, 0: {'a': 'f'}}
f[-1]['e'][4][3]['d'][6][5] = 6
test(t[-6][3]['y'])
k[1] = k[7]['o']
n['q']['c'][-1][6][0] = 9
length(j['t'])
o[-3]['c'][0][6][-5] = 's'
w['p'][-9][-7] = 6
test(i[-2])
length(w)
u['e'][-5]['w'][7] = -5
w[-4][-3]['d'][-8] = {'p': {0: {-6: 'c'}, 9: {'e': -4}}, 'g': {-1: {-8: -8}, -2: {'t': 1}}}
b[1][6]['z'][-8][-7][3] = m[-4][-4][-3]
r[0]['r'][5] = {1: {'r': 8}, 'g': {'l': {'m': 'n'}, 't': {6: 2}}}
length(u['p'][9][2][0])
m[-5]['v']['e'][-9][1]['i']['d']['x']['j'][5] = {2: {4: 'r'}, 'o': {9: 1}, 's': {'h': -5}, 'w': {'w': 3}, -8: {'m': -3}, -4: {4: 'd'}, -3: {'b': 'q'}}
c['s'][-2] = -5
length(k['j']['p'])
r['v'][-7]['c']['g']['b'] = 0
test(p['c']['v'][-5]['c'][3]['p'])
test(o[0]['u'])
j[-1]['w'][-6]['s'][1] = v['y']
length(u['m'])
length(q['y']['a'])
length(e[-8]['g'])
w['p'][5] = 6
test(x[-8]['k'][6]['h'])
i[4]['f']['k'][3]['u'] = 4
a[8][-5]['i'] = d['z'][-7][5]['u']['t']
length(s['m']['t'][9][3])
length(x[7])
j[-4][-6]['w']['o'] = {'s': {'x': {'y': 'f'}, 'v': {2: 't'}}, -5: {'r': {'q': {'f': 5}, 'c': {'e': 0}}, 4: {'p': {-6: {'v': -6}, 6: {'e': -2}}, 'w': {'x': 'x'}}}}
length(b[3]['t']['l']['u'][-5]['d']['l']['z']['e'])
test(m[1][0])
length(e['t']['f']['p']['s']['t'])
length(x[-8][9][-7]['f']['s'])
r[1]['z'][1]['c'][-1] = 2
x['m'][9][-8] = 'o'
n['c'][-9]['j'] = 'x'
length(j[4]['r']['v']['p'])
t[-1][1]['a']['q'][6][6]['c'][-6] = a[-2][6]
j[0] = 's'
s[-4][-2] = d
length(k[7]['o']['e'])
u[0][-5][5][7]['o']['o'] = {9: {-1: -7}, 's': {'p': 'p'}, 'u': {7: 'k'}, 'k': {'a': 'w'}, 7: {2: 'r'}}
length(q)
test(e[2][5][1]['m']['s'])
s['b']['u'][-5]['h'][-1]['k'] = 2
o[0]['u']['g'][6][-6] = -7
s['m'][8][9]['i'][7] = i
test(d['a']['y']['o']['m'][-3])
length(b[3][7])
p[-1][3]['d']['c'][0]['o']['i'] = -3
i[-2]['p']['h'] = r[0][5]
test(v['y'][7][2])
m[-9]['c'][-7]['y']['w']['z']['u'][6]['e'][-8] = v
length(m[-4][-4]['m'][-6])
o[4]['b'][-5]['c'] = {0: {3: 'z'}, 9: {-8: -7}, 'z': {8: 4}, -8: {'z': 9}, 'p': {'t': 'g'}}
length(u['m'][4]['r'][8]['v']['r']['y'][-6][4]['o']['i'])
p[-1]['h'][-9]['x'] = {-8: {2: 8}, 7: {'k': 0}}
s['y'] = 'v'
e['t']['h'] = -4
z['z'][-6]['v'] = {'i': {'o': 1}, -8: {'v': 'n'}}
test(a[8][-5])
b[1][-6][3][3][5][-8] = o[4][-6][7]['y']
u[8]['u']['c'] = e['t']['f']['p'][-3]['o'][5][5]
length(l[-9]['b'][0][1]['a']['q']['s']['k'])
test(h['i']['f'][0]['u']['g'][6])
b[1][6]['z']['e'][-1] = y['c'][8]
i[-2]['p']['h'] = -2
y[8]['v']['s']['s']['i'] = {'a': {'a': 'r'}, 2: {-3: -6}, 'b': {'n': 'x'}, 5: {7: 8}, 'f': {7: 'y'}, 8: {'c': 9}, 9: {'e': 'u'}, 'j': {0: 3}, -6: {'b': 3}, -5: {0: -1}}
test(m[-5]['v']['i']['d']['x'])
h['i'][-5]['a'] = d['h'][-7][0][5]
w[-5] = 'k'
test(l['f'])
test(w)
c[-9][-2]['q'] = 'p'
v['r']['s'][5]['g'] = 'd'
test(g)
f['k'][-7][0][-2] = -9
c['e'][-9][1]['e'][-8] = y[0]['f'][5]
length(u['e'][-5]['j']['w'][-9])
n['q']['c'][-1][6]['b'] = -9
y[0][9]['k']['t'] = m[-5]
p[-1]['y'] = {8: {6: 't'}, 'w': {'b': 's'}}
test(v[-1][-2][-5][4][-2]['l'][-8][7][2])
q['y']['w']['p']['v'] = {3: {-9: 6}, 'e': {-8: 's'}, 'b': {'x': -9}, 'w': {-8: {'i': 'p'}, -5: {-9: 2}}, -9: {'y': 9}, 4: {-7: 5}, -5: {'s': 'r'}, -4: {-7: -2}}
length(a[-2][8][6])
test(v[-1][-2][5][-2]['v']['q'])
test(e['b'][-5]['k'][3])
test(x[-8]['k'][6][-3][4][1])
q[-1]['v'][7][8]['k'][6]['h'][0]['a'] = o[0]['u']['g'][6]
w[-4][-3]['d'][-8]['p'][9]['o'] = {-7: {'e': {'o': 'z'}, 6: {-5: 'v'}}, 'n': {'q': 5}}
o[-3]['c'][8][-4][-7] = -7
s[-5]['z'][-7][7]['k']['l']['w'] = 'j'
length(q[-1]['v'])
r[1]['z'][1]['c']['d'][7] = 8
test(f[-1]['l'][-4]['b']['j'][8]['v'])
length(s['b']['u']['f'])
length(q[-1]['v'][-5][7][9][2]['n'])
length(t)
m[-9]['c'][-7][-5]['z'][-7][7]['k']['l']['d']['r'] = q[-1]['v'][-5][7][9]['i']
z[4]['u']['s']['n'] = g[5][7]['j'][-3]
h[4] = {8: {9: {'n': {-1: 'b'}, 'j': {'l': -5}, -9: {-6: {'v': 1}, 'j': {'w': 'k'}}}, 'd': {'r': {'p': 'z'}, 4: {'o': 8}}}, 'b': {-3: -8}, 'w': {'t': {'k': 'g'}, 'g': {'a': 3}}}
m[-5]['v']['e'][-8]['x'][-7]['a']['b'] = -3
x[7][-5][5]['y'] = 6
test(k[-7]['f']['s'])
test(u['g'][1]['c']['v'][5]['s']['s']['e'])
z[-7] = 0
test(e[2][5][7]['q'][4])
d[7]['y']['f'] = 'e'
t[-1][1]['a']['q']['s']['k']['m'] = 'i'
length(n)
j[-4]['u']['u'] = e[3]['v']
l['s'][-1][-7]['v'][-4]['y'] = x['m'][9]
m[-4]['u']['n'] = -5
test(s[-4]['d'])
d['l'] = j['p'][3][-6][2]
u[0][-5][5][-4]['b']['j'][-1][6]['u']['d'][-2] = 2
e[-8]['c']['v'] = 'c'
length(h)
c['i']['d']['p']['x'] = {-4: {-6: 't'}, 'u': {6: 'm'}}
test(l[6][-4][-5][9]['v'])
length(o[-3]['c'][8]['v'][-8]['u']['g'])
test(h[3]['i'][-2])
test(p['k']['a']['o'])
test(t[-5]['h'][3][-4]['m']['q'][-6])
length(d[9][7]['e'][7]['p'][-9][-2][-9]['t']['i'])
test(g[8]['e'])
x['m'][9]['x'] = {'z': {2: {9: 'z'}, -3: {-1: 9}}, 6: {-2: 'o'}}
length(e['g'][7]['v'])
a[-2]['p']['l']['y'][-7] = k
q['y'][7]['o'][2]['w'] = f[-1]['t']['b']['t']
z[4]['u'][0]['i'] = {1: {'d': 0}, -6: {9: {-1: 'n'}, 'u': {'x': {'x': 'w'}, 'v': {9: -6}}}, -2: {'z': -1}, 6: {'y': {2: {'v': 'c'}, 4: {-1: 1}}, 'c': {-9: 6}}}
test(a[8][-5]['i'])
test(g['i'][7][-9][8])
test(l[6][-4])
f['k'][-7][0]['c']['m'] = -9
length(g['n'])
test(y[-7]['q']['o']['b']['r'])
o[-3]['c'][8][-4][-7] = {1: {5: 5}, -5: {'i': 1}, 'b': {2: 'p'}, 'f': {7: -2}}
test(y['c'][2])
k['t'] = 'e'
e[2][5][-4] = 'i'
h[4]['w']['t']['k'] = {-8: {2: 'a'}, 'i': {'m': {-4: 'w'}, 6: {7: -6}}, 'z': {-6: {3: -5}, 'r': {'u': 'd'}}, 9: {9: {'n': 'h'}, 'z': {-8: {'b': -9}, 'y': {-2: 'k'}}}, 7: {4: {8: -2}, -3: {-2: 'c'}}}
o[0] = {9: {'f': -7}, 'p': {'l': 'p'}, 'w': {'d': 'u'}, -1: {'e': {'s': 2}, 'v': {7: 3}}, -3: {-8: 'o'}}
test(z[-4][-4])
r[1]['u'] = r[0][6]
l[0]['g']['m'][7]['o']['o'] = 'd'
length(q[-1])
n[4]['s']['g']['j'] = 'o'
l['u'][3]['y'] = w['s']['v']['k']['b']['t']['r'][-1][2][-8][-9]
s['y'] = 'l'
s[3] = 'e'
y['c'][2]['i'] = 1
length(j['t'])
u[0][-5][5][1]['m']['s'][3] = {3: {4: 'n'}, 'd': {'k': 'r'}, 'm': {'n': -3}, 's': {'o': 'r'}, 'b': {-3: 'h'}, 'x': {-4: 0}, -4: {'w': 3}}
test(g)
r[7]['d'][9]['j']['o']['v']['f'] = a[-2][8]['d']
e[2][5][7][-1] = j[5][8][5]['d'][-8]['p'][9]['o'][-7][6]
j['p'][3][-6][2][7] = 9
m[-5]['v']['i']['d']['p']['o']['z'] = 7
w['s']['b']['s']['i']['d'] = {'d': {'b': {'x': {-8: -8}, -9: {-6: 1}}, -1: {1: 'i'}}, 'g': {0: {'l': 'f'}, -2: {8: 'q'}}}
test(p[-1])
c['j'][-2][-6] = 6
length(e)
test(v['l'])
length(z[-4][6])
z[4]['u'][-5]['h']['i']['v'] = 'z'
o[0]['w']['y'] = {'a': {5: 'z'}, 8: {'l': 8}, 'r': {5: -2}, -3: {'o': 'o'}}
p[-6][-8][-5][1][-6] = u
test(w['s']['x'])
length(y)
length(h)
w['s']['x']['z'] = t[-7]['j']['p']['a'][-5]
length(a[-2][8])
length(k[1][1])
u[8]['u']['c']['l'] = d['a']['y']['o']['m'][-1]
test(d[7])
length(i)
t[8]['b'] = 4
v['i'][-9]['o'][-4] = 'e'
length(r[7]['y']['b'])
i[4]['g']['g'][1]['c'][-6]['l']['c'][8][-4][-7]['b'][4] = 'r'
y[8][1][6][9]['m']['i']['p'] = {1: {2: 's'}, 'd': {'m': -6}, -2: {'j': {'c': 6}, 'n': {'j': 0}}}
test(r[7]['l']['r'][-2][3][7]['o'][1])
i['a'] = f[-1]['t']
d['z']['k']['n'] = 3
q[-1]['v'][-5][7]['t'] = {'j': {'y': {'b': -3}, 8: {'a': 'r'}}, 4: {5: 4}, -2: {1: {'g': -6}, 's': {-9: 'q'}, 4: {'d': 'r'}}}
length(t[-7][-7]['f']['c'])
r[1]['u'][0] = {'x': {'a': 5}, 'k': {0: {-7: 0}, -2: {'d': 8}}, -4: {-7: 'w'}, 's': {6: -8}, 1: {-1: -3}}
test(m[-9]['c'])
length(d['z']['d'])
u['e'][-5]['w'][-1] = i[4]['g']['p']['u'][-9]['h']['x'][2]
length(z['z'][-5])
g[0]['e']['b'] = 4
x[7] = {1: {'l': 'y'}, 2: {'o': -1}, 9: {-8: 'r'}}
h[3]['e']['d'][7]['j']['o'] = 'g'
e['g'][7]['v']['d'] = -9
length(i['a']['b']['t']['e'][6][-5][-2])
h[3]['o'] = 'g'
t[-7][7][-6] = {'y': {'t': 'd'}, 9: {-8: -9}, 'l': {'y': {4: 0}, 4: {'l': 'g'}}}
a[8][-5]['i']['d']['d'][1] = -1
test(v[5][4][-4])
o[-3]['c'][-1]['d'][2] = m[1]['p']
length(d['l'])
m[-4]['h'][1]['x'] = s[-5][-6]
b[3]['d'][-2] = 'c'
b[1][2][8]['j'] = {'h': {'j': 'f'}, 's': {'q': -2}}
length(w['s']['g'])
x[-8][-2][-6]['w']['q'] = {'h': {'q': {7: -6}, -8: {3: -5}, 6: {2: -9}}, -9: {'b': {-4: 6}, 'e': {'x': 7}}, -1: {'i': {6: {2: 3}, 'f': {'q': -5}}, 'k': {'w': 3}}, 7: {4: 't'}}
v[-6] = -6
r[7][7] = 'i'
u[8][7] = 'g'
length(o)
n['c']['u'] = 't'
l[0]['g']['m'][7][-1]['s'] = {'y': {'r': {'r': -8}, -9: {'r': -7}}, 'x': {-4: -8}, 2: {0: {'p': {-3: 0}, -3: {8: 0}}, 7: {7: -5}}, 'i': {-8: 'g'}, 7: {-6: {'s': 'h'}, 't': {-1: 1}}}
n['v'][-6] = 'j'
u['g'][1]['c'][-6]['x'][4] = 'a'
e['g']['k'] = 'h'
length(x['m'][6]['c']['u'][8])
length(t[-5]['i'][9]['d']['l']['z'][-8][3])
length(m[0])
a[-2][6][-1]['a']['u'] = v
test(m[-4]['h']['i'])
length(l[0]['g']['m'][1]['m']['l'])
test(f['k']['g'][4]['h'])
e[-8]['g']['z'] = i[4]['g']['e'][-5]['w'][-1]
a[-2]['p']['s'][3] = {4: {2: 'r'}, 'o': {-6: -6}, 'r': {-5: 8}, 'y': {-8: 'i'}, -5: {-5: 7}, -2: {8: {5: -7}, -5: {'g': -6}}}
test(b[1])
test(a[-2][6][-1]['a']['u']['i']['a'][-9][-6]['v'])
h['i'][-5]['t']['v'][-9]['o'][5] = 'k'
r[-6] = -8
test(c['s'][-9][0][-6][-9])
test(k['j'][-5]['a'])
test(u[0][-5][5][1]['m'][-6])
p['c']['x'][-6][-7]['c'][-8] = c['i']
n['q']['c'][-1]['z']['k'][-7]['y']['n'] = 'h'
x['s'] = -9
length(i[-2]['p'])
n['q']['c'][-1] = p['c']['x'][-6][-7]['c']['v']['a'][3]
length(t[8][5][3][9]['q']['a'])
o[0][-3][2] = 's'
length(w['s']['g'])
test(s[-4]['c'])
c['i']['d']['p']['o'][-5] = n[4]['s']['g']
h['p'][1][-5]['x'] = -5
w['s'][-3]['c']['p'][2] = i
f['k'][-7][0] = w['p'][-9]
test(f)
test(r[1]['a'])
z[4]['u']['b']['m'] = {0: {'e': -8}, -7: {'n': 4}, 'z': {'b': 4}, -1: {9: {'g': -1}, -2: {'o': 'j'}}}
z[-4][8][0] = {'k': {8: 'g'}, 'b': {-9: 'a'}, -5: {7: 'c'}, 'z': {5: 'o'}, 'f': {3: 3}}
test(t['z']['n'][0]['a'])
test(o[4]['b'][-5]['c'][-8])
length(w['p'][-1])
test(v[5]['l']['r'][-2][3][7]['i'][8]['b']['x'])
r['v']['a']['l']['q']['o'] = g['s'][-8]['j']['m']['w']
h[4]['b'][0] = 5
z[4]['u']['b']['m'][-7][6] = 3
g['i'][0] = s['m'][8][9]['a']
o[-3] = f['k'][-7][0]
length(l['s'][-1][-7])
length(g[8])
length(v['y'][3][6][-7][-8]['s'][-9][0])
f[-1]['t']['b']['t'][-3][-1][1]['c'][-8]['d']['n'] = v['y'][3][0]['d']['f']['j']
length(s[-5]['z'][-7][7]['i'])
y[-7][3]['z'][0][-9] = {9: {-3: -3}, 's': {7: 'y'}, -5: {-5: {'x': 1}, 4: {'p': -9}}, 'l': {8: 'u'}, -1: {'p': 1}}
length(z['z'][9])
test(t['t']['b'])
s[-4][-2] = o[-3]
test(z)
test(p[-6][-8]['h'][-2])
e[-8]['n']['j'] = 'j'
p[-6][-8][7][2][3] = {'x': {'f': -3}, 2: {'a': 'j'}, -4: {'v': 'p'}, 'l': {-8: 'm'}, 'g': {'z': 4}}
length(t[-6][-9][6][4]['s'])
s[5] = {'s': {-9: 'l'}, -6: {'d': 8}}
length(l[-9]['b'][0][6][4][-2][-5])
l[0] = z[4]['u'][4][7][6]['d']['l']['z']['e']
t['z']['n']['m'][-7] = 't'
k[1][-3][-6] = {'q': {'s': 7}, 5: {-9: -7}}
u[-5] = {'b': {'e': 'h'}, 'o': {5: 0}}
length(l)
i['a']['b'][-1]['c'][2] = {0: {'e': 'a'}, 5: {5: 3}}
c['j'][-4] = {5: {'w': 'i'}, 7: {-8: 'z'}, 8: {'j': 't'}, 'm': {8: -9}, 'p': {'r': 1}, -8: {9: 'm'}}
q['y'][7]['d']['u']['y'] = 'y'
s[-4]['c']['w'] = -1
test(n['c']['j'][9]['c']['v']['a'][3])
v['i'][-9]['o'][-4] = {0: {'s': {-1: 5}, 'd': {'t': 't'}, 'f': {'i': 'y'}}, 1: {'h': -1}, 's': {6: 'h'}, -4: {-2: {'v': 'r'}, 6: {7: 'p'}}, 'l': {'y': {'j': 8}, 8: {'g': 'w'}}}
test(c[-9][-7][1][-2])
p['k']['a']['o'][8]['s'] = {2: {9: {-9: -3}, 'r': {-4: -8}}, -6: {'c': 'h'}, 'w': {'q': {-2: {'q': 8}, 6: {'r': -4}}, 3: {'h': 4}}}
length(e[2])
u['g'][1]['c'][-7] = 6
f[-1]['l'][7]['q'][4][-4] = {'b': {'z': {'e': {'t': 'r'}, 'w': {5: -3}}, 'v': {-3: 'u'}}, 'e': {-9: 'z'}, -3: {'q': {9: 5}, 'z': {-1: 'y'}}, -2: {-4: {3: -1}, 'l': {'t': 0}, 'n': {6: 2}}}
x['m'][9][6] = 'k'
d[1]['g']['z'][9][6]['n'][9] = {3: {'f': 'k'}, 5: {7: 'c'}, 'j': {-5: 'b'}, 'x': {'d': 8}, -8: {-7: {6: -5}, -9: {'q': {6: 'v'}, 'c': {4: 'f'}}}, -7: {7: 3}, -3: {'j': {-2: -6}, 6: {'o': 'y'}}}
k[-7][7] = 'g'
h[3][2]['f'] = 'm'
length(q['y'][7]['d']['u']['e']['z'])
length(j[-1])
h[4]['w']['g']['a'] = {2: {'a': 8}, -2: {-7: {'v': 1}, 'j': {'q': -1}}}
test(o[4][6][4][0]['k'])
length(c['s'][9][6]['q']['o']['s'][-6])
x['m'][9]['x']['z'][2][9] = n[4]['s'][-2][-7]
b[3][-9] = 5
test(n['v']['l'][-9]['q'][4])
v['r']['l'][5]['x'] = 5
length(d[1]['g']['h'])
o[0][-3][-8] = {'x': {-2: 'k'}, 'z': {1: {'h': -7}, -3: {4: 5}}, -2: {-9: -5}, 7: {'m': 'b'}}
a[-2]['p']['s'][3]['y'][-8] = 'p'
d[9][6][-3]['q']['q']['t']['v']['s']['u'][-9]['h']['x'][6][8]['a'] = h[4][8][9]['n']
y['c'][5]['i'] = 'r'
e['t']['m'] = g[5][7]['j']
e['b'][-5] = {'d': {8: {1: {'c': 'y'}, -5: {9: -5}}, 'b': {'c': 1}, 'v': {0: 'w'}}}
g[8][-1]['x']['m'] = a[-2]['s'][-9][7]
u[0][-5][5][1]['m']['s']['m'] = 'b'
test(y[0][-1])
length(e['t']['f']['r'])
test(w[-4][-3])
z[4]['u'][-5]['r'] = {'c': {'p': {'r': 'y'}, 'c': {'l': {'h': 'g'}, 'g': {1: 9}}}, 6: {8: {-1: 3}, -3: {'r': 'e'}}, 'g': {'j': 8}, 'u': {'b': 'm'}, -9: {-8: 'z'}, -8: {'j': -5}}
u['g'][1]['c'][-8]['d']['x']['d'][9] = 'b'
q['y']['w'][-7]['t'] = {'i': {0: 'l'}, 'b': {-1: 7}}
length(h['p']['p']['a']['i'])
d['h'][3][1]['a']['w'] = {'h': {'d': 'k'}, 3: {6: 'r'}, -1: {9: 3}}
h[4][8][9]['j']['j'] = 'n'
n[3] = 7
q['y'][7]['o'][2]['w']['e'][6][-5][-2][-8][6] = b[3]['n']['p']
s['b']['u'][1]['m'] = x[-8][9]['j']
k[-7]['f']['j']['q'] = 'c'
k[-7]['f']['x'][8] = n['c'][-9]['c'][-1]
d['l'] = d
q['y'][-2]['f'] = 'r'
k['j']['p']['a']['k']['n'] = -4
length(d['z'][-7][5]['u']['l'])
m[0][-7][2][7]['z'] = 4
o[-3][8] = q['y']['a']
h[3]['i']['a'][-2] = 0
q[-1]['v']['j'][4][-7][0][-7] = -8
o['b'] = 3
test(n[4]['s']['g'])
test(d[7][6])
x[7][9][9] = v[5]['d'][9][-9]['c'][-1][-4]
test(i[4]['g']['m'][4])
s[-5]['y'][-6] = k[-7]['f']
length(e[3]['v'][4]['i'])
length(s[-5]['y'][-6]['c'])
length(s[-4][4]['p'][6])
q['y']['w'] = e
length(g[5][7])
length(f[-1]['l'][1]['m']['u']['c'])
t['a'] = i[-2]['p']
l['f']['g']['u'] = -1
test(i[-2])
s['b']['u']['f'][3] = d[-2][-3]['i']
y['c'][5][-8][-2] = 'u'
r['v']['a']['l']['q']['o']['x'] = 4
f[1]['n'] = -8
y[-7][3][1]['t'] = {'a': {'i': {8: 'a'}, -2: {'p': -2}, -1: {-4: 'o'}}, 2: {'g': 6}, 'b': {'v': 'f'}, 6: {-5: {8: 1}, -1: {'u': 'r'}}, -7: {-8: 's'}, -5: {-5: {'e': 'w'}, 'd': {-7: -9}}}
u['b'] = -5
test(x[7][1])
test(x['m'][9]['x'][6])
length(f['k']['g'][4]['h'])
r['v']['a']['l']['o'][5] = 'j'
length(n['v']['l'][-9][3][-4]['x']['q']['c'][-1])
w[-4][-3]['d'][-8]['y'] = l['u'][3]['y']
j[4]['c'] = 'd'
length(t[-6][3]['u'])
r[7][4][5][4] = {'s': {'c': {'q': 'd'}, 'e': {-8: 'd'}}, 'j': {'j': 'r'}, -1: {'e': {'b': 9}, 'o': {6: 7}, 'g': {'t': 7}}}
q['y'][-2]['y'] = {'q': {-9: {'h': 'e'}, 'f': {'e': -7}}, 'e': {'z': 'z'}}
w['s']['u'][-9]['u'] = 'e'
i[4]['g']['g'][1] = {-6: {'p': {1: 'd'}, -4: {'j': 'h'}}, -4: {2: {9: -2}}, -1: {-2: 5}}
k[-8] = {2: {'w': 'l'}, 8: {-8: 'm'}, 'o': {'z': 'm'}, 'w': {9: 'z'}, -8: {'q': 'd'}, -5: {-5: {'i': 8}, -1: {'u': 'k'}}, -1: {-5: {-8: -7}, 6: {'w': 'j'}}}
test(w['s']['x']['z'])
o[4][6]['y'][2]['c']['j'] = -5
m[3]['k']['g'][-3][9] = 5
i[4] = -4
test(d)
f['k']['g'][4]['h']['p'] = r
test(l['b']['p'])
test(e['g'][7]['v'])
j['t']['i'] = -1
length(o[0][-3][-8]['z'][-3])
test(o[4][-6][7]['y'])
length(o[-3])
a[-2][8][6]['i'] = k[-8][8]
p['c']['x'][-1]['s'][-1][1] = {'a': {-8: {'y': {'p': -7}, 7: {'i': 'g'}}, 'j': {8: 'y'}, 'z': {-6: -1}, 6: {3: 'm'}}, -1: {'y': {'y': -5}, -5: {'t': -9}, 'm': {'x': 2}, -1: {'b': -7}}}
q[-1]['v'][7][8]['k'][6]['h'][0][-2][-8] = 6
test(x)
x[7][9][9]['a'] = a[8]
n['v']['l'] = x['m'][9]['x'][6]
u[-5]['b'][-4] = e[-8]['g']['z']
length(f[1][7][-4]['a'][-5]['i'])
length(d[9][7]['e'][7]['p'][-9])
x[7][1]['f'] = 'y'
a[-2][-4][-3][7] = 2
length(s['b'])
t['a']['h'] = a[8][-5]['i']['d']['g'][0]
length(z[4]['u']['s']['n'])
t[-7][-7]['f'][2]['z'] = {'a': {'a': {'r': 'h'}, -3: {-1: 'w'}}, 'h': {-6: {'g': -6}, 'n': {'v': 'd'}}, 5: {'m': 'r'}, -9: {'s': 'i'}}
e[2][5][7]['q'][4][8] = 'z'
e['b']['z'][-7]['b'][2]['i'] = f[-1]['l'][7][-1]['s']['y'][-9]
w['p']['z'][-6][-9][3][-4]['x']['v']['l']['e'] = 'a'
test(b[1][8][3])
d['h'][3][8][-7]['a']['l']['o']['t'] = {'c': {'p': {'x': 'x'}, 6: {8: 4}}, 'r': {'n': 'z'}}
h[4]['b'][-3] = j
c['j'][-7][4] = 8
h['i'][-5]['a'][7] = f
length(c)
d['a']['o']['i'][3][-8]['v'][-1]['v'] = 8
m[-5]['v']['e'][-8]['s'][1] = p[-6][-8][-5][1][-6]['p'][-9]['i'][4]['e'][3][-5][2][5]
j[-1]['w'][-6][-7]['c'] = 'y'
test(k[-8]['w'])
u[-5]['o'] = {-6: {8: {'b': -8}, 'p': {5: -4}}, 3: {'a': {'t': 'd'}, 0: {'k': 3}}}
test(g[5][7]['j'][-5])
t[-6][-9]['x'][-4]['z']['s']['w']['q'][-2]['q'] = 5
b[3][-8] = 6
u['m'][4]['r'][7] = y[8]['v'][0][-2]['p']['h']
test(y[-7]['q']['o']['b'][2]['i'])
length(u['p'][9][6]['q']['o'][-5]['i']['d']['g'][0])
t[-1][1]['a']['q'] = 6
q[-1]['v'][7] = p[-1][3]['d'][6]
length(l['s'])
test(i[-2]['p']['h'])
length(x)
g['t']['r'][-1] = -9
h['p'][1]['z']['t'] = a[8][-5]['i']['d']
p[8] = 4
i[-2]['p']['h']['o'] = {-6: {3: {'b': {3: 8}, 'f': {'k': 'f'}}, 'o': {'u': {-4: 'k'}, -1: {'f': -4}}}, -3: {8: {9: -8}, 'b': {'i': 'h'}}}
test(x[7][9][9]['a'][-5]['i']['d']['g'])
z['z'][-6]['v']['i'][2] = 'v'
b['a'] = y[8]['v']['l']
g[3]['d'] = {-7: {'i': {4: 'o'}, 'x': {'e': 's'}}, 'g': {-6: -9}}
length(z[-4][0])
g[-8] = 3
i['a']['b'][-1]['i'][0][1] = -5
k[-7]['f']['f']['m'] = -9
n['c'][-9]['c'][-1]['n'][-7]['c']['v'][5]['s']['s']['e']['t'] = l['s']['a'][-1]
z[4]['u'][0]['i'][1]['d'] = 'v'
m[1]['e'][-1] = h[3][2]['n']
length(a[8]['s'][2][9])
t[-7]['q'] = y[-7]['y']['d'][-6]['c']
length(y['c'][8])
length(y['c'][5])
length(t[-1]['o'][5]['v']['f'])
k['q']['f'] = -9
p['k'][1] = -7
f['k'] = 5
length(z[4])
a[8]['s'][2][9][-9] = -1
z[4]['u'][1]['m']['l'] = 'x'
r[7]['d'][9]['j']['o']['v']['y']['q']['f']['e'] = y['c'][5][-8]
z['z']['p']['k'] = y[0]
k[-8][-1][6]['c'] = -5
test(c['s']['u'][-9]['n'])
p['c']['v'][-2] = 4
t['t']['b']['f'][-1]['t'] = 1
q['y'][-2]['y']['q']['f']['e'][-5] = 1
test(m[-4]['h']['i'])
k['q']['b'] = 'n'
z[-4]['v'] = -1
p['k']['a']['o'][-2][6][-1] = p
length(w['s']['x']['z'])
k[1][-3][-6]['q']['s'] = x[-8][-2][-6]['w']['q']['h']
g[8][-1]['x']['m']['f'] = h[4]['w']['g']['a'][2]
p['c'] = -7
r[7]['d'][9]['j'][9]['c']['v']['a'][3][-5] = 8
length(z[4]['u']['b']['m'][0])
test(v['l'][0])
length(u[8]['u'])
test(b['a'])
m[-4][-4][3][-1][0] = {-6: {'j': {'x': 's'}, 'f': {'z': 't'}}, 'm': {'v': 8}, 'v': {'q': {'d': 7}, 6: {'s': 6}}}
length(u)
test(r[0][6][0]['k'][-2])
test(l[-9]['b'][0][6][4][-2][5][-2]['q'])
p['k']['a']['o'][8]['s']['w']['q'][6]['y'] = 0
test(n[4][-2][1][8]['b'])
length(l['a'][-1])
k[7]['o']['x'][3] = -2
p[-1]['y'][8][-6] = {'t': {'o': {6: 7}, 6: {'p': 'i'}}, -1: {9: {'s': {'d': 'e'}, -2: {4: 'b'}}}, 5: {'y': {-6: 'm'}, -7: {'j': 'g'}}}
v['r']['l']['l'][-4] = n['c'][-9]['w']
f[1]['y'][5][4] = 'r'
length(d)
c[-9][-9]['e']['h'] = {-6: {'h': -6}, 3: {3: 1}, 'b': {'r': {'i': 3}, 'g': {'z': 'f'}}, -2: {-8: {'x': -8}, 'v': {'z': {'m': 'l'}, 'b': {4: 'f'}, 'o': {-1: 5}}}}
m['v'] = {6: {-6: {'i': {'i': {1: 6}, 7: {'e': 3}}, 1: {-8: 'd'}}, 6: {-7: {'c': {'r': 'g'}, 'd': {6: 'd'}}, 'w': {-9: 4}}}, 'n': {-7: {'g': {4: -6}, -9: {'z': 'g'}}, 'o': {-3: 2}, -9: {'a': 'g'}}}
f[1][-9][-7][3]['o']['d'] = -2
length(s[-5]['y'][-6][-1])
test(o[-3])
i[-2]['p']['h']['o'][-6][3]['b'][1] = 's'
w['s']['u']['g'] = {-5: {2: {'c': {2: -2}, 'o': {2: 'q'}}, 3: {8: 4}}, 7: {1: {-6: 'a'}, -6: {'x': 6}, 'w': {'z': -5}}}
length(c[-9]['e'])
a[-2]['s']['d'] = 'p'
z[-4]['j'] = m[1]['p']
u['m'][4]['r']['o'][4][-6][3][6][-7][-8]['i']['d']['k'] = c[-9][-2]
length(w['p']['x'])
s['b']['u'][0]['i'][-2] = {8: {1: 8}, 'b': {'c': -3}}
length(o[0][9])
n[4]['s'][-2][-9]['a'] = n
length(n['q']['c'][-1])
length(k[-8][-1][-5])
x['m'][9]['x'][-4] = {-3: {'x': 'a'}, 'd': {9: 'x'}, 'n': {-1: 'j'}}
n['v']['l'][-2] = i[-2]['p']['h']
length(l['s'][-1][-7]['v']['v'])
m[1]['x'][-3] = 3
test(m[-9][-2][-5][-8]['i']['d']['k'])
length(e['t'])
length(o)
test(o[4][-6][7]['w'])
length(h[3]['e'][5][7]['j'])
t['m'] = -3
test(l[0][-1])
k[-7]['f'][-1]['r'] = 'y'
q['y']['w'][3]['n'] = {'o': {-6: -2}, -6: {'d': 'k'}, 'j': {3: 'e'}, 2: {2: {-4: 5}, -5: {'i': {-7: 6}}}, 'w': {1: {'y': 'l'}, -1: {5: 'w'}}}
d['h']['o']['x'] = {'a': {'n': 3}, -4: {1: {'g': -1}, -9: {4: 8}}, 'w': {'t': 'l'}}
length(w[-4][-3]['d'][-8]['p'][9]['o']['n'])
u[0][-5][5][7]['q']['o']['q'] = -5
g[2] = 9
length(d['h'][-7][0][-6])
test(g[-1]['a'][3][2][8][9])
test(f)
length(b[1][-6][3][3][-3])
i['a']['b']['t'][-3]['n'] = 'f'
n['c'][-9]['c'][-1]['n'][-7]['c'][-6]['z'][1] = {8: {-3: 9}, 'c': {'h': 'p'}, 3: {'j': 'd'}, -3: {'h': 't'}}
d[7]['y'][2] = 5
test(p[-6][-8][7][2][3]['l'])
n['c'][-9]['c'][0] = w['p']['z'][-6][-9]
v[5]['l']['r'][-2][3][7]['o'][1]['f'] = 4
length(p['k']['a']['o'][-2]['p']['s'])
p[-6][-8]['h'][-2]['v'] = p[-6][-8]['a']
test(i['a']['b']['t']['e'])
test(i['a']['b'][-1]['c'][2][5])
w['p'][-6][-2][-6][-2][2][3][-1] = -6
u[0][-5] = -9
e[3]['n']['j'][3] = 'm'
test(y['c'][2])
test(z['z'][9])
length(d['a'])
test(h['p']['p']['a']['i'])
test(a[-2][6][-1][-6][-8]['h']['u'])
length(z['z']['p']['e'])
g['n'] = {3: {'y': -4}, -4: {2: {-5: -3}, 'l': {'y': 2}}, -6: {-8: {'d': -7}, 'w': {'j': 'u'}}, 'b': {'r': 'x'}, 4: {'i': {-4: 'q'}, 's': {-8: 'r'}}}
p['k']['a']['o'][8][-5]['i']['d']['d'] = q[-1]['v']['j']['g'][-2][1][6][9]['m']['k']
length(c['s'][-9]['i'][8][-8])
m[-9]['c'][-7][5]['s']['o'] = 'u'
e['b']['z'][-7]['b']['r'][5] = l['b']['p']['x'][8]['u']
i[-2]['p']['h']['o'][-3][8][9] = {'a': {-8: {'c': -1}, 'c': {7: 9}, 6: {0: {'r': 'j'}, 'f': {'g': -9}}}, -8: {-8: {-8: -2}, -1: {9: 7}}}
k[-7]['f']['s'][-7] = e['b']['l'][9][-1]
i['a']['b'][-1][-4][2][-5][2] = 'e'
c['i']['d']['p']['x']['u'][6] = {1: {-6: {'w': 'a'}, 'c': {0: 1}}, -2: {'l': 'u'}}
x[7][1][1] = 'v'
u['e'][-5][-8][-4] = 7
o[4]['r'][-3]['t']['c'][-8] = x[-8][9][-7]['f']
l['a'][0] = -5
test(y[0][-1]['y']['c'][-1][3])
length(o[-3][8])
y['c'][2]['z'] = j[5][8]['i'][-9][1]
length(w[-4][-3]['d'][-8]['p'][0])
m[-9]['c'][-7]['m'][8]['u']['h'][-6] = -4
test(s[-4][4]['p'][9]['w'])
q[-1][-4] = 'f'
length(w)
length(x['m'][6]['c'][-4]['r']['i'])
o[0][9] = 7
v[-6] = -6
i[-2]['p']['h']['o'][-6]['o']['u'][-9] = {0: {'u': {'x': -9}, -3: {3: 'h'}}, 't': {'a': 'c'}}
test(p[-6][-8])
test(y[8][1])
test(y[8][1]['h']['a'])
test(k[7]['o']['n']['i'])
d[-2][-3]['m'][-4][7]['o']['r'] = 'y'
s['b']['u']['f'] = 4
test(m[-5]['v']['j']['v'])
test(w['p'][-9][8])
x[7][2][-7] = 2
length(h[3]['i']['a'])
q[-1]['v'][7][-2] = 0
h[3]['e']['i'][7][6] = t['a']['h']['o'][-6]
s[-4][-8] = {-5: {2: {2: 9}, 's': {9: 'c'}, 'v': {8: 'm'}}, 5: {'r': 'm'}, 't': {2: {-3: 9}, 'r': {4: 'd'}, 't': {-8: -1}, -1: {'p': -3}}}
v['i']['l']['m']['r']['y'][-8][-8] = 'c'
v['l'][0][2] = f[-1]['e'][4][3]['d']['c'][0]['u']
i[-2]['p']['h']['o'][-6]['o']['u'][-9]['t']['a'] = -5
f[0] = n[4]['s']['d']
length(n['v']['l'])
i[-2][5] = {-7: {'y': 3}, 'r': {'h': -5}, 9: {-8: {'x': -7}, 's': {6: 'i'}}, 'v': {0: {'c': 'l'}, 'b': {-2: 9}}}
length(g['d'][7]['j'])
b[1][8]['b']['h'] = 6
q['y']['a'][-8] = -1
w['p'][-1][7] = {'e': {'r': 7}, 5: {'t': 'n'}, 'k': {'o': 'e'}, 'r': {-9: 'c'}, -1: {'w': -6}, 'w': {'b': -4}, -6: {'i': -8}, -4: {'g': -9}, -2: {4: 'i'}}
test(n['v']['l'][-2]['o'])
p[-6][-8][7][2][3] = {8: {0: {0: 'f'}, 'o': {'u': 9}}, 'q': {'f': 2}, 'g': {-4: {4: 0}, 'l': {3: 'c'}}, -1: {4: -3}}
length(g[8]['e']['s'])
h[4]['w']['g']['a'][-2]['j']['g'] = 'w'
length(z[-4][6])
e[3]['n']['o'][1] = -5
w[8] = 'u'
m[-4]['u'][7]['o'][-3] = 3
r[7]['y']['h']['b']['q'] = 'z'
length(m[3])
x[-8]['k'][6]['h'][0]['g'][3] = f
z[4]['u'][1]['m']['d'] = 5
h[4]['w']['g']['a'][2]['u'] = x[-8][-2]
x[-8]['d'] = k['j']['p']['h']['r']['v'][-4]['u']
v[-6] = 'b'
length(y[-7]['y']['d']['a'][8])
j[4]['r']['v']['p']['a'] = v['r']['s'][5]
test(q[-1]['v']['j'][4][-7]['y'])
c['s'] = {'e': {'t': 'o'}, -4: {'n': -1}, -3: {'a': 'x'}, -7: {0: -1}}
z[4]['w'] = 2
k['q']['h'] = 'c'
u[0][-7] = o[-3][8]
length(o[0][-3][-8][7])
n['v']['l'][-2]['o'][-3]['b'] = d['l']['l']['h'][3][-1]['p']
test(q)
test(c['i']['d']['p']['o'])
i[-2]['m'] = 'q'
y[0][-1]['y'][9]['q'][1]['z'][7] = 'w'
u[0][-7][-8] = 'i'
i[-2][5][9]['s'][6] = {'h': {'s': {6: -6}, 'k': {'q': -6}}, 'r': {'g': -9}}
a[8]['s'][-6]['c'] = t
test(w['s']['u'][4])
length(r[7]['l']['r'][-2]['z'])
test(f[-1]['l'][1])
length(q['y']['w']['t']['f']['p'][-3])
r[7]['y'][9]['v'][0] = 8
h['i']['f'][0]['p'][-4] = 'a'
p[-1]['y']['w']['b'] = 'o'
length(w['p']['z']['u']['v'][2])
length(x['m'][9]['x'])
length(g['i'])
length(u[0][-7])
v[5][4][4]['v'] = 'm'
w['s']['u']['g'] = {0: {5: 'r'}, 'd': {-5: -2}, 8: {'w': -7}, -2: {'x': 9}, 'x': {9: 'j'}, -1: {2: 'r'}, 't': {'m': {'f': 'q'}, 'o': {'h': 'b'}}}
o[0]['p']['l'] = {0: {'j': 2}, 3: {-3: 'y'}, 5: {'c': 'r'}, 7: {'n': -6}, 'p': {'a': 't'}, -7: {'u': 'd'}}
h[4][8][9][-9]['j'][6] = {5: {'i': {-5: 2}, 1: {3: -8}}, 'h': {'z': 'm'}, 'p': {'f': 2}, -8: {-4: {'e': 0}, 4: {-1: -5}}, -7: {'p': 8}, -5: {'t': 'e'}}
length(z['z'][-5])
q['m'] = 6
length(m[0][7][6][9][-9]['c'][-1]['n'][-7]['c']['v']['a'][3])
l[-9]['b']['l'] = 'i'
length(g['s'][0])
length(v['y'][3][0]['d']['f'])
s['b']['u'][1]['m']['l'] = o[0]['p']
b[1][-7][6][-5][-2][4] = {'y': {7: 0}, 0: {'f': 'u'}, 't': {'m': 'e'}}
r['v']['a']['l'][-1] = -1
y[8][1][6]['s']['s']['a'][3] = 'q'
i[-2]['p']['h']['o'][-6][3]['f']['k'] = p[-1][3]['d']['c']
q[-1]['v'][-5][7]['t'][-2]['s']['b'] = 0
c['j'][-2] = {4: {-7: 'k'}, 'o': {3: {-7: -2}, 'd': {7: 'a'}}, -7: {-2: 'b'}, 'z': {-9: -7}, -4: {'u': 'j'}, -2: {'q': 'y'}}
r['v'][4]['e'][-6]['b']['r'][7]['o'][-6][3]['b'][5] = 'u'
length(h['i']['f'][-3][8])
j[-1]['s'][6]['q'][-3] = 'q'
l[6][-4][-5][-2][6] = u['e'][-5]['j'][-7][-4]
test(i['a']['b'][-1])
u['e'][-5]['w'][-1][-9] = {0: {0: 'h'}, 'b': {-5: 'j'}, 'd': {'z': -7}, 6: {'d': 8}, 'n': {5: 'y'}, -7: {1: 1}}
a[8][-5]['i']['d']['d'] = 7
l[-9]['b'][0]['t']['c'] = 'n'
s[5]['s'][-9] = r[0][-7]['f']['l']['z'][-8][-7][3]
n['v']['l'][-2]['o'][-6][3] = {8: {'y': 'x'}, 'b': {'k': 8}, 6: {4: 'j'}, -1: {-3: {-6: 'v'}, -1: {9: 'w'}}, -9: {'k': 'y'}}
test(f[1]['y'][5])
test(k['q'])
l[-9]['b'][0][6][4][-2][-4]['g']['h'][-5] = -7
length(o[4][-6][7]['a'])
length(w)
u['g'][1][-1][-2] = 'i'
g['d'][7][-4][9][-2] = -5
u['g'][1][5] = {-8: {-5: {-8: {'x': 'e'}, 2: {-8: 7}}, 'f': {'g': -6}}, 'v': {'s': {6: -8}, 'n': {'w': -2}}}
e[2][5][7]['q'][4][-4]['b'][-5] = p['k']['a']['o'][-2]['s'][-9][7]['f']['u'][-6]['w'][-6]
d[-2]['s'][7][-8][2]['h'] = {'y': {-7: {9: -2}, -1: {'x': {'i': 'v'}, 'e': {'q': 't'}}, 'f': {'o': -7}}, 't': {3: {'o': 'i'}, 7: {'m': 8}}, 7: {-3: {9: {'s': -2}, -5: {'x': 5}}, 'v': {3: 'r'}}}
test(t['a']['h']['o'][-6][3])
length(u[-5]['b'][-4][-9])
length(z)
length(h['i']['f'])
length(s['m']['k'][-8]['y'][-4][2])
z[4]['u'][4][7][6]['d']['l']['z']['e'][-1][9] = 'w'
test(a[-2][-4][0])
test(s[-4]['t'][4][-2])
r[0]['r'][5][1][-4] = 'm'
length(r[7]['l']['r'][-2][3][7]['i'][8][4])
test(r)
length(r[1]['u'][0][1])
length(y['c'][2]['z'])
d[1]['g']['z'][9][3]['j']['a'] = x['m'][9]['x']['z'][2][9]
m[-9][-2]['f'] = -9
test(a[8][-5]['i'])
test(f)
test(j[-1])
length(e['b'][0])
test(a[8]['s'][-6]['c'])
test(a[-2]['p']['s'][3]['r'])
w['p']['x'][6] = {'s': {-6: 'b'}, 3: {'q': 'h'}, 5: {-5: -9}, -2: {'k': 'k'}, -9: {3: 'c'}}
length(i['a']['b'][-1][7]['x'])
test(u[0])
n['v']['l'][-2]['o'][-3][-7] = {7: {0: 'e'}, 'e': {'h': {'f': 0}, -3: {'d': 8}}, 'v': {'q': {-1: -6}, 6: {'r': 'i'}}}
length(s['b']['u']['s']['n'])
length(q['y']['a'])
length(n)
r[1]['u'] = {0: {0: 'q'}, 9: {'w': -5}}
length(r[1]['a'][-6]['u']['b']['b']['s']['y']['x'])
o[-3][8]['p'] = 8
test(u[8]['u']['c']['l'])
test(e[3]['n']['j'])
length(a[-2][-4][9][-7])
o[4]['r']['v'] = 's'
b[1][-6][3][3][-3][-9][7] = {2: {-7: -3}, 'r': {'m': {'w': -7}, -3: {'a': {'a': 9}, 'l': {'k': 'y'}}}, -4: {'a': {0: 4}, -4: {-3: 'o'}}, -9: {'i': {'m': -5}, -8: {4: -9}, 'm': {4: 'y'}}}
m[-5]['v']['i']['d']['p']['s'][3][-6] = j['w'][7]['j'][-3]
q[-1]['v']['j']['g'][-2][1]['h'][-2][-7] = -2
w['s']['v']['k'][5][-1] = 5
test(l['b']['p']['x'][-4]['p'][1]['f'][-5][5]['o'][-5]['m'])
length(b[3])
l['b']['p']['x'][8][0][-5]['k'] = 1
l['s']['v'][9][-6] = 's'
test(p[-1][3]['d'][6])
e[-8]['g']['z'][-9][0][0] = 7
test(r)
k[7][-6][9][6] = 'h'
k[-7]['f']['f'] = {'g': {8: 'l'}, 7: {-3: 'm'}, 8: {5: 'k'}, 'v': {'i': 4}, -9: {'p': 'v'}, 'y': {-1: 5}, -5: {4: {'k': -2}, 6: {-9: -7}}, -2: {'a': -4}}
m[-9]['c'][-7]['m']['t'][9][6]['t'][0]['z'] = -6
j[-4][4]['s'] = p['k']['a']['o'][8]['s']['w']
q[-1][-4] = m['v']
f['o'] = 3
length(h['p']['p']['a'][9])
x[7][2]['o'] = 'v'
t[-1][1]['a']['m'] = -8
w['s']['v']['k'][5][-2][-4] = {'x': {'t': -2}, 'r': {0: {6: -7}, 1: {'k': 'm'}, 'h': {4: -3}, 'n': {'b': 3}, 'w': {'a': -2}, -4: {-8: -5}}}
m[1]['e'][8] = {0: {'c': 'x'}, -5: {'y': -9}, 'z': {-8: -3}, 'f': {-7: 'b'}}
b[3]['t']['l']['u'][-5]['d']['l']['z'] = 'w'
length(i['a']['b']['t'][-3][-1][1][-1])
u['m'][4]['r'][8]['v']['r'][3][-3]['d']['j'] = 'o'
length(l[6][-4])
l['f']['g']['u'] = 'p'
b['a'][-2] = 'q'
length(h[4])
test(r[7][4][0]['k'])
length(f[-1]['l'][7][-1]['s']['y']['r'])
k[7]['o'][1]['k'] = 'u'
q[-1]['v'][-5][7][9][2][-5][-1] = {8: {0: 'g'}, 'i': {'q': 'p'}}
k[-7]['f'][-1]['x'] = x['m'][6]['c'][-4]
test(x[-8][9]['j']['l']['l'][0])
length(e['g'][7]['r'])
length(t[-7][1]['d'])
j[5][8]['q'][0]['y']['u']['s']['b'][-2][9][-8] = {'u': {4: {-9: 3}, 5: {'v': 'm'}}, 'j': {-7: {9: 'r'}, 'c': {'b': -1}, 4: {'g': -9}}, 4: {1: 'g'}, -2: {-9: -2}}
u['p'][-9]['i'][8]['j'][9] = 'l'
test(d['z']['k'][-6])
y['c'][2]['z'][-7] = m[-4]['u'][7]['o']
q['y'][7] = h[3]
f[-1]['t'][-4] = 7
length(m)
e[3]['v'][0]['p']['m']['u']['d'][-4] = 'w'
length(k['q'])
test(n['m']['f']['u'][-6]['w']['q'][7])
l[-9]['b'][0]['o'][5]['v']['f'][-8][5] = -9
z['f'] = -9
length(w[-4][-3]['d'][-8])
k[-7]['f'][-3][2] = -4
i[-2]['p']['h']['o'][-3]['b']['a'] = {0: {-7: {'z': {'t': -4}, -3: {1: 'x'}}, 'w': {-8: 'x'}}, 1: {4: 'u'}, 'l': {'s': {'t': {9: 'z'}, -9: {2: 4}}, 5: {-8: 'e'}}, 'v': {6: {'j': -1}, -2: {'v': -4}}}
i['a']['b'][-1][-4][2]['x']['p'] = 'n'
test(t[8][5])
o[-3][8]['u'] = {1: {-3: -8}, -6: {'u': 7}, 'x': {8: -8}}
j['p'][3][-6]['z'][8] = -7
u[-2] = u
test(o[4][6]['d'][9])
z[-4][8][0]['b'][-9] = c
m[-5]['v']['e'][-9][1]['j']['n']['k'] = 'c'
length(e['b'][-5]['d'][8][-5])
y[8][-1] = 'd'
p['k']['a']['o'][8]['s'][2][9] = f[-1]['e'][4][3]['d'][6]
test(z[4]['u'][4][7][6])
test(j[5][8][8]['j'])
length(w[-4][-3])
test(b[1][2][8][6][2])
test(m[-9]['c'][-7][-4]['d'])
f[-1] = -6
test(m[-9]['c'])
length(s[-4][4])
length(d['l'][-2]['s'][7][-8][2]['h']['t'][7])
m[0]['u'][8][5][3] = l['u'][3]['y']
length(a[-2][-4][9])
b[-4] = 5
length(e['t'])
length(r[1]['z'][1]['c']['b'])
test(c['s']['e'])
test(r['v'][4])
y[0]['f']['o'] = 'u'
length(m[0])
length(k)
test(w[-4][-3])
f[1][-9][-7] = 'l'
z[-4][-4][3] = {-7: {'g': {-4: 8}, 7: {'s': 'u'}}, 4: {'f': 7}}
test(s)
test(l[0][-1])
test(w[-4][-3]['d'])
length(x[-8][9]['j']['l'])
test(i['a']['b'][-1])
m['v']['n'] = 'm'
n['m']['f']['u'][-6]['w']['q'] = 'c'
t['z']['n'][-4]['q'] = p[-6][-8][-5][-7]
l[0] = w['p']['x']
p[-1][3]['d']['c'][0]['o'][8] = 7
length(f)
g['t']['r']['o'][-3][8]['u']['x']['b'] = 1
length(y[-7]['q']['o']['b'])
length(y[0][-1])
length(n['c'][-9]['w'])
length(i[-2][5]['r'])
m[-5]['v'][-9]['o']['r'] = -6
test(c['j'])
test(t[-7][1]['x'])
test(s[5][-6])
length(a[-2]['s'][-9][7]['f'])
a[-2]['s'][-9]['d'] = h[4]
e['t']['m'][-5]['i'] = -1
o[0][-1]['e']['s'] = l[2]
test(r['v']['a'])
test(e['g'])
test(l['u'][3]['y'])
q['y']['a']['u']['x'][-5] = {'q': {'h': {'j': 'j'}, 'g': {'y': {3: 'i'}, 'c': {'k': -4}}}, 7: {'k': {-9: 'm'}, -5: {'y': 'n'}}}
q[-1]['v'][7][-7] = {'h': {4: 7}, 3: {'o': 'j'}, 'o': {3: 'h'}, -2: {'n': 'u'}}
n[3] = 2
h['p']['p']['a'][0][1] = 4
d['h'][-7][0]['m']['a'] = g
test(h['i']['f'][0][-3][-8]['x'])
a[8]['s'][-6]['q'] = q[-1][-4][6][6][-7]['c']
e[-8]['s'][-9] = 'o'
test(v['l']['y'])
v['i']['l']['m'] = 0
i['a']['f'] = -2
test(r['v'][4]['e'])
r[7]['d'][9]['j']['o'] = 'r'
z['z'][-6]['v'][-8]['v'] = {'y': {'x': 'b'}, -6: {1: {8: -9}, 'x': {'i': 4}}}
length(i['a']['b'][-1][-6])
length(t['z']['n']['d'])
e['g'][7]['v'][-4] = 'l'
o[-3][8]['u']['x'][-5][7][-5]['y'] = {'a': {'t': 'n'}, 4: {2: -4}, 'g': {-2: 't'}, 'h': {'g': -9}, 'j': {-6: {0: -6}, 'k': {-7: 4}}, 'o': {'l': 's'}, 's': {-2: 'q'}, -9: {'r': 6}}
length(l['u'][-2])
v['l'] = 'v'
p[-6][-8] = n['v']['l'][-2]['o'][-3]['b']['a'][1]
test(s['b']['u'][4][7][6]['d']['l'])
h['p']['p']['a'][0]['a'] = {0: {'m': {-6: 'n'}, 6: {-2: 'j'}, -9: {8: 1}}, 4: {2: {-7: 'a'}, 3: {2: {-9: 'w'}, 'n': {0: -6}}}, -3: {2: {1: -8}, -5: {5: 8}}}
s[-5]['y'][-6][5]['n'] = a[-2][6][-1][-1]
q['y'][7]['i']['n'][-8]['l'] = -5
z[-4][0][6] = {'k': {'e': 'l'}, 3: {'l': {8: 'm'}, -2: {'z': 0}}, 't': {1: {-5: -4}, 'g': {'d': -7}, 7: {4: -8}}}
test(q['y']['a']['u'])
c['i']['d']['n']['q'] = {'h': {'d': 't'}, 'm': {'z': {'a': 'j'}, 7: {6: -9}}, 't': {'o': 'x'}, 'd': {-1: 7}}
e['g'][7]['r']['g'] = -4
x[7][9][9]['a']['s'][-6]['c'][-5]['h'][3]['t']['b'][-5] = 4
length(x[-8]['f'])
length(c['i']['d']['x']['d'])
x[-8]['d'][-1] = -5
test(r['v'][-7][-8]['n'])
test(x['m'])
length(f[0])
r[1]['z'][1]['c'][-3]['r'] = z[4]['u']['b']['m'][-7]
s[5][-6]['d'] = w['p'][-9][8]['u'][1]
x[-8]['k'][6][-3][4][1]['f'] = 3
t[-7] = 'l'
y[0][9]['k']['t']['v']['i']['d']['p']['s'][3][-6]['x'] = {3: {0: -1}, 'o': {'s': 'n'}, 6: {-4: -6}}
p[-1]['h'][-9]['o'] = {0: {'x': -2}, 2: {'m': {2: {-5: 8}, 6: {'r': 'j'}}, 5: {1: {'e': 'q'}, 'r': {1: 'r'}}}, 8: {-3: 0}, 'o': {-1: 0}, 'p': {0: 3}, 'y': {-5: 'i'}}
y[0][9]['k']['a'][7] = {0: {-5: 'l'}, 'b': {-8: -7}, 'k': {-3: -5}, 'q': {'y': {'d': 3}, 'l': {7: 'p'}}, -7: {6: 9}, -4: {'o': {'h': 's'}, 7: {-9: -3}}, -3: {-3: -3}}
d['h'][-7][0]['a']['y'] = {-6: {0: {8: 6}, 's': {7: 'x'}, -9: {'i': 'p'}}, -1: {-9: 'b'}}
u[8]['u']['t'] = a[8]['s']['w'][3]
x[-8]['d'][-1] = {'s': {'a': {0: 5}, -7: {'a': 'z'}, 2: {'r': -8}, 1: {'j': -2}}, 'm': {3: 0}}
w[-4][9] = 'x'
b[1][0] = 'c'
l[2]['m'] = 't'
r[7]['y']['c']['k']['a']['o'][8][-5][-5] = -4
test(t['t']['b']['f']['i']['e'])
q['y']['w'][2][5][7][-1]['s']['i'][-8] = b[1][-6]
length(a[8]['s']['w']['q'][-2])
l[2]['d'] = {3: {-4: -4}, 'b': {5: 3}, 'd': {'w': {-4: 'l'}, 7: {-4: 't'}}, -2: {'y': -2}, 't': {-7: 'a'}}
z['z'][-5][-5] = 9
n['m']['f']['u'][-6]['w'][-6]['u'] = -7
test(n)
length(w['p'][-6][-2][-1][6][4][-2][-5])
u['g'][1][5][-8]['f'][3] = {-4: {-2: 5}, -1: {-3: {'r': -3}, 'w': {'w': -1}}}
test(b[3][3])
length(w['p'][-9][8]['u']['x'][-5]['q']['g']['y'])
length(s[-5]['z'][-7])
length(o[4])
k['q']['s'] = 'z'
y[8] = 2
h[3]['g'] = {1: {'j': 'k'}, -4: {'b': {-8: 'u'}, -9: {'p': 'j'}}}
u['p'][4] = {-7: {'p': 7}, -4: {'h': {'z': -5}, 'r': {5: -1}}, 'f': {4: {-6: 6}, 'g': {'o': 'n'}}}
z['f'] = {'d': {'a': -5}, -9: {'y': 'f'}}
length(l)
q[-1][-4][6][6]['w']['w'] = {0: {'c': 'j'}, 'j': {2: {1: 'q'}, 'g': {-1: 'i'}, -9: {'o': 'q'}}}
test(a[-2])
p['k'][-2] = {0: {'k': 'j'}, 2: {-7: {9: 6}, 'w': {'l': 'w'}, 'f': {'g': 'q'}}, -4: {'k': {'e': {-7: 'j'}, 'w': {'i': 6}}, -4: {-1: {'v': 8}, 7: {'r': 3}}}}
w['p']['z'][-6][-9]['s'] = q['y'][7]['g'][-4][-9]
b[1][2][8][-2]['m']['o']['h'] = 'j'
test(f[1]['y'])
a[-2][-4][9]['o'][-5] = 's'
l['u'][3]['y'][-5] = 'f'
s['m'][8]['u']['h'][2] = -6
length(i[-2][5]['v'])
length(n[4]['s']['d'])
g['d'][7]['j']['p'] = {'j': {'o': -9}, 4: {'v': -1}, 5: {7: 'h'}}
k[2] = -4
length(t[8][5][5])
test(u['e'][-5][-8])
u['p'] = {'h': {'j': {3: -7}, 5: {'h': 'v'}}, 'k': {-8: 'n'}, 3: {'l': 'u'}, 6: {'a': {'i': 'h'}, 8: {'t': 3}, -5: {'h': 'e'}}, -2: {8: 'o'}}
test(g[0])
length(i[-2]['p'])
length(v['i'][9][7]['u'][-9]['p']['p'][-4][4])
t['z'] = {'x': {'y': {'b': 'c'}, 'c': {'i': 't'}, 3: {'i': 9}}, -4: {'q': {'q': {-4: 1}, 'c': {'x': {2: -7}, -4: {'u': 'i'}}}, -2: {9: 'q'}}, 'h': {0: {'w': 'j'}, 'i': {8: -7}}}
l['f'][7]['y'] = 'l'
length(j[5][8]['i'][-9][1][-7])
l['e'] = j[-1]
f[1]['y'][5]['q'] = t[-5]['i'][9]['d']['l']
d[-2][-9] = {'r': {'x': {'s': -4}, 'r': {9: -4}, -5: {-9: 3}}, 'l': {1: 8}, 6: {8: -2}, 7: {'j': -6}}
k[-8][-1][6]['v'] = 's'
o[0][-3][-8]['z'][-3][4] = 'x'
test(o)
m[1]['o'][6] = -7
m[-4]['u'][-5][2][-7] = m[-5]['v'][-9][-2]
test(x[-8][9]['j']['l'])
p['k']['a']['o'][8][-5]['i']['d']['g'] = -5
test(b['a'])
y['c'][5][6]['s'] = 'r'
length(b['a'])
m[-9] = 2
test(c['i']['d']['x'])
length(v[5]['d'][9]['j']['d'])
z[-4][5]['v'] = c['e'][-9][1]['j'][-2]['o']['d']
test(j['w'][7]['j'][-1])
n[4][-2][3]['d']['i'] = 'q'
length(q[-1][-4])
r['v']['a']['l'] = 'k'
n[4]['s']['g']['j'] = 'd'
d[9][7]['f'][9] = {3: {5: {'z': 4}, 6: {-5: 'r'}}, 'd': {6: 'x'}, 7: {'m': 'p'}, 9: {'v': 1}, 'h': {'n': 'i'}, 'y': {-6: 'a'}}
i['a']['b']['t']['e'][6][-5][-2]['l'] = m[3][0]
e[3]['v'][3]['c'] = 9
c['e']['c'] = d['h']['o']['x']['a']
y['c'][8]['i'] = 'j'
s['b']['u'][4][6] = 3
v['y'][7] = 's'
l[-6] = o[-3][8]['u'][1]
z[-4][8][0]['k']['q'] = 'x'
j['p'][3][-6][-8]['b'] = 'n'
j[-1]['w'][-6][-7]['c'] = 'm'
test(c)
length(t[8][5][3])
t[-1][6][4][-2][-5]['r'] = y
c[-9][-7][1] = 1
r[7]['y'][2]['c']['j'] = {-7: {'q': -3}, 'j': {'h': 'y'}, 'u': {'a': {-3: 'k'}, 'e': {'o': 'v'}}, -4: {'s': 's'}, 1: {'w': -2}}
z[-4]['j'][6] = t['a']['h']['o'][-3]
e[2][5][1][0]['p'][-1][-7] = -5
p['k']['a']['o'][8][-5]['i']['d'][-2] = 'b'
test(f[1][-9]['h']['h']['e']['q']['b'])
l['f'][7][-7] = -4
length(j[-4][-6][3])
test(i[-2]['p']['h']['o'][-6]['o']['u'][-9]['t'])
r[1]['z'][1]['c']['s'] = 5
a[-2][8]['d'][-1] = {0: {-6: -1}, 'x': {1: {9: 4}, 4: {-5: 'a'}}, -9: {'y': {'a': {'i': 't'}, -2: {'r': -8}}, 'k': {'j': 'h'}}, 'j': {2: -7}, 9: {-9: 8}}
w[-4][-3]['p'] = -5
length(n[4])
length(t[8][5][-2][-4]['x'])
test(z['f']['d'])
e[3]['n'][2][-5]['i']['i'] = -1
length(p['k'][-2][2][-7])
test(n['m'])
b[1][6]['b'] = n
u['n'] = 'z'
length(p[-6][-8])
w[-4][-3]['d'][-8]['g'][-2]['t'] = 'd'
w[-4][-3][1] = {'c': {-6: 'i'}, 3: {-1: 1}, 4: {'m': -1}, 6: {4: 6}, 9: {'u': 'p'}, 's': {8: 'u'}, 'b': {'f': 'u'}}
test(i['a']['b'][-1][-4][2][-5])
a[-2]['p']['s'][3]['i'] = -9
length(m[-4])
length(c['e'][-8]['s'][8]['x'][-9][-5])
r[0][5]['a']['g'] = 'n'
v['y'][3][0][0]['b'] = 'p'
v[-1][-2][-4]['g']['z'][9][6]['n'][9]['j'][-5] = z
w[-4][-3]['d'][-8]['y'] = 3
test(r[1]['z'][1]['c'][-3]['r'])
length(z)
u['p'][3][0] = e['b']['l'][9][-1]
j[5][8]['q'] = 'z'
length(t[-5]['h'][3][7][-7])
u[0][-7]['u']['x'][-5][7]['k'][-7] = -2
z[4]['u'][1]['m']['l']['l'][7]['r'] = 'm'
length(p[-6][-8])
t['z']['h']['g'] = -6
b[3][7][2]['f']['y'] = {'y': {'i': {'y': 4}, -3: {'a': 9}}, -5: {-7: {-3: 'r'}, 6: {-8: 'h'}}, -1: {-7: -7}}
w['p'][-9][8]['u']['x'][-5]['q']['g']['y']['w'] = 'l'
q['y'][-2]['y']['e']['y'] = r[0][6][0]['s']
test(t[-5]['h'][3][7][-7])
length(s['b']['u'][1]['m']['l']['l']['p'])
test(p[-6][-8])
d[-5] = 8
length(f[0])
u['g'][1][-6][-4]['j'] = 1
u['p'][6]['a']['i'] = e['t']['m'][-5]
u[-5]['o'][3][0][-3] = t[-1]['t']
length(o[0]['w']['y']['a'])
test(t[-1])
j['p']['x'][1][4]['m'] = {-6: {-1: -2}, 'm': {'i': {'z': 6}, 1: {'z': 'e'}, -3: {-2: -8}}}
test(d[7]['i'][2])
test(w['s']['b']['s']['i']['d'])
g['s'][0][3][5]['a'][3] = 'r'
i[-2]['p']['h']['o'][-3]['q'] = 9
p[-1]['y']['w'][8] = {'c': {'s': 'n'}, 'i': {'c': -8}, 'h': {-5: 8}, -9: {'f': 0}, 'l': {'b': -5}, 'u': {6: 'a'}, 9: {-6: 3}, 'y': {-6: 8}, -7: {5: 4}}
length(b[3])
n['m']['f']['u'][-6]['w'][-6]['k'] = 'n'
test(z)
length(v['y'][3][6][-7][-8])
h['i']['f'][-3][8]['u'][-6]['i'] = 'a'
length(n['q']['c'][-1])
length(b[1][6]['b']['v']['l'][-2]['o'][-6][3][-9])
length(b[3])
length(d['l']['a']['y']['o']['m'][4])
i['a']['b'][3] = {-7: {1: -3}, -3: {'e': 'o'}}
length(g[8])
test(o[4][6][4]['g'])
q['y'][-2]['y']['e']['y'][6] = 6
test(o[0])
o[-3][8]['u']['x'] = 'i'
length(r['v'][-7]['c']['g'])
b['n'] = {0: {-4: -4}, 'a': {'g': 'b'}, 'b': {-6: -8}, 'u': {4: -5}, -1: {'n': 'a'}}
n[4][-2][1][2][8][-4]['w'][-3] = 2
h[3][2]['n']['i'] = y[-7]['q']['b'][0][-5]
length(q['y']['a']['u'][-6])
l[-9]['b'][0]['o']['c']['u']['f'] = 'r'
length(r[0][5]['a'])
test(o[-3][8]['u'][-6])
length(q[-1])
a[8]['s'][2]['r']['t'] = 'n'
e['b'][-5]['d'][8][1]['c'] = 'z'
h['i'] = -1
t[-1][6][4][-2][5][-2][-1][-3] = 4
length(v['y'][3][6][-7][-8]['j'][-2][-7])
w['p']['z'][-6][-9]['q'][4][-4][-4] = {'y': {-2: 'k'}, 'j': {7: 'p'}, 'g': {-5: 'c'}, -2: {7: 'm'}, 7: {'d': 'n'}}
test(g[8]['e']['i']['w'])
length(z['f'][-9])
f[0]['m'] = 's'
length(d['h'][3][1]['a'])
n[4][-2]['n'][0][-4] = {'x': {-2: {6: {-4: 't'}, 'n': {9: 't'}}, 'n': {'y': {-3: {0: 4}, -2: {4: -1}}, 3: {6: 9}}}, 'j': {3: {'s': 't'}, -7: {'c': -5}, 'j': {-6: 'j'}}, 'z': {'w': 'm'}}
z['f']['d'] = v['y'][3]
i['a']['b'][3][-7][1] = 'g'
j[-4][-4]['s'] = -9
length(y[-7][3][-6][1])
e[2][5][7][-1]['s'][2][7]['b'] = 'm'
length(c['e']['c'])
v[5]['l']['r']['r']['m'] = 5
c['s'][-7][1] = {'h': {'h': {'l': 'x'}, -6: {'b': {'p': 'p'}, 'f': {2: 'd'}}}, -5: {-8: {'b': 7}, 6: {0: 3}, 5: {1: 'f'}, -2: {'v': 'n'}}, 'o': {4: 'x'}, 6: {-1: {'s': 'a'}}}
length(g[3]['l'][-8])
u[-2]['g'][1][5] = 'q'
z[4]['u'][1]['m']['l'] = 1
test(r[1]['z'][1]['c']['o'][-7])
test(i[-2][5][9][-8])
p['k']['a']['o'][-2]['p']['l']['y'][-1][6][4][-2][5]['h'] = 7
test(d['z']['k'][-6])
c['j'][-2][-7][-2] = 'v'
c['j'] = 2
w[-4][-3][1][6][4] = u
test(a[-2])
test(r['v']['a'])
l['f']['g']['u'] = p[-6][-8]
d[1]['g']['h'][-5] = q['y'][7]
m[1][-7][-1]['z'] = 1
g[0]['h'] = 'z'
e[2][5][7]['q']['o']['q'] = l['f'][7]
test(n['v']['l'][-2]['o'][-6]['o'][-1])
o[-3][8]['u'][-6]['u'] = 'l'
j['w'][7]['j'][-3]['x'][3][0] = 4
c['e'][-8][-3]['w'][1][-7][-1]['z'] = 'y'
test(m[1]['e'][-1]['i'])
e[2]['t'] = 'h'
y['c'][5]['y'] = 'o'
f[1][-9]['h']['h']['c'][-1][7] = g[3][-5][3]['v'][-4]
x[7][2]['b'] = -6
length(m[0][7][1]['u']['x'])
test(h[3]['e'])
length(c['i']['d']['x'])
d[-2][-9]['r']['x']['m'] = 'k'
x[-8]['d'][-1][9] = {'o': {2: 'c'}, -9: {-7: {2: 8}, 'x': {'y': 'q'}}}
w['p'][-1][7][-1]['w'] = {'k': {2: -9}, 'd': {'x': -6}}
z[4]['u']['s']['n']['x'][3]['t'] = 'u'
l[-6][7] = d['h']
length(d['l']['l'][7])
v['x'] = {'p': {'i': {-2: 'b'}, -2: {0: 9}}, 'c': {0: 'i'}, 'd': {'m': {'k': {'i': 3}, 7: {-5: 'i'}}, 'w': {-4: 'w'}}, 'w': {4: 'n'}, 9: {-4: -5}}
z['f'][-9]['y'] = {'y': {'x': -5}, -4: {'p': {'a': 9}, 'w': {'i': 'm'}}, 5: {6: {-3: 7}, 'f': {'l': 6}}, 'o': {'j': {1: -2}, 6: {9: 7}}, 7: {-6: -8}}
n[4]['s']['d']['d'] = {'h': {'u': 'l'}, 's': {0: 8}, 'm': {'j': 'v'}, -4: {5: 'n'}, 't': {'o': 3}}
n[4]['s']['g']['c'] = p[-1]['y']['w'][8]['i']
length(d['z']['k']['t'])
length(d[9][6][-3]['q']['p'])
x['m'][9]['x'][6][-2] = 'j'
d['h']['o']['x'][-4][1]['g'] = 'd'
i[-2]['p']['h']['o'][-3]['b']['a']['l']['s']['t'][9] = {0: {'r': {'q': {-1: 'j'}, -9: {'h': -6}}, 'e': {'y': {-6: -4}, 2: {9: 1}, 'r': {6: 'z'}}}, 7: {'t': {4: {'t': 7}, 'g': {8: -9}}, -9: {5: -5}}}
length(m[0]['u'][-1][1]['a'])
c['s'][-3]['e'] = 'w'
n['v']['l'][-1] = -1
length(y[0]['f'][5][-4][4][3][7]['i'])
q[-8] = 's'
p['k'][-2][-4][-4][-1]['d'] = {'a': {8: {0: 'l'}, -3: {'w': 2}}, 'h': {-9: -4}, -1: {'i': 'q'}, 6: {'a': {7: -5}, -6: {'t': 'g'}}}
length(k[7][-6]['l']['y'])
f[0]['d']['s'][0] = 4
u['p']['h']['j'][3] = o[4]['r']
length(y[-7]['q']['b'][0])
test(j[-4][4]['s']['q'][6])
s['m']['t'][9][6]['n'][9][5][4] = 4
t[-5]['i'][9]['d']['l']['b']['v']['l']['f'] = {'i': {2: 3}, 'm': {'w': 'k'}}
a[-2]['p']['s'][3][-2] = g[-6]['b']['r'][8]
n['v']['l']['f']['m'][7] = {'c': {9: 'r'}, 4: {-8: 'c'}, 't': {-3: 5}, -2: {9: 'r'}}
p[-6][-8][4] = s[-5]['z'][-7]
k[7]['o']['e'] = y['c'][2]['z'][-7]
m[1][0][7] = n[4][-2][3][7][2][-4][-1]
test(x['m'][6]['c'][-4]['r']['i'])
k[1]['n']['i']['w'] = 2
p[7] = n['v']['l']['f']['i']
p['k']['a']['o'][8]['s'][-6]['q']['f'] = a[8]['s']
length(d[1]['g'][-6]['r'])
e[3]['n']['o'][-2] = 6
length(m[-4]['u'][7])
p[-1]['h']['u'][-9]['n'][-7] = c['s'][-3]
length(s[5]['s'][-9])
k[-7]['f']['x'][8][-4] = t['a']['h']['o'][-3]['b']['a']['l'][5]
y[0][-1]['y']['c'][7][8] = 'p'
d[1]['b'] = -3
l['e']['s'][0] = d['a']['o'][8][-7][3][9][3]['j']['a']
length(c['s'][-3])
r[1]['a'][-6]['p']['k'] = s[5][-6]['d'][7][3][1]['a']['w']['h']
r['v'][4]['e']['i'][7][6]['o']['u'][-9]['t']['a'] = {-8: {'c': -2}, -5: {7: -5}, -4: {'y': {-2: 'k'}, 'j': {'q': 'y'}, 'v': {6: 't'}}, 'f': {8: -1}}
length(q[-1])
test(h[3]['e']['t']['r'][7]['o'][-3][8][9]['a'][-8])
t[-6][3][2] = f[0]['d']['m']
u[-2]['e'][-5][-8]['f'] = j[-1]['s']
x[7][9][9][-1] = h['p'][1]['z']['t']
length(w[-4][-3]['d'][-8]['g'][-2])
z[4]['u']['b']['m'][0][-7] = 'f'
i['a']['b'][3][-3]['e'] = {'x': {'a': {'n': -1}, 'k': {4: -7}}, 'z': {7: -1}, 'f': {0: {'j': 7}, -5: {-8: 'b'}}}
x[7][9][9]['w'] = -8
f[1][-9]['h']['h'][-6] = {0: {'a': -6}, 'f': {-2: 'o'}, 'i': {'i': -4}, 8: {'p': 'k'}, 't': {'i': 'c'}, -7: {'r': {'f': -9}, -4: {-5: 'x'}}, -6: {-4: 'o'}}
test(f[0]['d']['t'])
j['w'][-1] = f[1][7]['n'][-7]['c'][-6]['z'][1][8]
v[-1][-2][-4]['g'][4]['w']['p'] = 'i'
d['z']['k'][-6]['k'] = {'c': {'g': -6}, 'b': {6: {-9: 3}, 'f': {3: 'e'}}, -9: {8: {-7: 'u'}, 6: {'b': 'a'}, 'l': {0: 6}, -2: {'a': 's'}}}
n[4]['s']['g']['c']['c'] = 'g'
h[3]['e'][3]['d'][-7]['i'][4] = p[-6][-8][4][7]['k']['l']['d']
c[-9]['o']['w'] = 'p'
t['s']['i']['r'] = -3
r[7]['l']['r'][-2]['z']['e'] = {9: {-1: 3}, 'r': {8: {2: 't'}, 'u': {'o': 9}}}
k[-7]['f']['c'][7] = {'c': {'s': 6}, 4: {9: 2}, 'f': {'k': -6}, 'n': {0: 'c'}, -8: {'w': 0}, -2: {8: 0}}
g['n'][4]['i']['l'] = 1
length(j['t'][-4])
u[-2]['g'][1][-4][2][9] = {0: {'x': {'h': -7}, -7: {'q': -4}}, 6: {0: 4}, 'o': {'x': {'k': 8}, 'v': {5: 7}, 'n': {-2: 'j'}}, 'w': {-1: 'u'}, -8: {'k': 'p'}, 'z': {1: {7: -8}, 'u': {'j': 7}}}
r['v']['a'][-3] = 'j'
length(a[-2])
p[-6][-8][4] = {'p': {'x': -6}, 'c': {2: {'x': 'g'}, -3: {'d': -2}, -9: {'b': -3}}}
e[-8]['c'][4] = c['s'][-3]
g[5][7]['j'] = {-8: {7: -3}, 5: {'m': 'p'}, 't': {'i': {'m': 'w'}, -2: {'x': 'f'}}}
test(l['b']['p']['x'][-4]['p']['v'][4]['e'][0][8])
test(n['q']['c'][-1])
e['b']['l'] = {8: {'j': 'c'}, 2: {'h': 'b'}, 'c': {'h': {2: 'x'}, 'b': {'y': {6: -7}, -3: {'v': -8}}, 'j': {8: 'v'}}}
w['s']['v']['k'][5][3][-5] = 'd'
y['c'][5][6] = -5
test(w['s'][1])
length(e['g'][7]['v'])
test(f)
h[3][2]['n']['i'][7] = t[-6][-9]
h[3]['e'][8][-1]['x']['v']['l']['f']['m'] = 9
a[8][-5]['i']['d']['l'] = t[-5]['h'][3]['t']['s']
test(i['a']['b'][3][-3]['e']['x']['k'])
m['v'][6][6][-7]['d'][6] = 'r'
g['d'][7] = 'x'
length(o[4])
t[-1]['o']['c']['u']['f'] = 'y'
e[-8]['h'][5][5] = {1: {'a': 'g'}, 'g': {0: 1}, 'f': {'b': 8}, 'l': {'c': 'q'}, 'p': {'d': 6}, 's': {-8: 'l'}, 'r': {'k': 1}, 'v': {3: 'g'}, -3: {'h': 'n'}}
length(l)
r[0][6][0]['q'] = {2: {-8: {'r': 1}, 9: {'o': 9}, 'p': {1: 'x'}, 'f': {-7: 'm'}}, -5: {2: {'w': -9}, -6: {-3: 'i'}, 6: {'f': -2}}}
m['v'][6][6][-7]['c']['f'] = {'q': {'s': 'g'}, -7: {'a': -6}, -5: {8: 'y'}, 'a': {'e': {2: 7}, 'f': {-1: 'e'}}, 9: {'l': 'z'}}
length(q['y'][7]['g'][-4]['b'])
length(q[-1]['v']['j'][4][-7])
test(v['r']['l'])
test(v)
g[-4] = {'p': {-4: 'd'}, -5: {'u': 6}, -2: {4: 8}, 7: {'m': 0}}
y[-7]['y']['d'][-6][5]['v'] = 1
t[-1]['o']['c']['u'][0] = 5
d[-2]['s'][7][-8]['m'][-1] = {'q': {'k': 6}, 3: {'s': 'z'}, -5: {-8: 'g'}}
v['x']['d']['x'] = n['m']['f']['u'][-6]['w'][-6]
i[-2][5]['v'][0]['c'] = {1: {-6: 0}, 'd': {'j': 'x'}, 8: {-9: {'a': 'p'}, 7: {'g': 'v'}}, -9: {-8: 'r'}, 'm': {'q': 'h'}, 'v': {7: 0}, -5: {'s': {-1: -5}, -5: {8: 8}}, -3: {9: 'x'}}
k['j'] = -9
length(h[4][8][9]['n'])
length(l[2]['d']['t'])
test(r[1]['z'][1]['c']['o'][-7])
test(i['a']['b'])
test(q[-1]['v'][-5][7]['t'][-2])
length(o[0][-3][-8]['z'][-3])
test(d[7][6])
length(t['a']['h']['o'][-3]['b']['a'][0][-7][-3])
k[-8][9] = 'r'
d[-2] = 'n'
z['z'][-6] = {3: {'f': 8}, 'j': {'f': 'm'}, -3: {9: {'q': 'w'}, -4: {'p': -4}}}
d['l']['z']['d'][-2][3]['f']['u'][-5]['d']['l']['b'] = 8
test(l)
n['c']['j']['d']['d'][6][3] = q['y'][-2]['y']['q']['f']['e']
length(o[-3][8]['u'][-6])
length(d[9][6][-3]['q'][-5]['w'])
u['e'][-5][-8]['f'][0][1] = 7
v[5]['y']['b'][-1] = {'c': {6: {'h': 8}}, 2: {'z': {'w': -4}, 'e': {-9: 'c'}}, 3: {'f': 'h'}, 'z': {'q': {'y': 'c'}, 'x': {'j': -7}, -5: {'f': -7}}, 'n': {'r': {3: 'o'}, 'z': {5: 6}}}
test(z['z'][-6][-3])
test(p)
q['y'][-2]['y']['e']['y'][5] = {0: {'d': {-1: 'u'}, 'o': {'l': 'l'}}, -5: {-5: 4}}
l[0][6][-2]['k'] = {1: {'c': 'y'}, 2: {1: 'e'}, 6: {-5: {-6: 'h'}, -2: {3: 'f'}}, 'h': {'s': 'q'}}
d['h']['o']['x']['a']['o'] = o[-3][8]['u'][1][7][-7][0][7][6]
c['e']['c']['o']['l'] = 's'
test(e['g'][7]['v'])
o[-3][8]['u'][-6][8] = {9: {'j': 3}, 'f': {'k': {'c': 'y'}, 'j': {-8: 'n'}}, 7: {9: {'o': 'e'}, 6: {'r': 't'}}}
z['z'][-6][3]['f'] = 'o'
c['e']['c']['o']['l'] = {'z': {'b': 's'}, -3: {'k': {-3: -1}, 7: {3: {'v': -2}, -2: {7: 'x'}}}, -2: {9: -8}}
a[-2]['a'][1]['j'] = 's'
length(k[7]['o']['d'])
k['q'][-2] = 'v'
length(b['n']['a'])
length(q['y']['w']['b']['z'])
l['f'][7]['p'] = 9
w['s']['g'][0] = {-3: {-3: 'i'}, 'v': {'j': 'y'}}
e['g'][7]['v']['d'] = 7
q[-1][-4][6][6][-7] = -6
length(e['t'])
z[-4][6][6] = 'n'
h['h'] = -7
test(n[4]['s'][-2][-9]['a']['m']['f']['u'][-6]['w'][-6])
o[4]['r'][-3]['t']['c'][-8][9][-1] = -2
d['z']['e'] = {-2: {-9: -8}, 'l': {'h': {9: 'y'}, 'w': {'q': 'e'}, -9: {'b': -8}}, 'o': {4: 7}, 'f': {8: -3}}
length(q['y'][7][2]['n']['i'][7]['x'][-4]['z']['s'][-6]['q'])
w['p']['z'][-6][-9]['q'][4]['w'][-6]['q'] = 'd'
s['b']['u'][1]['m'][-8] = s[-5]['y'][-6]['c'][7][4]
z['f'][-9]['y']['f'] = {1: {-7: 7}, 4: {'a': {1: -8}, 3: {'o': 9}}, 'f': {8: -1}, -6: {'t': 'o'}, -5: {'s': -5}, -1: {2: 3}}
z['f'][-9]['y']['f'][-1][2] = {1: {4: 7}, 'z': {'h': {'b': 'd'}, -6: {5: 2}}, -4: {'l': {-9: -8}, -1: {'t': 'f'}}, -1: {0: {1: 'u'}, 'e': {'d': 'k'}}}
test(l['s'][-1]['k'])
z['z']['p'][-2][-7] = 'j'
test(x[7][1])
b[3][7][2][2]['f'][-2]['c'] = 'a'
l[0][6][-9][3] = {'c': {-6: 'e'}, 'e': {'y': {0: -8}, 'c': {5: 3}}, 's': {-3: -5}, 'x': {4: 3}, -6: {-9: -4}, -5: {'s': 'n'}}
j['w'][7]['j'][5]['e'] = r[7]['y']['h']['b']
h[4]['w']['g']['a'][2]['y'] = 'd'
test(z[4]['u']['b']['m'][0])
p[-6][-8][4]['c'][1] = 'z'
length(i[-2][5]['v']['b'])
v['i'][-9]['f']['u'] = {3: {-6: 'w'}, 'd': {'e': -5}, 'm': {'w': 7}, 'p': {'o': 's'}, 'v': {-4: 'g'}, 'y': {'l': 7}, -5: {'v': -4}, -4: {9: -6}, -1: {'d': 'r'}, 5: {-8: 6}}
s[-5][-6][-8] = 1
test(s[-4])
length(g['d'])
test(p[7])
test(a[-2]['p']['s'][3]['o'])
length(b)
f[0]['d']['h']['d'] = q['y']['a']['u'][-6]
length(j[5][8][8]['j'])
d[3] = -9
test(c['e'][-9][1]['s'][-3])
r[7][4][0][-5] = -4
test(k[7][-6])
o[0][-1]['e']['s']['d'][-2]['y'] = k[-8][-5]
length(t)
length(q['y'][7]['e'][8]['e'][-3])
test(a)
z['z'][9]['z'] = 2
test(j['p'][3][-6]['i'])
z['z'] = h[4][8][9]['n']
g[5][-1]['a'] = b
e[3]['n'][-6][4] = e['t']['f']['r'][6]['l']['u'][-5]['d']['l']
q[-1] = {'b': {'x': -9}, 'h': {6: -7}, 'm': {3: 'n'}, 'p': {-6: -1}, -9: {'h': 'j'}, -6: {-6: -6}, -4: {'i': -7}, -3: {-2: 2}}
y['c'][5][-8][-2] = 'i'
a[8][-5]['i']['d']['l']['x'] = 'v'
length(k[1][-5])
v['r']['s'][5]['g'] = 's'
t[-1][6][4][-2][-4]['g'][-6]['r'][-4] = 'c'
length(s[-5]['y'][-6]['j']['q']['h'])
i['a']['b'][3][-7][2] = 'p'
length(u['p'][3][0])
g['t'][-4] = -5
length(y['c'])
i[9] = {-8: {'c': 'z'}, -6: {'q': 'g'}, 'g': {8: 'x'}, 7: {'c': 'x'}}
h['p'][1][-5]['j'] = {'x': {9: -7}, 'k': {-3: 'h'}, 5: {'q': 'h'}, 't': {'m': -2}}
p[-6][-8][4]['c'][-9]['b'] = 'w'
length(z['f']['d'][0][0])
b['n']['a']['g'] = m[3]['k']['h'][-7][-3][-4][9][4]
test(i[-2][5])
length(r[1]['f']['o'])
v['i']['j'] = {9: {-7: 1}, 'k': {'r': 'x'}, 'l': {1: 5}, 'w': {8: 'n'}, 'f': {5: -8}}
t[-5]['h'][3][4][-4] = 'f'
length(v)
test(q['y']['w'][3]['n']['o'])
test(j[-1]['s'][6]['q'])
q[-1]['b'][1] = {0: {'c': 'd'}, -4: {-9: {-6: {-9: -7}, -2: {'y': -4}}}, 5: {'k': 4}, 'w': {'w': {'c': -3}, 'g': {-8: 'u'}}, -9: {'h': {'k': -5}, 3: {-3: 'q'}}}
length(j['w'])
r['v']['a'][-3] = g[-4]['p']
length(m['v'][6][6]['w']['w']['j'][-9])
s[5][-6]['d'][7][-7][0][-9][5] = -3
u['m'][4]['r'][8]['v']['r'][3][5][-8][9] = 'd'
p['k']['a']['o'][-2]['s'][-9][7]['f']['u'][-6]['w'][-6]['k'] = 'e'
k[1][-5][2] = 9
length(b)
q[-1][-4]['y'] = -1
y[0][9]['k']['a'][7][-7][6] = z['z']
length(d)
y[-7]['y']['d']['a'][8][2] = {'m': {-7: {-7: 8}, 'b': {1: {'u': 'z'}, 6: {-7: -4}}}, -9: {-6: 's'}}
length(d[7]['i']['e'])
length(g[-4][-2])
length(t[-6][3]['z'])
e['g'][7]['v'][-4] = t['a']['h']['o'][-6][3][-9]
u['g'][1][-7] = 2
b['g'] = 'd'
a[-2][6][-1][-6][-8][4]['p']['x'] = 1
test(i[-2][5]['r'])
length(f[0]['d']['h']['d'][8]['f']['j'])
test(h['p']['p']['a'][9])
e['b']['l'][8]['c'] = g['i'][0]
length(p[-6][-8][4])
o[-3][8]['u'][-6]['u'] = -6
test(m)
k['q'][-2] = 's'
h[4]['w']['g']['a'][3] = {3: {6: -5}, 5: {-6: 9}, 8: {-1: 'r'}, 9: {'z': -9}, 'w': {9: 2}, -7: {'u': 7}, -3: {'i': {7: 'e'}, 7: {'z': 'p'}}}
length(c[-9][-9])
w['p'][-6][-2]['a']['h']['o'][-6]['o'][-1]['r'] = h[3]['e'][-6]['b']['r']['o'][4]['r'][-3]['t']['c'][-8][9]
q['y'] = c['e'][-8]['x']
y['c'][5][-8]['v'] = {'i': {2: 8}, 'v': {6: 'k'}, 'm': {8: 'g'}, -9: {-2: 'j'}, -8: {-4: -3}, 'x': {'i': -5}, 'z': {'t': 'i'}}
test(p[-6][-8][4]['p'])
length(v[5]['l']['r']['r'])
test(s['m']['k'])
t['a']['h'] = 3
e['t']['m'][2][-5] = -5
k[1]['h']['b'] = 5
test(q[-1]['m'])
k['q']['s'] = 'q'
test(n['m']['f']['u'][-6]['w'][-6])
w['s']['u']['g']['x'][9] = 1
length(f[1]['y'])
w['s']['v']['k'] = 'n'
m[0][7][1]['u']['x'][-8] = -2
length(n['v']['l']['f']['i'])
u['m'][4]['r'][8][0] = o[0][-3][-8]['x']
length(y[0][9]['k']['a'][7]['q']['l'])
test(f[1][7][-4])
q['y']['l'] = {8: {'e': 'z'}, 'b': {'z': {0: 'k'}, 'o': {'h': 2}}, 'd': {3: {-2: 'g'}, -3: {6: 'g'}}, -5: {'q': -2}}
n['c'][-9]['c']['z'] = b['n']['a']
length(m['v'][6][6]['w']['w'][0])
x[7][9][9]['a']['s'][-6]['q']['f']['a']['e'] = -6
h['p'][1][-5]['j']['t']['j'] = 7
j[-4][-6]['w']['o']['s']['v'][2] = -6
q[-1][-4]['j'] = {'b': {'c': 'i'}, 'u': {'a': -5}, 'd': {'s': {8: 9}, 'r': {'w': 'p'}}}
length(r[1])
q[-1][-4]['j']['u'][-2] = 'a'
p['k'] = 'm'
length(g[-1]['a'][-9][6]['x']['s'][-2])
length(j[-4])
test(j['w'])
n['c']['q'] = c
length(x['m'][9]['x'][6]['f']['i'])
test(p[-1]['y'][8][-6][-1][9]['s'])
u[0] = 't'
length(o[0]['p']['l']['p'])
test(u[8]['u']['c']['l'])
v['y'][3][0][0]['b'] = 'j'
length(q['y'][-7]['a'][7]['k'])
n[-8] = {3: {0: 't'}, 'r': {1: -1}, -9: {'a': 't'}, 'v': {'d': -1}}
length(u[-5]['o'][-6]['p'])
test(r[0][-7][3][-1])
k[1]['d']['r'] = -9
length(z[-4][0][6]['k'])
a[8][-5]['i']['d']['d'] = y['c'][5][-8]['v']['m']
g[3][-5][-8]['n']['j'] = {3: {4: -7}, -2: {'l': 'x'}}
h[4]['w']['g']['a'][3] = 'a'
length(z['z'])
d[7][6][-4] = b[1][-7][6][-5]['c'][-8]
o[0][-3][-8]['x'][-2] = {-8: {-6: -1}, 'z': {4: 'f'}}
k[1]['e'][4] = v
q[-1][-3][-2] = l[0][6]['s']
g['s'][-8]['j']['m'][9] = 'm'
h['p']['p']['a'][9]['r'] = c['s'][-7][1]['h']['h']
j['w'][-1]['a']['a'][8] = 3
length(c['i']['d']['p']['x']['u'][6][-2])
z['z']['l'] = c['e']['c']['o']['l'][-3][7][3]
y[-7]['y']['d'][-6][5]['v'] = u['m'][4]['r'][7]['o'][-3][8][9][-8]
q['y']['w'] = 'z'
m[0][-7]['o']['e'][5]['n'] = n[4]
e['t']['m'][-7]['p'] = p[7]
y[-7]['q']['o']['b']['r'][5]['a'] = {'a': {'h': 'o'}, 1: {'h': {-6: 8}, 'c': {'c': 'a'}}, 2: {'l': 'u'}, 'm': {'n': 'r'}, 'c': {7: 'w'}, 'p': {4: -8}, -6: {'v': 'v'}, -4: {'e': -3}}
c[-9]['o']['o'] = f
q['y'][-7]['t']['v'][-9]['e']['y'] = 'd'
c['i']['d']['k'][1] = {'p': {'w': -9}, -9: {'m': {6: 2}, -3: {3: 'o'}}}
u[-5]['b'][-4][-9][-7]['z'] = 8
length(n)
p[-1][3]['l'] = 'v'
h['p'][1][-5]['j']['t']['t'] = -5
c['s'][-7][1]['m'] = {5: {'x': {4: 's'}, -6: {-4: 9}, 'm': {'t': 4}, 'o': {2: 'z'}, -9: {'c': 0}}, 'n': {-2: {0: 'k'}, -9: {3: 'u'}}}
l['e']['s'][0][-8] = 0
d[7][-1][-3] = 2
f[1][-9]['h']['h']['e'][0] = {4: {'u': 'g'}, 'o': {'e': 'd'}, 'f': {-4: 4}}
test(x[-8][9][-7]['f']['s'])
m['v'][6][6]['w']['w'][0]['c'] = {'c': {-6: 'g'}, 7: {'e': 'd'}}
y[0][9]['k']['t']['v'][-9][-9]['e']['h'] = -1
v[5][4][5][4]['j']['j'] = -6
length(o[0]['w']['y']['a'])
m[0][7][1]['u']['z'][-4] = n
s['b'][7] = g[-4]['p']
a[8]['s'][2][9][-7]['g'] = {'y': {'a': -2}, 1: {2: 'j'}, 'n': {'e': 'n'}}
test(w['p'][-9][8]['u'][-6][8][7][9])
k[-7]['f'][5]['n'][3][6] = x['m'][6]['c']
m[1]['e'][-1]['i'][7]['x']['d'] = {8: {-5: 4}, 'b': {'n': 0}}
d['l']['a'] = s['m']['t']
length(w['s']['b']['r']['w'])
v[5]['y']['c'][-6][-8][4]['p'][-4] = {'s': {'z': -8}, 3: {'q': -2}, 'g': {-1: 9}}
l[6][-4][-5][-2] = -9
c['s'][-4]['h'] = {2: {'h': {'t': 's'}, 'e': {1: {-1: 'k'}, -3: {'h': 8}}}, -9: {-3: {2: 'e'}, 6: {'e': -4}}}
test(c['s'][-4]['h'][2]['e'][1])
length(a[-2][6][-1][-6][-8][4])
v['i']['a'][-9][-3][5] = 6
test(x[-8][9][-7]['f']['s'])
test(d['z']['k'][-6]['k'][-9][-2])
test(n['v']['l']['f']['i'])
length(n['v'])
d['l'][9][7]['e']['q'][1] = 'r'
length(h['p'][1])
p[-6][-8][4]['p']['x'] = -4
r[7][4]['g'][-5] = -2
n[4]['s'][6] = -3
m[0][-7]['o']['e']['o'] = 'k'
test(k['q'])
length(r[0][5]['a'])
length(d['a'][9][6]['t'][0])
z['z'] = 9
i[-2][5]['v']['b'][-2] = {'h': {'e': 'z'}, -1: {-5: {'f': 'b'}, 'd': {'s': -6}}}
e[-8]['h'][5][5][-3]['h'] = -7
test(z['f'][-9]['y']['f'][1])
l['f']['g']['u'][4]['p'][-4]['s'][1] = 1
j[5][8]['c'][-9][4] = a[-2]['p']['l']['y']['z']['h']['i']
length(v['y'][3][6][-7][-8][-9][-4]['b'])
length(f[0]['d']['s'])
a[8][-5]['i']['d']['l']['j'] = {0: {1: {'j': 2}, 'l': {'o': -8}}, 'h': {0: {8: {9: 7}, 'r': {-2: 'q'}, 'g': {2: 'h'}}, 'o': {'r': {-2: 'b'}, 6: {'w': -5}}}}
x['m'][9]['x'][-4][-3]['m'] = 9
length(i[9][-8])
d['a'][9][3]['j']['a']['v'] = f[1][-9]['h']['h']['e'][0]
w['p']['z']['u'][4]['x'][6] = {0: {'r': {'q': {'k': 'x'}, 'p': {'t': 'c'}, 7: {'q': 0}}, 'f': {'f': 1}}, 7: {-7: {8: 'f'}, 'n': {'x': 'f'}}}
length(p[-1][3][6][-3]['v'][-5][7]['t'][4])
i[9][-8][-9] = j[5][8][5]['d'][-8]['p'][9]['o'][-7]['e']
n[4]['l'] = -3
length(i['a']['b'][-1][-6])
test(h[3]['i'])
test(j[-1]['s'])
e[-8]['n']['j'][-2]['h'] = {9: {-4: {9: 'i'}, -3: {1: -5}}, 'd': {'h': 2}}
h['p']['p']['a'][9]['r'] = 9
n[6] = a[8]
q['y'][-7]['t']['v']['e'][-8][-8]['v'] = -6
length(n[4]['s']['g']['c'])
length(l[-6][7][-7][0][7][6]['l'][-2])
test(i[-2])
y[-7]['q']['o']['b'][2]['r'] = {-7: {'d': {6: 9}, 6: {-7: {'k': -9}, 'b': {'v': 't'}, -1: {'m': -3}}}, 'l': {'p': {'x': 0}, -2: {'x': 'o'}}, 'g': {9: -6}}
p[-1]['h']['u'] = {'h': {0: {'n': 0}, -4: {-1: -3}, 'j': {'c': {4: -7}, 5: {-3: 'z'}}, 'u': {'a': 'u'}, 3: {'x': 'x'}}, -3: {2: {1: {'n': 'r'}, -5: {'k': -3}}, 'j': {9: -3}, 6: {'u': -8}}}
length(d[1]['g'][-6]['d'][-4])
k[-7]['f']['x'][8][-4]['o'] = 'i'
c['s']['e']['t'] = {0: {-6: {'b': {'e': -6}, 'z': {'l': 'z'}}, 'k': {7: 6}}, 'y': {'b': {'l': 'o'}, 'l': {-8: -2}}, 'j': {-5: 'q'}, 'u': {'q': {'e': 't'}, 'n': {'j': 'y'}}, 'd': {'g': {-6: 'p'}, 7: {7: 'k'}}}
w[-4][-3]['d'][-8]['g'][-2]['t'] = 'v'
test(w['p'])
o[0]['p']['l'][3][-3] = 1
a[-2][8]['d'][-1]['x'][1] = {2: {-1: 8}, 8: {'v': 'c'}, 'l': {-1: 6}, 'o': {'m': -3}, 'r': {6: 't'}, -8: {-8: -3}, 'x': {'z': 'u'}}
n[6]['s'][2]['o'] = 'j'
u[8] = t[-1]['o']['c']['u']
n['q']['c'][-1][4] = {'h': {'n': 'n'}, 2: {'a': -2}, 4: {'l': 'p'}, 'x': {5: 7}, 9: {8: {-1: 7}, -1: {0: 'o'}}}
test(y)
w[-4][-3][1][4]['m'] = 2
length(j['p']['x'][1]['w'])
d[2] = {2: {-9: -3}, 4: {3: -9}, 5: {-6: 'j'}, 'n': {1: 's'}, 'v': {'p': 5}, 'y': {'m': 'e'}, -6: {'s': 1}, -2: {'p': 'x'}}
length(p[7])
length(s[-4][-8][-5]['v'])
w[-4][-3]['d'][-8]['g'][-1][-8] = -6
d['h'][3][8] = 7
h['p'][1][-5]['j']['t']['m'] = 's'
d['l'][2]['n'][1] = {3: {0: {'l': -2}, -3: {'l': {8: -2}, -3: {'h': 'm'}}}, 'g': {9: 'q'}, 6: {1: 'z'}, 'k': {8: {7: 'q'}, 'v': {'f': 'i'}}, 'o': {'d': 9}, 'r': {'x': 'e'}, 'b': {'w': 'p'}}
length(r[0]['g'])
z[-4][5]['v'][7] = 7
f[1]['y'][5]['q'][-6] = t[-1]['o']
x[-8] = 'l'
test(y['c'][2]['z'][-7][4]['i']['j']['l'])
r['v']['a'][-3][-4] = -9
y[-7]['y'] = 'q'
q[-1][-3][-2] = 'q'
f[1][7]['n'][-7] = 4
w['p'][-9][8]['u'][-6][8]['f']['k']['c'] = 'n'
a[8]['s']['w'][3][8] = x[7][1]
t['a']['h'] = s[-5][-6]
test(h)
test(p[7])
length(w['s']['u'][7])
m['v'][6][6]['w']['w']['j']['g'][-3] = -3
test(w['s']['b']['r']['w'][9])
test(z['f'][-9]['y'])
length(o[4]['b'][-5][-2][-8])
j[4]['r']['v']['d'] = 'w'
z['f']['d'][6] = {9: {'d': 6}, 't': {'q': {6: {-7: -9}, 'v': {1: 'u'}}, 'r': {'c': 7}}, 6: {'r': {-2: 'e'}, -1: {5: 3}}}
h[4][8]['d'][4]['o'] = {2: {-9: 'v'}, 't': {-3: 'o'}, 'w': {1: 'f'}}
test(x['m'][6]['c'][-4]['r']['i'])
length(y)
z[4]['u'][1]['m'] = {1: {3: {-9: 9}, -1: {'d': 'm'}}, 'r': {-7: {5: 4}, 3: {'b': 5}}, 'f': {3: {8: -6}, -1: {'i': 7}}}
length(h['p']['p']['a'][9])
g[0] = a[-2][8][6]['i']
d['a'][9][6]['n'][9]['j'][-5][4]['u'][-5]['z'] = 'h'
length(l['f'][7])
length(g[-1]['a'][-2]['n']['r'])
j['w'][7]['j'][-8]['c'] = g[3]['d'][-7]['x']
o[-3][8]['u'][1][7] = 0
length(i[9][-6])
length(d[1]['g']['z'][9][6]['n'][9][3])
test(m[0][7][1]['u']['x'])
d[1]['g']['z'] = 'm'
y['c'][8]['v'] = 's'
p[7][8] = 'e'
h[3]['i']['r'][3] = 'g'
length(f[0]['d']['h']['d'][8]['f']['k'])
v['y'][3][6] = 5
h['p']['p']['a']['d'][7][9] = q['y']
n['v']['l']['f']['i'][2] = b[1]
test(m[3]['k']['g']['h'])
k['q']['o'] = 'z'
o[0]['p']['l'] = j[-4][4]['s']['q'][-2]
length(m[1]['x'])
i['a']['f'] = 'g'
test(i['a']['b'][3][-3]['e']['z'])
test(y[0][-1]['y'][2]['c'])
h[3]['g'][1][-7] = {'y': {'h': -1}, 'x': {5: 9}, 5: {4: 'u'}, 'o': {4: 't'}, -2: {'l': 'q'}}
k[7][-6]['l'][4]['l'] = {'p': {'z': {'u': 'g'}, 'j': {9: {'k': 'y'}, 'j': {'d': 'n'}}}, 'b': {'k': 1}, -4: {-1: 8}}
i['a']['b'][-1]['c'][2][0][6] = {'c': {'c': -8}, 2: {'x': 2}, 'l': {'l': 'f'}, 'p': {-2: 'j'}, -6: {-3: 'p'}, -2: {8: -3}}
f[0][1] = {0: {'u': {'p': -2}, 'v': {7: 'r'}}, 3: {2: -8}, -9: {7: 'p'}}
test(b[1][2][8]['j']['s'])
r[7]['l']['r'][-2]['z']['e']['r'][8][6] = {1: {'r': -4}, 3: {0: 'w'}, 8: {'u': 's'}, 'w': {-7: 6}, -5: {'y': 'a'}, -4: {'a': 'd'}, -3: {1: {8: 2}, 'u': {4: -4}}}
f[0]['d']['t']['s'] = {1: {'x': 'j'}, 3: {'x': -4}, 'u': {'s': {5: 1}, 'j': {'x': {'f': 'q'}, 'j': {5: 4}}}, 'w': {'e': -2}, 'f': {-8: {2: 1}, -9: {7: -7}}}
f[1][7][3] = -9
length(f[0]['d'][-4])
h['p']['p']['a']['i'][8] = 4
y[-7][3][-6][1][4] = -8
test(p[-1][3]['d']['c'][6]['s'][6][-6])
o[-3][8]['u'][-6][8][7][9]['o'] = {'c': {3: -3}, 'h': {-3: {6: 't'}, 't': {-8: 'y'}}, 2: {9: {'a': 'l'}, 3: {'s': -3}}, 's': {'r': {'f': 8}, 5: {-4: -3}, 'l': {6: 'j'}}, 'r': {'z': -9}, 'z': {'m': 'a'}}
v['r']['s'][0] = q['y'][-7]['t']
d[2]['c'] = j[4]['r']['v']['p']['a']
length(t[-6][-2][4]['s'])
i[9][-8][-9]['o'] = d
x['m'][6]['c'][-4]['r']['i']['f'] = v['r']['s'][0]['v'][-9]
x['m'][9]['x'][-4]['j'] = {-4: {9: 4}, 'l': {'p': {'i': 't'}, 'v': {'c': {5: 7}, 's': {'y': -5}}, 1: {'r': -1}, 'j': {3: 'c'}, -9: {'k': 'o'}}}
test(c['i']['d']['x']['j'][5][-3])
length(j[5][8][8]['j'])
length(p[-1][3]['d'][6][-7]['o'])
length(f[0]['d'][-4])
y[-7]['q']['o']['b'][2]['i']['r'] = -5
p[-1]['h']['u'][-3]['j'][9] = {2: {'l': -3}, 'l': {-6: 4}, -2: {'t': 'v'}, 'v': {-2: 5}}
length(k[1][1])
k[-7]['f']['f'][-2]['a'] = 8
x[7][2]['b'] = {'a': {'e': 'e'}, -7: {5: -3}, 'l': {6: 1}}
length(x['m'][9]['x']['z'])
u['e'][-5]['w'][-1][-9]['d'][-4] = 9
test(j[-4][5])
test(c['i']['d']['k'][1][-9]['m'])
h[4]['b'][-3]['t'][2][9]['w'] = -1
i['a']['b'][-1]['c'][2][5][-3] = {4: {'a': 4}, 6: {4: 'u'}, 7: {-1: 9}, 'm': {-8: 'm'}, 'r': {'j': 5}, -8: {'n': {'b': -9}, 'v': {'u': -8}}}
length(y['c'][8])
s[-4]['f']['m'] = {'k': {'a': 'g'}, 5: {'c': -1}, -2: {-4: 'k'}}
a[8]['s']['w'][3][8][1] = 7
v[5][4][4]['p'] = 7
k[-7]['f']['c'][7][-2] = k[1]['b']
j['t'][4] = 'j'
j[-4]['x']['b'] = r[1]['z'][1]['c']['d']
test(y['c'][5][-8]['v']['v'])
d['h'][3][1][-4][-8] = -7
test(j[-4]['u']['u'][4]['e']['t'][-4][-5])
length(q[-1][-3])
length(y[0][9]['k']['t']['v']['i']['d'])
k[-8][-1][6]['w'] = 0
length(j[5][8]['i'][-9][4])
test(o[0]['w'])
t[-1][1] = l[0][6]['s']
length(k[-7]['f']['s'][-7])
r[0]['r'][5]['g']['t'][6] = -7
t[-6][-2][1]['a'][7]['b'] = -5
length(o[-3][8]['u'][1])
test(s['m'])
d['l'] = 'l'
n[6][-5][9] = s
length(e[3]['v'])
test(c[-9][-9])
u[-5]['b'][-4][-9][-7]['z'] = {2: {'e': {'k': 'h'}, -2: {7: 'z'}, 'v': {6: -6}}, 'j': {-7: {'j': {'l': 3}, 'u': {0: -7}}, 'r': {4: {-6: 8}, -1: {'p': 7}}}}
test(x['m'][6]['c'][-4]['r']['i']['f'][-4])
length(j[-1]['w'][-6]['s'][1][3][0]['d']['f'][-3])
length(l['u'][3]['y'])
m[1][-7][-1]['i'] = {4: {'d': 'q'}, 'd': {6: 'l'}}
f[0]['d']['s']['o'] = {'h': {-6: -5}, 'b': {'b': 's'}, 'o': {0: -7}, -5: {9: -4}}
length(s['m']['t'][9][3])
test(o[0])
test(r[7]['y']['b'][-1]['c'][6])
s[-5][-6]['s'] = r[7]['l']['r']['r']
n['v']['l'][-2] = 'g'
length(u[8])
l['f'][7]['y'] = {-5: {-5: 'x'}, 4: {5: 'r'}}
f[0]['d']['m'] = 'f'
w['s']['k'] = {9: {'p': -8}, 'r': {8: -3}, 'd': {2: 'd'}, 'o': {'g': 'f'}}
length(l[0][6])
j['t'][-4]['l'] = {1: {'x': {-5: 't'}, 6: {'x': 4}}, 4: {8: {1: -4}, 'k': {'c': 'k'}}, 'd': {'j': 'd'}, 9: {-8: {-3: -4}, -1: {'z': 't'}}, 'v': {-1: 'k'}, 5: {-6: 1}}
j[-1]['w'][-6]['s'][1][3][0][0]['b'] = 5
test(p[7][2][2][8][6][1])
v[6] = {'h': {'t': 'g'}, 'k': {0: {'i': 'u'}, 4: {'a': 3}}, 'z': {'y': {'s': 'i'}, 'w': {'l': 'm'}}, 7: {2: {-5: 'n'}, 'j': {'a': -2}, -3: {6: 'd'}}}
length(b['n'][0][-4]['z'])
length(n[4][-2][1])
i['a']['b'][-1]['i'][0]['d'] = {9: {'h': -4}, 'r': {9: -6}, 5: {'h': 'x'}}
o[0] = {1: {-3: 9}, 'j': {6: -7}, -3: {-4: {'r': -9}, 'g': {'j': 'i'}}}
s[5][-6]['d'][7] = 'h'
c['e']['c']['o']['l'][-3]['k'][-3] = j
c['e'][-9][1]['i']['d']['n']['q']['m'][7]['m'] = 9
l['e']['w'][-6][-7]['c'] = 8
j[-1]['n'] = 'p'
z['f']['d'][0]['d']['f']['x'][8][-4][-3] = t[-1]['t']
s[-4][-2][-7] = {'k': {9: {6: 3}, -5: {-6: {6: -9}, -1: {'z': 'm'}}}}
length(s['m']['k'][9][7])
length(t['a'])
i[9][-6]['q'] = s[-5]
x[7][9][9]['a'][-5] = {'c': {-4: 'k'}, 5: {1: 'u'}, 'f': {-5: 'c'}, 'q': {'b': -1}, -8: {'t': -9}, -2: {4: 'e'}}
f['o'] = {'g': {7: -4}, 'w': {-5: {-1: 'v'}, 'n': {0: 't'}}, -9: {'y': {'d': 0}, 'l': {0: 4}}}
z['f']['d'][0]['d']['y'] = 'h'
y[-7][3][-6][1][3] = {2: {'c': 'z'}, 4: {'b': 0}, 5: {0: 0}, 'f': {2: -8}, 'q': {'d': -8}, -7: {'v': 'n'}, -4: {1: 'r'}, -1: {0: {4: 9}, -5: {9: 'o'}}}
test(x[7][1])
p[7][2][2][8][-2]['m']['y'][-2] = 's'
q[-1]['h'][7] = 3
q[-1]['p'][-6] = 'l'
length(d[9])
w['p'][-6][-2]['t']['k'] = 8
length(o[0]['j'])
test(s[5]['s'][-9])
test(e['g'][7]['v'][-4])
p[7][2][-6][3] = f[1]['y'][5]['q'][-6][5]['v']['f'][-8]
length(p[-6])
f['o']['g'][-3] = 'u'
test(b[3]['r'])
h['j'] = p[-6][-8][4]['c'][2]
length(a[8]['s']['w']['q'][6])
v[6]['z']['w']['l'] = 'x'
l['b']['p']['x'][-4]['p'][7]['d'][9][-9]['w'][0] = k[7]['o'][-3][-6]['q']['s'][6]
d['z']['d'] = 'z'
f['o']['w']['n'][0] = h['p']['p']['a']['d']['e']
y[0]['f'][5]['a'][2]['t'] = -5
y['c'] = 'n'
length(y[-7][3][1]['t']['a']['i'])
z['f']['d'][-9] = {5: {'n': -1}, -1: {-3: -5}, 'f': {'i': 'g'}}
m[-4]['h'] = 'h'
length(p[-1]['y'][8][-6][5][-7])
q[-1][-3][7] = k[-8]['w']
c['e'][-8][-2] = {0: {'k': {'m': 0}, 4: {-1: 6}}, 'p': {'q': {'a': {'x': {'x': 'f'}, 'j': {'s': 'o'}}, 'n': {'m': -8}}, 9: {'q': 7}, 5: {-7: {5: 1}, 'c': {-9: 'f'}}}}
length(p[-6][-8][4]['p'][-4]['s'])
c[-9][-7]['t'] = {'i': {-1: 'a'}, 'h': {-8: {'w': -4}, 'm': {'g': -7}}, 'd': {'q': {-9: 'n'}, 'k': {1: 0}, 'z': {'y': -2}}, -2: {9: {9: {-9: -6}, -5: {'x': -3}}, 'u': {6: 'p'}}}
p[7][2][6][-6]['c']['u'][9] = 8
test(j[5])
j['t'][-8]['w'] = -5
u['e'][-1] = {'p': {0: 7}, 'f': {'i': {8: 7}, 's': {9: {-8: 2}, 'e': {-5: 'h'}}, 'n': {-4: 'm'}}}
length(z[4])
test(p)
length(n)
l['m'][-8]['s'][-3]['a'] = {0: {1: 'p'}, 'z': {'k': {'y': 'h'}, -4: {7: 'v'}, 't': {'m': 5}}}
test(y[0][-1][4][-8])
length(k[7]['o']['n']['i'])
d['a'][9][6]['n'][9]['j'][-5][-4][5]['v'][8] = i[-2]
j[-1]['s'][6]['y'] = {9: {7: -3}, -6: {'n': 8}, 'j': {'t': 'g'}, 'o': {-2: 'e'}}
w[-5] = g[-6]['b']['r']
h[3][2]['q'][-1][4]['h']['n'] = f['o']['w'][-5]
y[-7]['q']['b'][0]['k']['q'] = 'q'
w['p'][-9][8]['u'][1][-5] = {'b': {-7: {5: 'x'}, 'k': {'c': 'b'}}, -9: {'e': {-4: 'e'}, -3: {'c': -8}, -1: {'n': 6}}}
r['v'][4]['e']['s'][0][3][-4]['x']['g'] = {'b': {1: {'f': 1}, 'n': {3: {-1: 'i'}, 'f': {'r': {-5: -9}, 'e': {'g': 'v'}}}}, -2: {0: {'y': 's'}, -5: {5: -9}, 'f': {'e': -2}}}
p[-1][3]['d'][-4] = {7: {'t': 'v'}, 'n': {'x': -5}}
j['w'][-1]['a'][3]['n']['p']['u']['c']['l'][4] = g
s['b'][7][-4] = {8: {'c': {'d': -7}, -5: {'u': -5}, 'o': {'j': {5: 0}, 4: {6: 6}}}, 1: {'q': {-5: 'p'}, -3: {'x': {9: -4}, 'w': {'k': 6}}}, 'z': {'i': {'m': 't'}, 9: {9: -7}, 'w': {'w': -3}}}
b['a'][-2] = y[-7][3][-6][1][3][4]
h[3][2][-5]['q'][1][5] = y[-7]
x[7][9][9]['a'][-5]['q'][-8] = n[6]['s']['w'][3][8]
h['j'][2] = {1: {4: 'q'}, 'c': {'y': 'r'}, -7: {'j': {'f': 1}, 4: {-7: 'b'}}}
r['v'][-7]['c']['g']['b'] = 'e'
s[-4][-8][5][-2] = k[7][-6]['y']
length(g[3]['d']['g'])
z[-4][5]['v'][8][5]['v'][0]['c'][-9][-8] = 'e'
o[4][6]['l']['r']['r']['s'] = {1: {'s': {-6: {'y': 'v'}, -5: {-9: 7}}, -6: {'g': -2}}, 6: {-9: -3}, 7: {'g': 'p'}, 'i': {'p': {'f': 'd'}, -5: {-8: 'v'}, 4: {6: 'o'}}, -8: {7: 'd'}, -7: {'t': 2}}
d[2]['n'][1]['k'][8][7] = 'e'
y[-7][3][7][4][0] = f['o']['g']
m[-5]['v']['e'][6] = 'q'
x[7][9][9]['a'][-5][5]['m'] = 'c'
test(p[-1]['y'][8][-6])
n[6][-5][-2]['i'] = -8
length(v[6][7][2])
j[5][8][5]['d'][-8]['g'][-2]['h'] = {'p': {-8: 'g'}, 3: {9: {6: -2}, 'w': {2: 7}}, 4: {2: 2}, -1: {-8: {-8: 'i'}, 'u': {'u': 'x'}}, -7: {-5: {'p': 'a'}, -1: {-4: 't'}}}
m[1][-7][-1]['i'][4]['d'] = {9: {9: 5}, 'v': {'f': 'v'}}
length(f['o'][-9]['y'])
n['m']['f']['u'][-6]['w'][-6]['u'] = e[3]['n']['w'][1]
h[3]['e']['i'][7][6][3][-9]['k'] = -5
p[-1]['y'][8][-6][5][-7]['j'] = 'e'
test(w['p']['z']['u']['v']['f'])
v['y'][3][-9][5][9] = {'c': {5: 'a'}, 'e': {-7: {-2: 'f'}, 'l': {'q': 'g'}}, 6: {-3: 'w'}}
z['f']['d'][-9][5][9]['n'] = 9
l[2]['d']['b']['s'] = 3
length(t[-6][-9]['x'][-4]['z'][-5][-2])
length(v['x'])
w['s'][1]['q'] = 'i'
y[-7]['q']['b'] = u[-2]['e'][-1]
u['p'][6][-5]['h'] = f[0][1][-9]
g['t'] = 't'
n['v']['l']['f']['i']['i'] = {'m': {2: {9: 'e'}, 'g': {'f': -5}}, -6: {'s': 'k'}, 'b': {-7: 'o'}, 4: {-9: 'f'}, 'd': {'r': {0: 'n'}, 'g': {2: 5}}}
q['y']['l']['b']['s'] = 'j'
d[3] = e
o[-3][8][-8] = {'q': {6: 'a'}, -7: {'a': -4}, -6: {0: {'q': 8}}, 'e': {4: 'h'}, 7: {-7: -3}}
h['j'][2][1][4] = y[0]['f'][5]['a'][2]
c['e'][-9]['t'] = 'i'
z['f']['d'][0]['d']['f']['s'][-7]['j'] = 'b'
l[0][6][5][-1] = t[-1][6][4][-2]
u[-5]['o'][3]['a'][5] = {0: {7: 's'}, -2: {'u': 'f'}}
z['f']['d'][0]['d']['f'][-1]['x']['r']['i']['f']['e'] = -4
n[4][-2][3]['y']['l']['f']['i'][2][8][3][-3] = 'g'
test(h[3]['i']['a'])
c['i']['d']['p']['s']['a']['t'] = u[-2]['g'][1][-6][-4]
length(s[-4][4]['p']['s'])
b['n'][-1]['n'] = e[3]['v'][-4]
length(l[-6])
length(q['y'][-7]['t']['v']['i']['d']['n']['q']['m']['z'])
test(b['a'][-2])
test(w['p'][-6][-2]['a']['h']['s']['s'][6])
w[-4][-3][1]['b'][6] = {'c': {-6: {'a': -4}, 'n': {8: {3: 'g'}, 'o': {-5: 7}}}, 6: {'f': {0: {6: -9}, 7: {2: 'm'}}}, -9: {'g': -5}}
a[8]['s'] = v[6]['h']
test(z['f'])
p[-6][-8][4]['c'][-9]['b'] = -7
test(e['b']['l']['c']['h'])
length(j['t'][-4]['l'][1][6])
length(a[-2][-4][0])
d[1]['g']['h']['m'] = {2: {'q': {'z': 2}, 9: {'y': 'y'}, -6: {'g': {'j': -1}, -9: {'t': 9}}, 4: {-1: 'f'}, 'p': {-7: 'n'}}, 'v': {0: {'f': -6}, 's': {5: 'o'}, 4: {0: -7}, -9: {-8: 6}}}
m[3][0]['r'] = -6
test(b[1])
test(m[-5]['v'][-9][-7]['t'][-2][9])
test(h['p']['p']['a'][9])
test(p[-1]['y'][8][-6])
w['p'] = {-6: {-4: {'x': 8}, 'l': {2: -6}}, 'c': {0: {8: {2: 's'}, 'a': {1: 4}}, -7: {-4: 8}}, 'o': {'j': 'l'}}
g[-4][7]['m'] = 'y'
test(l[6][-4])
length(n['v']['l']['f']['i'])
b[2] = {'t': {'s': {7: 'i'}, 6: {-1: -6}}, -1: {1: {'e': 1}, -6: {1: -9}, 'b': {1: -5}, 'u': {'a': {8: -2}, 'b': {-7: 'j'}}}, 7: {1: {'y': 9}, 'p': {-8: {'b': 't'}, 'r': {'c': 'l'}}}}
l['f']['g']['u'][4]['c'][-3]['d'] = j['t']['v']
length(y[-7])
length(c[-9])
f[1][7] = {-3: {-6: {3: -6}, 'r': {'h': 9}}, 'n': {3: {'q': 'l'}, -5: {'z': 'w'}, 'w': {'n': 'r'}}}
u['e'][-1]['f']['s'][9][-8] = {4: {'y': {9: 'u'}, 1: {6: 'e'}, 4: {'l': 'p'}, 5: {'y': 'z'}, 'g': {'q': -6}}, 'w': {8: 'x'}}
i[9][-8]['y'] = l['a'][-1]
test(c['e'][-9][1]['e'])
test(d[7]['i']['e'])
i['o'] = e['t']['f']['r'][6]
r[0]['r'][5]['g']['l']['m'] = 'm'
test(c['s'][-3]['a'][0])
k[-8][-5][-5][7] = -3
u['g'][1][-1][-2] = 0
test(s[-4]['t'][4]['i'][3])
test(k[-7]['f'][-3])
p[7]['i']['u'] = 'q'
g[-4][-5]['u'] = 6
o[-3][8]['u'][-6][8]['f']['k'][-9] = 'p'
j['p']['x'][-6] = e[3]['v'][0]
u[-2]['m'][4]['r'][8][0][-2]['z'][4] = {'a': {-5: 'j'}, 1: {'r': {4: 'm'}, -2: {'y': -7}}, 'g': {'c': 'n'}, 7: {'b': 'c'}, 8: {-6: 'h'}, 'f': {'p': {'o': -7}, 3: {'g': 0}}, 'i': {8: 'j'}}
z['h'] = -6
e['g'][7]['v'][-4][-8] = -7
test(p[-6][-8])
f['o'][-9]['y']['a'] = {'c': {-7: {'v': 5}, 'z': {7: 3}, -2: {'a': 'z'}}, 6: {'i': {0: 'w'}, 'l': {'u': -1}}}
u['e'][-5] = 's'
p[7][2][8]['b'][1] = {0: {'i': {-6: 3}, -5: {-9: 4}}, 's': {'j': 1}, 'y': {'w': 0}, -5: {'l': 'z'}, -3: {'g': -9}, -2: {'z': 'a'}}
length(i)
r['v'][-7]['c']['g'][2] = e['b'][-5]['d'][8]
z['f'][-9]['y'][-4]['w']['i'] = {-7: {-7: {-1: -1}, 9: {'y': {'h': 'b'}, -5: {'l': 'y'}}}, 'c': {1: -2}, 'l': {'y': {'y': 5}, 6: {'q': 's'}}, 'o': {-5: {-5: -7}, 'j': {'o': 2}}}
length(e['b']['z'][-7]['b'][2]['r']['l']['p'])
c['i']['n'] = {-8: {3: 0}, -5: {4: 5}}
test(b[2][7]['p'][-8])
x[-7] = s['m']['t'][9][6]['n'][9]['j'][-5][-4][-4]
h['p']['p']['a']['i'][0] = 1
a[-2]['d'] = z
i[3] = 'h'
u[8] = n['m']['f']['u'][-6]['w'][-6]['u']
test(c['s'][-7][1]['h'][-6]['f'])
d[2][5]['o'] = 4
r['v'][4]['e']['i'][0]['h'] = {'i': {'x': 'z'}, 7: {'l': 'u'}, -5: {-3: 2}, -9: {'k': 8}}
test(a[-2]['p'])
s[-4][-2][-7]['k'][-5][-1]['z'] = 'k'
x[-7][3][-7][7]['s'] = 'o'
x['m'][6]['c'][-3][-4][6][6]['w']['w'][0]['c']['c'][-6] = {0: {'a': 's'}, -8: {1: {'k': -2}, 'g': {'m': 'm'}}, 2: {-8: {'k': -3}, 3: {-5: 'p'}}, 7: {'k': 'd'}}
o[-3][-7]['k'][-5][-1]['z'] = -1
q[-1]['p'][-3] = 's'
s[-5][-6]['s']['s'][7][-4] = j['w']
u[-2][-5]['b'][-4][-9][0][0] = f[0]
length(c['e'][-8][-3]['w'][-4]['u'][7]['f'])
l['b']['p']['x'][8] = s[-5]
c['e'][-8][-2] = a
v['y'] = -7
test(l['s'][-1])
length(o[-3][-7])
d[3][2][5][7]['o'][-4][-7] = {1: {'q': 0}, 'k': {'k': 'c'}, 'b': {'o': -6}, 'w': {'v': 'u'}}
s[-4][-3][-5] = o[-3][-7]['k'][-5][-1]
g['s'][0][3][-4]['x']['g']['b']['n'][3][-1] = {'p': {'p': {'n': 'g'}, -1: {4: -4}}, -9: {'j': {-9: 'h'}, 6: {'a': {-4: -4}, 'm': {1: 7}}}, 'n': {-7: {5: {'t': {'q': -1}, 'g': {8: 'u'}}, 'l': {-8: 'l'}}, 's': {-9: 6}}}
m[-5]['v'][-9][-9][9][6][-2] = {'q': {'p': -9}, -7: {5: 'c'}, 'k': {'l': 'f'}, 'g': {'h': 'f'}, 8: {'i': 'k'}}
test(w[-4][-3][1][9])
test(v['r']['l'][5])
p[7][2][6]['z'] = 6
c[-8] = 't'
x[7][9][9][-1]['d']['v'] = 'j'
test(s[-5]['y'][-6]['s'][-7])
u['e']['z'] = {'q': {6: {1: 'a'}, -9: {3: 'a'}}, 8: {2: {4: 'k'}, -1: {'z': 'o'}}}
length(j['t']['d'])
p[-6][-8][4]['c'][-9]['b'] = {'x': {'r': {9: 9}, 'j': {-6: 'c'}}, 's': {2: {'h': -6}, 'e': {'d': 'h'}}, -7: {-3: {'s': {'b': 'r'}, 'j': {'y': 0}}, -1: {'q': -9}}}
z['f']['d'][0]['d']['f']['f'][-9]['i'] = q[-1][-4]['j']['u']
u['g'][1][-6]['p'][1] = p
length(l['m'][-8][-9][-7]['t']['h']['m'])
length(m[-4][-4]['m'][-6])
test(i[-2][5])
m['v'][6][-6][1][-5] = z[-4][0][6][3][-2]
f[1][7][-3] = -9
k[7]['o']['h']['a'] = {2: {3: {'d': 'j'}, 4: {'d': 5}}, 5: {'s': 'j'}, 'v': {-5: -2}}
length(j['p']['x'][1]['z'])
test(j[-4]['u']['u'][-4])
test(x[7][9][9]['a'][-5]['c'])
r[0]['g'][-5] = 'o'
b[2][7]['p'][-8][-9] = 'e'
q['y'][-7] = {'m': {-6: {-7: {-2: -6}, 1: {9: -3}}, 'u': {-9: -9}}, -2: {8: {'h': -9}, 'd': {-2: 'g'}}, 'f': {3: {0: 's'}, -5: {-4: {6: -2}, -3: {'r': -5}, 'n': {9: 'j'}}}}
test(p[-1]['h']['u']['h']['j'][5])
length(n['m']['f']['u'][-6]['w'][-6]['u'])
z[4]['u']['b']['m'][-7]['s'][6][7] = {0: {'r': 6}, 'b': {'q': 4}, 6: {'n': -7}, 7: {-8: 'q'}, 'i': {9: 'w'}, 'w': {-2: -6}, 'v': {'r': -1}, -7: {1: 9}}
test(q['y'][-7][-2][8])
q[-1]['h']['a'] = z
s[-4]['a']['d'] = 5
test(u['e'][-1]['f']['n'])
length(i['a']['b'][3][-3]['e']['z'])
length(w[-4][-3][1]['c'])
length(f[0]['d']['t']['s']['u'])
i['a']['b']['t'][-3][-1][1][-1]['t'] = -1
i['a']['b'][-1][-6][-9] = 's'
s[-4]['f']['m']['w'] = 0
f[-5] = {-4: {-8: {-2: 'j'}, 'h': {0: 3}}}
d['z'][-7][5]['s'][-5]['f'] = 'h'
test(o[-3][8]['u'][1][-5][-9][-3])
g[3][-5]['g'][7]['v'][-4][2] = 5
length(t['t']['b']['f']['i'][2]['m']['b'][-7])
g[3]['w'] = 'q'
j[-1]['s'][0]['v']['o']['q'] = {'h': {4: 'k'}, -6: {-6: 'x'}, -7: {'x': -6}, -3: {5: 'q'}, 'f': {'e': 'j'}}
length(y[-7]['q']['b']['p'])
test(q['y']['l']['d'][3])
b[2]['t'] = 6
k[1]['h']['a'][2]['u'] = {'c': {'h': 7}, 'r': {'e': {'o': 'o'}, -2: {-5: -5}, -9: {'f': 'e'}}, 's': {'i': {7: -8}, 'q': {7: 's'}, 6: {'a': 1}}, -1: {'y': 'o'}}
test(n['q']['c'][-1][4]['h']['n'])
x['m'][6]['c'][-3]['v']['j']['g'][1] = o[4]['r'][-3]['t']['e']
j[5][8][8]['j'][-3] = 'l'
j['w'][7]['j'][5]['e']['q'] = o[4]['r'][-3]['t']['e']
z[4]['z'] = {-7: {9: 1}, 2: {'i': -8}}
test(a[8]['s'])
h[3]['i']['o']['h'] = o[4]['b'][-5]['c']['p']
b[2][7][1][6] = 'r'
test(o[-3][-7]['k'])
k[7][-6]['y']['t'] = 'c'
x[7][2]['b']['a']['b'] = {'a': {5: {'d': 'r'}, 'f': {9: 's'}}, 7: {8: {0: 'y'}, -2: {'q': 9}}, 'l': {'w': 0}, 'q': {'o': 'b'}, -7: {6: 'r'}, -2: {3: 'b'}}
n[6][-5][-8] = -3
test(g[0])
y[-7][3]['z'][0][-9][-1]['p'] = {8: {'f': {'o': 1}, -9: {'r': -2}}, 0: {8: {9: -5}, -6: {'j': 't'}, 6: {2: 2}}, 4: {'s': 3}, 'p': {9: 5}, 'f': {'p': -2}}
d[7][6] = -9
length(w[-4][-3]['d'][-8]['g'][-1])
test(c[-9][-9]['e'])
t['s'][5]['w'][-4] = {'a': {-8: {-6: 'u'}, -9: {'z': 'w'}}, 'h': {1: 'p'}, 'l': {'p': -7}, 't': {'d': 'y'}, 'w': {'y': 2}, -4: {5: {2: 'd'}, 7: {'y': {'k': 'f'}, 2: {0: 's'}}}}
length(o[-3][8][-8][-6][0])
r[0]['x'][7][8] = 8
length(n['q']['c'][-1][4][9][8])
t[-5]['h'][3]['t']['s'] = 'q'
t[-5]['i'][9]['d']['l'][-6][5]['v']['f'][-8][3] = m[0][-7][2]['f'][1][-6]['p'][1][-1]
a[8]['s']['t'] = 8
length(n['m']['f']['u'][-6]['w'][-6]['u'])
j[5][8][8]['j'][-3] = k[1]['h']['a']['v']
f['o']['w']['n'] = 2
q['y']['l'][-5]['q'] = m[-5]['v']['s']['e']['t']['y']['l']
y[-7]['q']['o']['b'][2]['i']['r'] = z[-4]['j'][6]['b']
length(x['m'][9]['x'][6]['f']['i']['i'][-6])
j[5][8]['i'][-9][1][-7][4]['i']['l']['m'] = {'y': {-9: 6}, -6: {'m': -7}, 'z': {-8: {'v': 6}, 'e': {'s': 2}}}
j[-1]['w'][-6]['s'][1][3][-9][-1]['l'] = 'i'
s['b']['z'][2] = 0
b['a'][-2]['b'] = m
length(b['n'])
length(d[3])
y[-7][3][1]['t'][2]['g'] = 6
length(k[-7]['f']['s'])
length(c['e'][-8]['a'][2])
test(l[2]['d']['b'])
test(q[-1][-3][7])
f[1][-9]['h']['h']['e'][9]['q'] = {-7: {'p': {'e': -9}, 'b': {-4: -3}, 1: {-7: 'n'}}, 'r': {-8: 8}, -5: {3: {'z': 't'}, -3: {'b': 'x'}}, 'e': {-7: {-8: 2}, 'c': {4: 'f'}}}
test(k[1]['h']['a'][5])
i[-2]['p']['h']['s']['s'][-7][8] = {2: {9: 'i'}, 'w': {'t': 7}}
length(g[-6]['b']['r'][7]['o'][-6]['o'][-1]['r'])
v[5]['y']['b'][-1]['n']['r'][7] = j['p'][3][-6]
test(a[8]['s'])
test(n['c'])
m[-4][-4]['a']['z'][-1][2]['k']['i'] = 'b'
b[2][7]['p'][-8]['v'] = t[8]
length(y[0][9])
i['a']['b'] = 6
length(n['c']['j'][9]['c'][-8]['d']['p']['x'][-4])
u[-5]['o'][-6][8]['j'] = r[0][1]['r']
i[9]['g'][-5] = 1
test(r['v'][4])
test(e[-8]['h'][5][5]['v'])
q[-1][-3][7][9] = {'q': {'q': {-7: {'h': -9}, 's': {'p': 'h'}, 5: {-6: 'p'}}, 'r': {'q': {1: 4}, 'l': {-9: 'm'}}, 'l': {'w': 0}}, 9: {'z': 'j'}, -5: {3: {4: {-5: -6}, -4: {8: 'f'}}, 'n': {-5: -5}}}
f[1] = 'y'
m['v'][6][-5] = {9: {-8: 's'}, 'r': {'a': 6}}
k[1]['d']['y'] = 'd'
test(c[-9]['o']['o'][-5])
e['b']['z'] = {1: {0: 4}, 2: {'a': 'f'}, 'g': {-3: -6}, 6: {7: 5}, 'j': {'o': 3}, -1: {'d': 'v'}}
x['m'][9]['x'][-4]['j'][-4][9] = {9: {-7: -3}, -9: {'m': -8}, 4: {'g': 'h'}, 'o': {'l': 'n'}, -7: {'z': 0}}
z['f']['d'][0][0]['b'] = y[-7][3][1]
test(k[-8][-5][-1])
length(i['a'])
test(v['i'][-9])
length(u[8])
n[6]['s']['t'] = -5
v['r']['s']['f'][9] = 'x'
test(o)
k[1]['n']['w']['n'] = -4
s[-4][-8]['t'][-1]['p'] = 'i'
f['o']['w'][-5][-1] = -4
length(m[1]['o'])
test(o[0])
test(j['w'])
v[6]['z']['y']['s'] = 'f'
h[3]['g'][-4] = u[-5]['o'][3][0]
e[2][5][1][0]['p'][-1][-7] = 'c'
o[0][-3][-4][-1] = 'r'
j['p']['x'][-6]['p'][-3]['d'][-7] = 9
d[1]['g'][4]['w'][8] = -6
d[7] = {-4: {'c': {'i': 8}, 'b': {'k': -1}, -9: {'c': 't'}}, 't': {-7: {-5: 'x'}, -1: {0: 'b'}}}
l[2]['d'][3][-4] = {0: {2: 5}, 1: {'b': {7: 'q'}, 'u': {-9: 9}}, 3: {2: 'x'}, 'f': {'n': 8}, 'i': {-4: -3}, 9: {9: 0}, 'n': {'z': 'l'}}
test(u)
test(b['a'][-2]['b'][0][7][6][9])
i[9][-8][-9]['o'][3][2][5][1][0]['y'][7] = -4
l[6] = {2: {'n': 'h'}, 3: {'e': 'v'}, 5: {3: 4}, 'z': {-4: 'n'}, 7: {-5: 3}}
test(d[9][7])
u['g'][1][-4][2][9][6][0] = {1: {-4: -9}, 'b': {0: 'a'}, 7: {'w': 'y'}, 'm': {-1: 'p'}, 'y': {5: 9}, 'z': {-8: 'r'}}
j['t']['v']['d'] = 'h'
d['a'][2] = 'a'
length(o[-3])
b['n']['b']['y'] = 't'
y[0][9]['k']['a'][7][-7][6]['l']['v'] = 'o'
test(k[7][-6])
p[-6][-8][4]['c'][2][2]['c']['y'] = 'x'
a[-2][8]['d'] = 4
test(y[-7][3][1]['t']['a']['i'])
z[4][7][-4][8] = 'v'
c['i']['d']['x']['d'][9] = 5
m[-5]['v']['i']['n'][-5][-9] = 3
h['p']['p']['a'][4]['z']['b'] = {'a': {'g': 'm'}, 'm': {-5: 3}, 'o': {-3: 'g'}, 'q': {5: 'y'}, 'u': {'x': 7}, 'z': {'b': 5}, -3: {'s': 1}}
o[4]['r'][-3]['t']['c'][-8][9]['m'] = {-8: {-6: 'u'}, 'f': {2: 7}}
z['h'] = t
n['q']['c'][-1][4][4]['p'] = r[1]['a'][-6]['u']['b'][5]
length(r['v'][4]['e'][-4][7])
w['s']['g'][0]['v']['u'] = {8: {-9: 'f'}, -7: {'w': 5}, -3: {'m': {5: 'i'}, -9: {'b': 'w'}}, 1: {'p': 'p'}}
test(m[1]['o'])
x['m'][6]['c']['u']['h']['z']['k'][-7]['y'][-2] = 'i'
test(b[2][7]['p'][-8]['v'][5][5])
test(g[0])
p[-6][-8]['p'] = z['f']['d'][-9]['f']
v[6]['z']['w']['l'] = -5
test(p[-1]['y']['w'][8]['h'])
test(e['b']['l'][8]['c']['h'][-5])
y[-7]['q']['b']['p']['k'] = {'a': {'x': 5}, 4: {8: 3}, 'g': {'l': 5}, 'h': {1: 'u'}, 'w': {'y': 9}, 'v': {-3: {'l': 0}, 'g': {'f': -3}}, -8: {8: 's'}, 'x': {'n': 'f'}, -1: {'m': 2}}
g['s'][0]['g'] = {5: {3: -7}, 7: {'y': 'c'}}
f[-5][-4]['h']['d'] = {2: {-6: 4}, 'k': {'r': 'b'}}
u[-5]['b'][-4][-9]['n']['x'] = n['m']['f']['u'][-6]['w'][-6]['u']
g[0]['v'] = 6
test(x[7][9][9][-1])
n['m']['f']['u'][-6]['w'][-6]['u']['y'] = {'l': {'z': {'q': 'm'}, -3: {-6: -6}}, -2: {-5: 9}}
p[-1][3]['d'][6][-7][-2]['n'] = m['v'][6][6]['w']['w'][0]['c']['c'][-6][7]
length(e['t']['m'])
g['s'][0]['m'] = {0: {'u': 'z'}, 'p': {'y': 'e'}, 'u': {-3: -4}}
test(t['t']['b']['f']['y'])
f[-5][-4][-8][-5] = {'e': {-5: 'g'}, 'd': {'x': -4}}
length(v['x']['p'][-2])
length(w['p']['o'])
l['u'][3]['h'] = u[8]['y'][-2]
y[-7]['q']['o']['b'][2]['i']['r']['a']['v'][-2]['v'] = j['p']['x'][1]['w']
j['t'][-4]['s']['g'][4]['h']['p'][1]['f']['b'] = {7: {-8: 'h'}, 8: {'p': 'g'}, 'k': {'d': 7}, 'j': {6: 0}, 'q': {'e': -7}, 'r': {'c': 3}, 'x': {'k': 'b'}}
length(l['m'][-8]['e'][-9][1]['e'][-9][1]['i']['n'][-5])
m[3][0]['r'] = c[-9]['r']['j']
d['z'][-7][5]['s'][-5]['f'] = 'z'
test(h['j'][2]['c'])
test(m[-4]['u'])
o[0][-3][-4]['k'] = z['f'][-9]['y'][7]
w[-5]['o'][-3]['a'] = 'm'
test(h[3])
p[7][2][6][-6][5]['v']['f']['o'][3] = {'h': {'m': {8: -3}, -4: {'c': 'j'}}, -1: {2: {-4: 'g'}, -9: {'k': {'x': -8}, -9: {4: 'i'}}}, 'f': {'b': 1}}
h[4][8][9][-9]['j'][6]['h']['z'] = -2
length(b['a'][-2])
length(q['y'][-7])
p[-6][-8]['b'] = p[-6][-8][4]['p'][-4]['g']
test(w[-4][-3][1]['s'])
length(n)
g[8]['e'][-3]['u'] = 5
test(l['s']['a'][-1])
w['c'] = {'p': {-4: 't'}, 'g': {'q': -7}, -1: {-5: 'h'}}
n[-8]['v']['l'] = 'l'
k[1][-5]['r'] = x[7]
length(h[3])
h['j'][2]['c']['y'] = 'a'
length(e['t']['f']['r'][6]['l']['u'][-5]['d']['l'][-6]['l'][6])
t['z'][-4][-2][9] = w[-5][7]['o'][-6]['o']
k[-7]['f'][-1]['x']['r']['i']['f'][9] = {0: {-4: {'o': 'i'}, 4: {-1: 'e'}, 'w': {'p': -4}}, 'j': {'q': {'j': 'k'}, 't': {'t': 'n'}}, 'd': {'c': -8}, 'o': {'c': {'m': 'r'}, 'b': {'z': 'd'}}}
test(r[0]['r'][5]['g']['t'])
length(m[3])
h[4]['w']['g']['a'][-2][-7][-9] = v[5]['l']['r'][-2]
p[7][2][-7][6][-5]['c'][9][-8] = 'd'
z['h']['s']['r'] = 'j'
length(q['y']['l']['d'][3])
u[-2]['p']['h']['j'][3][-3]['t']['r']['t'][-8][-2][6] = {'y': {1: {'f': -8}, -9: {0: -1}}, -6: {0: {'m': 8}, 's': {'w': 4}}, -9: {4: 'l'}, 'v': {-8: {3: 5}, 4: {2: 'y'}}}
r[1]['u'][0][0] = a[8]['s']
test(a[-2]['a'][7]['x'][-1])
test(b[3]['d'])
c['e']['c']['o']['l'][-3]['k'][-3][-1]['w'][-6][-7][7] = 6
r['v'][4]['e'][-4]['p'] = v['i']['j']['l']
p[7][2][-7][1] = {0: {-7: -3}, 's': {9: 0}, 4: {'w': 2}}
o['z'] = 'c'
length(q)
k[1]['h']['a'][2][3]['j'] = 5
w[-4] = {'x': {'c': 'o'}, -6: {'d': 8}, 'm': {-6: 6}, 7: {'o': 5}}
y[-7]['q']['b']['p'] = 'r'
k[-8] = t['t']['b']
test(i['a'])
b[1][-7][8] = -4
p[7]['i'][-6]['s'] = k[-8]['f'][-6][4]
y[-7][3][-6][1][3][-4][8] = a[8][-5]['c']
test(x)
i['o']['l']['u'][-5]['d']['l'][-6]['c']['u'][9] = n
length(q[-1]['m'])
length(b[3])
m[-4]['u'][-5]['o']['u'] = 'c'
m[0]['u']['a']['h']['s']['s'][-7][8]['w'][8] = d['a'][9][6]['n'][9]['x']
test(m[-5]['v']['e'][-8][-2][-2][-4][-3])
test(n['c']['q']['i']['n'][-8])
test(z[4])
w['s']['u'][4][8] = -3
test(v[6]['h'])
test(x[-7][3][-7][7])
l['u'][-2][-2] = {3: {'i': {'i': 'h'}, 4: {-9: 'w'}, 'l': {'h': 't'}, -1: {'w': 'r'}}, 'v': {1: {-6: 'c'}, 5: {'j': 5}, 'g': {-3: 8}}}
h[4]['w']['t']['k']['z'][-6][-6] = 'a'
k[7][-6]['y']['t'] = {2: {'a': {9: 'h'}, -2: {'v': -9}}, -2: {'w': {-6: {4: 'd'}}, 'o': {8: {'u': 2}, 4: {'c': 5}}}}
length(b[1][6][-6]['c']['u'][9]['m'])
test(c['e'][-9][1]['s'][-7][1][-5][-2])
test(p[-6])
l['b'] = 3
test(q['y'][-7]['f'][3])
length(r[7]['d'][9]['q']['i'])
test(n['v']['l']['f']['i']['i'][4])
o[8] = c['e']
length(n['m']['f']['u'][-6]['w'][-6]['u']['y'][-2])
length(w[-5][8][0][-2][-8])
d['h']['o']['x']['w'][3] = {2: {-8: 'f'}, 'f': {-1: -9}, 'm': {9: 'o'}, -9: {1: 2}, -4: {'m': 'n'}, -3: {'s': -9}}
length(h[3][2]['n']['i'][7][6]['x']['v'])
n['m']['f'][4] = 'n'
length(f['o']['w'][-5])
z[-4][5] = c['i']['n'][-8]
x['m'][9] = 'i'
l['a'][-1][9] = -5
test(k['q'])
u['m'][4]['r'][7]['o'][-6][3][6][4] = 'o'
i[3] = o[-3][-7]['k'][9]
test(m[-4]['u'])
i[3][6] = a[-2]['p']['l']['y']['a']['h']['s']['s'][-8]
test(d[9][7]['e'])
c['i']['d']['p']['s']['a'] = 'p'
length(a[8][-5][-2])
test(j)
q[-1][-4]['j']['y'] = {-8: {'r': {-4: -6}, 'm': {2: 'e'}}, 'z': {-1: 'r'}}
d[-6] = 3
b[1][-7][1][4]['w'] = 'x'
test(d[1]['g'][-6]['r'])
length(c[-9][9])
o[4][-6][1] = 4
length(m[3][0]['r'])
length(s[5])
b[2][-1][1]['e'] = n['m']['f']['u'][-6]['w'][-6]['u']['y']['l']['z']
length(a[8]['s'])
a[8]['s']['t'] = {'a': {'h': 2}, 8: {'q': 'l'}, 'k': {'p': {'f': 'o'}, -5: {2: 'o'}}}
length(z[4]['z'][-7])
r['v'][4]['e']['i'][0]['h']['i']['k'] = c['s'][-4]['h'][-9][6]
length(l)
test(i[-2]['p']['h']['s']['s'][1]['s'][-6])
z['h']['a']['h']['s'][-7] = -3
v[-1][-2][5][-2]['v']['c'][-7] = 0
test(q[-1]['m'])
e[-8] = -2
test(o[0][1])
b[3]['t']['l']['u'][-5]['d']['l'][-6]['l'][6]['h'][-3]['d'][-8]['p'][0][-6] = 8
h['j'] = -3
n[6][-5][-8] = g[-6]['b']['r'][8][0][-2]
g['i']['h'] = y[-7][3]
e['t']['m'][2][-5] = 'd'
test(z[4]['z'][-7])
test(j['w'][7]['j']['t']['i'])
m[1]['p'] = -1
j[-1]['w'][-6]['k'] = {8: {9: -2}, 'f': {5: 's'}}
v[6][7][-3]['u'] = 'x'
length(c['s']['e']['t']['d']['g'])
test(y[0]['f'][5][7]['e'])
c[-8] = 'l'
x[-7][3][4]['w'] = j[5][8][8]['j'][-3]
test(p[-6][-8]['b'])
v['r']['s'] = 'y'
test(u[8]['y'][-2])
i[-8] = {'j': {'g': {5: 0}, 'o': {9: -8}}, 6: {'k': {'x': 'a'}, 4: {'c': -2}}}
o[-3][-7]['k'][-5][-6]['u'] = e[3]['n'][2][2]
test(t)
b[3]['d'][-9] = b[2][7]['p']['r']
o[8][-9][1]['e'][-9][1]['s'][-3]['a']['z']['t']['m'] = -2
b[3]['t']['l']['u'][-5]['d']['l'][-6][5][7] = 'a'
r['v'][4]['b'] = s[-5]
test(v[6][7][-3])
t['z']['x'][3]['i'] = y
p[-1][3][6][-3][-4][6][0] = -9
s[-5][-6]['s']['s'][7][-4][7]['j'][5] = q['y'][-7]['m'][-6][1]
length(d[3][3])
length(c['e'])
j['t']['d']['o']['n']['w']['n'] = {'a': {-1: 6}, 3: {'r': 's'}, 'd': {-2: 5}, 9: {3: -6}, 'k': {'z': -2}, 't': {1: 'f'}, -7: {'k': 'r'}, -4: {-4: 'v'}, -3: {'p': 'e'}}
j[-1]['s'][0]['v'][4]['u'] = v[-1]
length(c['i']['d']['x']['d'])
length(g[-6]['b']['r'][7]['o'][-3][-7]['e']['h'])
length(p[-6][-8]['p'])
c['i']['d']['p']['x']['d'] = -9
test(a[-2]['a'][1][-3]['o'])
v[6]['h']['t']['a']['u'] = -5
length(i[3][6])
length(y[-7][3][-6][1][3][2])
test(b['n']['u'])
s['b']['u'][-5]['h'][8][-6] = d['z']['e']['f']
length(q[-1])
k['q']['b'] = 'k'
k['q']['f'] = 't'
f[0][1][-9][-5] = 'g'
d[1]['g'][-6]['r'][6] = z
d[1]['g'][-6]['r'][6][7] = -6
length(e['t']['m'][-1][4][5][7]['j'][-8]['c'])
h[4][8][9]['n']['l']['r'] = {0: {'r': {'c': 'b'}, 6: {'c': 3}}, 3: {-8: 'o'}, 9: {0: -2}, 'p': {2: 'x'}, 'r': {'k': -1}, 't': {8: -5}, -9: {'g': 'q'}, 'x': {-1: 'c'}}
z[7] = b['a'][-2]['b']['v'][6][-5][9]
length(a[-2]['p']['l']['y']['t']['b']['f'][-1])
f[0][1][3][2] = i
q['y']['l']['d'][-3][6] = 'u'
test(m[0])
length(z[-4][-4][3][-7])
f[-5][-4][-8][-5] = 'g'
length(i[-8][6][4])
length(r[7][4][0]['t'])
z[-4][6][6] = -6
n['m']['f']['u'][-9] = 't'
p[-1]['y']['w'] = -5
j['w'][7]['j'][5][2] = -6
length(l['f']['j'])
k[1]['x'][2] = e['t']['f']['p']['s']['t']
length(s['b']['u'][4][7])
k[7]['o']['n']['w']['n']['a']['b'] = {1: {-2: 'r'}, 'k': {'g': 'x'}, 'e': {'n': 'f'}, 9: {-7: 'y'}}
test(p[-1][3][6][-3]['v']['j']['g'][1])
test(f[0][1][3][2][3][6])
n['q']['c'][-1][4][2]['a'] = {0: {'p': {0: 3}, -1: {2: -1}}, 2: {9: {'f': 'v'}, 6: {9: {-3: 'k'}, -6: {'b': -7}, -4: {-6: 6}, -2: {'k': 'x'}}}, 't': {-8: 0}}
test(c['i']['n'][-8])
c['e']['y'] = -1
m[0][7][1]['u']['z'][-4][4][-2][3] = -8
test(a[8]['s']['t'][8])
test(a[8][-5][5])
w['s'][-3]['c']['e']['s'][4] = -6
y[0][9]['k']['a'][7]['k'][-3] = 2
c['e'][-8]['s'][8]['x'][-9]['i'][8]['j'][9] = 'j'
length(c[-9]['o']['o'][0][1][-9])
length(u[-2][-2]['e'])
length(f['o']['w'][-5])
y[-4] = {'q': {-7: 9}, 'b': {8: 8}}
l[1] = {8: {6: 'f'}, 'c': {'v': 's'}, 'j': {'k': -3}, -4: {3: 'g'}, 7: {-6: 0}}
test(a[-2][-4][-3])
test(a[-2]['s'][-9][3][-4]['r']['h'])
z['h'][-5] = g['n'][4]['i']
m[-5]['v'][-7] = -3
test(i['o']['l']['u'][-5]['d']['l'][-6][5]['v']['f']['o'][3][-1][-9][-9])
length(k['q'])
i[-2][5]['v']['b'][-2]['h'][0] = 'h'
e['g'][7] = {-7: {'i': {-2: 4}, 1: {6: 'r'}, 'j': {-7: 'y'}, -3: {6: 'k'}}, -9: {3: {'z': -1}, 'd': {'y': {'u': -8}, 'c': {1: 'c'}, 'g': {'r': -4}}, -2: {7: -9}}}
length(e[2][5][1][0]['y']['j'])
a[-2][8][6] = h[3]['g'][-4][-3]
z[4]['u'][0]['i'][-6][9][-1] = {5: {6: 's'}, 'l': {6: 6}}
t['a']['h']['s']['s'][-8]['t'] = {3: {'g': 's'}, 'f': {0: -4}, 'h': {'q': 't'}, 'j': {8: 5}, 'q': {-2: -8}, 's': {-7: -5}, 'u': {-8: 'a'}, -5: {'z': 1}, -1: {'h': 'i'}}
s[-5]['z'][-7][7]['k']['l']['d']['r']['a']['k'] = {'y': {5: -9}, 0: {4: 1}, 'q': {'c': {'v': 0}, -4: {'p': 7}}, 7: {-7: {'i': 4}, 4: {'r': {7: 'l'}, 'u': {'s': 1}}}}
h['p']['p']['a']['d']['x'] = 5
length(i[-8][6]['k'])
r[0][5]['a'][-4] = {1: {'w': 'z'}, 2: {-5: {-4: 't'}, 5: {9: 'q'}, 'w': {-4: 'x'}}}
test(f[-5][-4]['h'])
length(w[-5][8]['v']['r']['y'][-6][4][3])
w['c']['g']['q'] = 'j'
y[-4]['b'][8] = {'z': {8: {'z': 'o'}, 6: {'y': -1}}, 7: {'a': {'g': 7}, 'w': {2: -1}, 'v': {'h': 'm'}}}
l['f']['g']['u']['p']['i'] = 'c'
g['s'][-8][-2]['z'] = {'h': {'s': 9}, 2: {2: {1: 'i'}, 4: {-1: 'w'}, -3: {'t': 'h'}}, 's': {-4: -8}, -6: {'u': {'y': 5}, -3: {-3: -7}}, 7: {'a': -1}}
w['p']['c'][-7]['o'] = 'n'
w[-5][8]['v']['r'][3][5][-8][-2] = 'f'
length(g)
test(t['t']['b']['f']['i']['e'])
test(f)
k[7]['o'][-3]['p'] = 'a'
test(r[0][-6])
p[-6][-8]['b']['i'] = f['o'][-9]['l']
length(j[4]['r']['v']['m'][6][5])
length(b[2][-1]['b'])
p[7]['i'][4]['i'] = j[5][8][5]['d'][-8]['g'][-1]
a[-2]['a'][1] = -9
length(u)
i[9]['g'][7] = 't'
length(d['z'])
o[-3][-7]['k'][9][6]['t']['j'][8] = 'g'
test(l['u'][3]['y'])
k[-7]['g'] = {'c': {'m': 'l'}, 'g': {'x': 3}, 6: {'s': {'h': 'f'}, 'r': {7: -6}}, 7: {-3: 'e'}, 'o': {'z': 5}, -4: {-3: 1}, -3: {'w': 'r'}, 5: {'m': 'z'}}
f[-5][-4] = {8: {'m': {0: 'a'}, -2: {5: 'n'}}, 'x': {3: {'p': -6}, 6: {6: -5}, -1: {-1: 'y'}}, 'j': {'t': {'w': 'g'}, -1: {'p': 'z'}}, 'f': {'y': {'z': 5}, -8: {-8: 'z'}, 6: {'n': 0}}}
b['a'][-2]['b'][-5]['v']['e']['c']['o']['l'][-2][9] = j['t']['d'][-6]['l'][4]['l']['p']
y[0][7] = l[0][6]['s']
test(r['v'][-7][1]['u']['y'][-2])
t[-5]['y'] = 'y'
l['a'][-1][6] = {3: {-7: -1}, 4: {'n': 'h'}, 'g': {5: 'j'}, 'k': {-9: 'r'}, 's': {-2: 'o'}, 'y': {'l': -5}, -7: {7: -5}, -4: {1: 't'}, -3: {'g': -6}}
g[5][7]['p'] = o[8][-8][-2][-2][6][-1][-6][-8]
h['v'] = 'v'
length(p[7]['i'])
c['i']['n'][8] = {'m': {'l': 'q'}, 'r': {-2: 'o'}, 'y': {'e': 'g'}, 'z': {'i': {'g': -6}, -4: {'f': 'p'}}, -4: {-9: 3}, -1: {-3: 'h'}}
v[5]['l']['r'][-2]['z']['e']['r'][8]['f'] = 'x'
s[5][-6]['d'][-5]['b'][-7][5] = {1: {'q': -4}, 'b': {'y': {-5: 's'}, 'b': {'j': 3}}, 'i': {-2: {9: -5}, 'g': {-6: 'u'}}, 'k': {'i': -1}, 'r': {9: {'f': 'y'}, 6: {'i': 0}}, -5: {6: 4}, -4: {1: 8}}
j[4]['r']['v']['p']['a'][-4][-5] = {0: {'k': {3: 'y'}, 'd': {'o': 8}}, 2: {'j': 'f'}, 'b': {8: {-6: 3}, 3: {5: 'p'}}, 'f': {-8: 'j'}, 'h': {'o': 'f'}, -1: {'j': -8}}
length(z[-4][6])
test(m[3]['k']['g'][-3])
t[-5][-4] = d['h'][-7][0][-9]
c[1] = 'm'
test(j[5][8]['c']['d'][-6][-6][1][-4][4][-9])
length(b['a'][-2]['b'][1]['x'])
w['p']['c'][0]['a']['f'] = {'p': {2: 2}, 'n': {0: 4}}
a[8]['s']['t']['a'] = {-2: {1: -3}, 'c': {'x': 5}, 'w': {'a': 8}, 'g': {-6: -3}, -9: {-1: -1}}
v['r']['l']['l'][-4][0][-9] = -6
y[-7]['q']['b'] = -7
a[8][-7] = {4: {'l': {-8: -4}, 'f': {'d': 7}}, 'l': {'w': 'm'}, -1: {'g': -7}, 'f': {-5: 'n'}}
y[-7]['q']['o']['b'][2][-1] = 'e'
u[8]['y'][-2] = -7
d['h']['o']['x'][-4][-9]['k'] = {'v': {'z': -5}, 7: {'o': -9}, 4: {'s': 'u'}, 'n': {'i': {8: 2}, -5: {-9: 4}}}
x[-7][3][-7][7]['s'] = 9
test(x['m'][6]['c'][-3][-4][6][-5][9])
test(y[0]['f'][5][1])
u['e'][-1]['f'][-5] = h['p'][1]['z']['t']
length(o[0][1])
b['a'][-2]['b'][3]['k']['g'][-5]['q'] = {9: {'r': 'g'}, 's': {2: 0}, -2: {8: 'd'}, -1: {'y': {5: 'm'}, -1: {1: 1}}}
v['i'][9][7][4]['f']['g']['o'] = {'x': {'e': 5}, 'k': {'w': 'o'}, 3: {'k': 'o'}, 6: {'d': 'b'}, 'o': {'x': 'h'}}
l['a'][-1] = 'v'
h[3]['g'][-4][-3][5] = {'q': {-3: 'f'}, -5: {6: -4}, 4: {'c': {'f': 'f'}, 'n': {'l': 7}}, 't': {'s': 6}}
test(t['s']['i']['q'])
p[7]['i']['m'][2][-2] = {'x': {'f': 'o'}, 'k': {'e': 'z'}, 'u': {'g': 't'}, 't': {2: -2}, 'f': {-6: -2}}
h[3]['u'] = 'i'
j[-4][4]['s'] = {'e': {3: {7: 4}, 'z': {'t': -2}}, 'k': {8: {'t': -6}, 'z': {0: {8: 2}, 8: {8: 'd'}}}, 4: {'c': {-2: -6}, 'v': {'q': 8}}, 'o': {'f': 2}, 6: {'x': 4}}
length(p[-6][-8]['p'])
l['a'][0] = 'x'
c[-9][-2][1][-9]['m'][6] = {'r': {-3: {-6: 'g'}, 5: {'s': -8}}, 4: {'a': {4: -4}, 5: {'b': -1}}}
test(b[2][-1]['b'])
length(q['y']['l']['b']['o'])
e[2][5][7]['q'][4][-4][-2]['l'][1] = {-8: {6: 'r'}, 'c': {-1: 'd'}, 5: {8: 4}, 'w': {-7: {-6: -1}, 3: {'r': 1}}, 'v': {-2: {'a': 'l'}, 7: {'m': 'j'}}}
a[-2][8][6][5][-5][-6] = 'j'
x['m'][9] = {0: {-2: {'k': 'e'}, 7: {-3: 8}}, -9: {'g': 'p'}}
z[4]['u']['s']['n']['x'][6][-4] = u['p'][3][0]
length(a)
length(i[9][-6]['q'][-6]['s']['s'])
i['o']['l']['u'][-5]['d']['l']['i'] = 0
p[7]['q'] = 'f'
test(h['p'])
q['p'] = -3
length(p[-1]['h'][4]['f']['g']['o'][6])
j[4]['r']['v']['m'][6][-8]['k'] = 'z'
x[-7][3][4]['w'][-5] = j[-4]['u']['u'][0]
v['i']['s'] = {'p': {'p': 0}, 'k': {-4: {'q': 'b'}, 'w': {'k': 'm'}, 'v': {6: -6}}, -6: {8: -2}}
test(n)
test(i['o'])
q[-1]['m']['g'] = 1
y[-7][3]['z'][0][-9][9][-3] = {-7: {9: {-1: 'z'}, 'h': {'l': 'g'}}, 'm': {1: {'n': -6}, -1: {'b': 't'}}, 't': {'p': {9: -1}, -3: {7: 'e'}}, 'g': {'r': {'l': 'q'}, -1: {'g': 'h'}}}
k[1]['d']['w'] = {'m': {0: {'q': 3}, 'h': {-1: 't'}, 6: {'d': 'q'}}, 'o': {6: 5}}
length(h[4]['w']['t']['k']['i']['m'])
length(h[3][2])
test(n[-8]['r'])
length(z[7])
f['o']['w'][-5][-1] = 6
test(a[-2][6])
y[0]['f'][5]['a'][2]['n'] = {'a': {4: 8}, 'p': {2: 'x'}, 0: {'m': -7}, 'v': {'n': 'h'}}
l['f'][7][4] = {3: {-5: -8}, 'e': {'r': 'z'}, 'd': {-3: 9}, 8: {1: {'r': 'j'}, -7: {'t': 'o'}}, 'h': {1: {'g': 'r'}, -5: {'u': 'd'}}, 'x': {-1: 'm'}, 5: {'b': -5}}
t['s'][5]['d'][-5] = l[-6][-5][-9][-3]
length(d[1]['g'][4]['w'])
v[6][7]['j']['a'] = 9
test(r)
p[-6][-8]['b']['i'][0] = 3
test(d[9])
l[-9]['b'][0]['t'][5][-5][-5] = {0: {'p': 'c'}, 's': {-3: 'd'}, -9: {9: {-3: {2: 'm'}, -1: {'k': 5}}, 2: {'z': {-2: -7}, -1: {2: 's'}}, 'd': {'a': {'v': 'p'}, 6: {'q': -8}}}}
length(f['o'][-9]['y']['a'][6]['i'])
a[-2][-4][-3]['r'] = {'y': {1: 'j'}, 8: {8: 7}}
c['i']['n'][-5]['p'] = b['a'][-2]['b']['v'][6][-5][9]
length(m[1]['e'][8]['z'])
length(h[3]['e'])
h['p'][1]['z']['t']['l']['j'][0]['l']['x'] = -4
q['y']['l'][-5]['q'][-8] = 7
f['o']['w'][-5]['m'] = 'r'
h[4]['b'][-3]['t']['c'] = {3: {9: {'x': 'h'}, 7: {'s': 'h'}, 'n': {'e': 'b'}}, 5: {-7: {-5: 'i'}, 7: {2: 'f'}}}
u[-5]['b'][-4][-9][0][0][1][0]['u'][3] = s['b']
length(a[-2]['a'][7]['x']['x'])
length(d['h']['o']['x'])
test(j[-4])
length(a[-2])
test(b[2][7][1])
test(j[-1]['w'])
e[3]['n']['o']['z'] = 'u'
g[-1]['a'][3][-8] = {'w': {5: {8: {-1: 'h'}, 'j': {1: 'm'}}, 'o': {-3: {'w': -6}, 'w': {-5: 'y'}}}, 4: {'k': {'j': -9}, -4: {'b': 'l'}}, 6: {'r': {'y': 'e'}, 6: {4: 'g'}}, -1: {'r': 'g'}}
h[4]['w']['t']['k'] = 'd'
k[2] = {'h': {2: 'g'}, 'd': {'k': 'r'}, 'p': {9: 'r'}, 7: {1: {'i': -8}}}
test(q[-1][-4]['j']['u'])
h[4][8][9]['j'][9] = {'y': {'y': {-4: -8}, 't': {'d': 0}}, 'h': {'r': {-4: 'g'}, 'b': {-5: -2}, 'm': {'m': -4}}}
length(u[-2][-2][8]['y']['l'][-3])
r['g'] = a[-2][8][6][5][4]['n']
u['m'][4]['r'][8]['v']['r'][3][5][-8][9] = z
x['m'][6]['c'][-1] = 'l'
y[-7]['q']['o']['b']['r'][5]['a'][1]['h'][-2] = a[-2]['s'][-9]['d'][8]
length(e['g'][7][-9][3])
m[0][7][1]['u']['z'][-4]['h'] = -9
u['g'] = d[1]['g'][4][-6]['m']['r'][7][4]['g']
u[5] = f[-5][-4]['j'][-1]
w['p'][-6][-4][3] = 'e'
length(p[7])
test(s['b']['u']['b']['m'])
f['g'] = {2: {0: {2: -9}, 1: {3: -5}}, 'v': {3: {'e': 8}, -3: {1: 'h'}}, 'e': {'w': 5}, 'n': {-2: 'q'}}
z['h'][-9] = k[-7]['g']
u[-5]['o'][3][0][-3][5][-5][-5]['s'][8] = -3
test(z['h'][-9][-3])
h[3][2][-5]['b'] = o[8][-9][1]['i']['d']['p']['x'][-4]
z['f']['d'][-9]['f'] = {'y': {'q': -6}, 1: {0: 2}, -6: {-2: 'h'}, 'g': {'d': 'c'}, 'v': {4: 'e'}}
b[2]['k'] = 9
test(n['q']['c'][-1][4][4]['p'])
length(p[-6])
g['n'][3]['o'] = -3
w['p']['o'][-6] = o[-3][8]['u'][-6][8][9]
o['b'] = {8: {'t': 'f'}, 4: {'u': 1}, 't': {'c': 2}, -2: {3: {-5: 't'}, 5: {'g': 0}}, -9: {4: -9}}
q['y'][-7]['m']['z'] = {'c': {8: 's'}, 'f': {-2: -8}, 'k': {'v': 'a'}, 'p': {'q': -1}, -8: {'b': {4: -4}, -4: {'s': 5}}, -5: {0: -7}, -1: {'t': -4}}
a[-2][-4][9]['h'][8] = -4
l[6][2]['b'] = t[8]
h['p']['p']['a'][0] = y[0][-1]['d']
e['b']['l'][2]['a'] = q[-1]['m']
y[-4]['q'][-5] = a[-2][8][6][5][-5][-5]['s']
c['s']['e']['t']['d']['g'][-9] = {1: {'h': 'b'}, 'b': {2: {-7: 'p'}, 'z': {'s': -8}}, 'j': {'c': 'n'}, 'q': {-3: 'n'}, 'v': {3: -2}, -7: {0: 'h'}, -5: {'s': 'b'}, -1: {3: 'f'}}
length(o[8]['c'])
length(r['v'][-7]['c']['b'])
w[-4]['m'][-6] = 'h'
z['f']['d'][0]['d']['g']['c'][-6] = d[9][6][-3]
e['t']['f']['p']['s'][5][8]['n'] = 'p'
test(j[5][8]['c']['d'][-6][-6]['r']['d'])
a[-2]['a'][7][-4] = 'd'
e[2][5][7]['q']['o'] = {0: {4: 7}, 1: {'o': -6}, 'b': {'b': 2}, 4: {-6: 'q'}, 'g': {'j': 8}, 8: {'s': -1}, 'j': {-1: 3}, -8: {'e': -5}, -6: {'m': 7}}
length(o[8]['c']['o']['l'][-2][9]['z'])
test(c[-9][9][0][-4])
test(i[3][6]['t']['s'])
c['i']['n'][-8][3] = {0: {-8: {'a': 's'}, 3: {7: 0}, 'm': {'n': 8}}, 'i': {-6: 'o'}}
p[7][2][6][-6]['c']['u'][9][4]['s']['d']['d'][-4][5] = 's'
w['c']['g']['q'] = o['b'][8]
length(k[7]['o']['b'])
h[3]['e'] = 'x'
o[8][-9][1]['e']['c']['o']['l'][-3]['k'] = {8: {'e': 'l'}, 'h': {-5: 'm'}, 'm': {7: -4}, 'q': {'a': 'k'}}
y[-7][3]['o'] = 'j'
test(r[0][6][0][-4])
length(k[2][7][1])
i['n'] = w
test(w['s']['g'][0][-3])
test(t['t']['b'])
g['i'][0]['h'][-9][7] = {'m': {'p': {'r': 5}, 'w': {'k': {-6: 'g'}, -1: {'a': 'a'}}}, 't': {8: {6: 'o'}, -7: {-4: 4}, -5: {'j': 'j'}}, 'v': {-8: {'c': {'c': 'j'}, 'o': {'j': 'r'}}, 'r': {'e': 2}, 'n': {'p': -5}}}
test(j[5][8][5][1]['b'][6][6]['f'][0])
length(m[-4][-4])
t['z']['h'][0]['w'] = h[3][2]['q'][-1][4][9][-1]
test(i)
v['q'] = s[5][-6]['d'][-5][-9][-1]
g[-1]['a'][-2]['m'] = 'f'
x[-7][3][-7]['g'][-4] = 'q'
f['o'][-9]['y']['a'][6]['i'][-5] = s[5]['s'][-9]
l['m'][-8]['i']['n'][-5]['p'][-8] = -9
b[1][2][8] = {-8: {'g': 4}, 'x': {'e': 'v'}, 'u': {-4: 'l'}, 'g': {'s': 'r'}, -9: {'f': 'z'}}
length(r[1]['u'][9])
test(w['p']['o'][-6])
test(b[1][-6][3])
test(i[9][-8])
length(f[-5][-4])
test(w[-4]['m'])
length(p[7]['i']['b'])
n[-8][-9]['a'] = {7: {'v': {2: 'q'}, 'n': {-8: 'y'}, -9: {6: 'k'}, 7: {'r': 'q'}}, 'n': {9: 3}}
test(x[7][1])
test(e[2][5][7]['q']['o']['b'])
z[7][-8] = a[8]
u[-2][-2]['e'][-1]['f']['n'][-4] = c['s']['e']['t'][0][-6]['z']
length(t[-9]['c'][-6]['q']['q']['t']['v'][-9][-2][1][-9]['m'][6]['r'][-3])
test(i['a'])
length(g[0])
length(u['m'][4]['r'][7]['o'])
a[-2]['s'][-9]['d']['b'][-3][-1]['s'][0]['v'][4]['u'][-2][-4]['g']['h']['m'][2][1] = 's'
l['u'][3]['h']['q'] = 2
length(b['n']['u'])
w['c']['p'][-4] = {'q': {-8: {-6: 3}, 'y': {'j': 'n'}, 'r': {-1: -5}}, 'e': {0: {5: 1}, 9: {-7: -5}}}
length(b['a'][-2]['b']['v'][6])
d['a'][9][6]['t']['l'] = 'z'
n[-8]['r'][1] = {'y': {'g': -2}, -7: {'q': 'p'}, -9: {-2: {4: 'u'}, -9: {-9: -6}}}
length(u['e']['z'])
test(i['o']['l']['u'][-5]['d']['l'][-6])
length(s[-5][-6]['s'])
test(o['b'][8])
e['a'] = n[6]
n['q']['c'][-1][4][4]['p']['s'] = q[-1][-4]['j']['u']
g['n'][-4][2][-5] = -1
s[-5]['z'] = -1
test(b[1][-7][6][-5]['c'][0])
u['e'][-1]['f']['s']['e'] = 1
a[-2][-4][9]['o']['q'] = 'n'
d['z']['k']['t']['i'] = 2
r[1]['a'][-6][-8] = r['g']
t[-1][6][4][-9] = f[-5][-4]['j'][-1]
length(q[-1]['m'])
y[-4]['b'][8]['z'][6]['y'] = f[-5][-4][8]['m']
length(a[8]['s']['t']['a'][-2])
w[-4]['m'][-6] = 'l'
length(y[-7][3][-6])
test(e[3]['n'][-6][4][-6]['c']['u'][9]['c']['j'][9]['c']['v']['a'][3])
k[7]['o'][-3][-6]['q']['s'][6][-9] = 'k'
p[-6][-8][4]['c'][-9] = 0
u['e']['z']['q'][-9][-8] = 'n'
q['y']['l']['d'][3][-2] = n[-8]['v']
test(y[0])
b[2][-2] = -1
test(n['v']['l']['f']['i'])
test(w['p'][-6]['l'])
z['h'] = 'e'
s['b'][7][-4]['z']['i']['m'] = {'p': {'u': 2}, 'f': {'p': 'c'}, 't': {'z': 'f'}, 'h': {-4: 'a'}}
test(b['n']['u'])
j[4]['r']['v']['p']['a'][-4][2][-5]['v'] = f['o']['g']
test(v['q'])
test(k[1]['n']['w']['n'][-7])
f['o']['g'][-3] = 'q'
t['s'][2]['e'] = c['s']['e']
length(c['s'][-3]['a']['z'][-4])
length(m[-5]['v']['e']['c']['o']['l'][-3][7][-2])
y[0][-1]['y']['c'][8] = 'i'
test(o['b'][4])
length(y[-4]['q'][-5])
d['h'][3] = 's'
length(c[-9]['o']['o'])
q['y']['l'][8]['e'] = 'c'
e[3]['v'][4]['i'][-8][-9][6] = -6
c['s'][-3]['a']['z']['t']['m'] = 8
e['g'][7][-9] = 6
n['v']['l']['f']['i']['i'][-6]['s'][-3] = {'y': {8: {2: 'y'}, 5: {'d': 'i'}}, 'c': {'e': {6: {'j': 2}, 'g': {'u': 2}}, 5: {-8: {5: 'r'}, 5: {2: -1}}, -9: {'j': 'c'}}, 'u': {-6: {2: -9}, 'c': {'w': 'j'}, 6: {'y': 'r'}}}
j[4] = 'r'
m[-4]['u'][-1] = -3
test(k[7]['o']['x'][2])
c['e'][-8][1][-3] = 'n'
test(o['b'][-9])
d[2][2][-9] = l[0][6][5][-1][-4]
h['p'][1][-5]['j']['x'][9] = {'a': {6: -9}, 's': {6: {0: 9}, 'g': {4: 4}}}
q[-1][-4]['j']['b']['c'] = j[5][8]['i'][-9]
y[-7][3][1]['t'][-7][-8] = a[8]['s']['t']
length(o[4][-6][3][-9][5])
y[8] = -7
length(c['s']['e']['t']['y']['b'])
e['g']['q'] = t['s'][5]['w']
c['e'] = {1: {-9: -3}, 6: {7: 1}, 'f': {2: {-4: 'r'}, -6: {'z': 1}}, 7: {'r': 'x'}, 'm': {-4: 'w'}, 'n': {0: {-9: -7}, 'i': {-7: 1}}, -2: {'m': {'h': 'v'}, 'e': {-7: 'u'}}}
length(f[0]['d']['h']['d'][8])
z[-4][-2][-1] = 'v'
test(l[1][-4])
a[8] = z[7][-8][-5]['c']
n[-8][3][0] = 'l'
test(j['w'])
q[-1][-4]['j']['b']['c'][1][-7][4][5][4][-4][-5] = {'k': {-2: 'z'}, 'e': {6: 's'}, 's': {4: {2: 9}, 'f': {4: 'k'}}}
j[-4]['x']['b'] = {'s': {'f': 'u'}, 'v': {'x': 1}, -9: {-8: 9}}
a[8][-4] = 'v'
test(n[4][-2][1])
q[-1]['b'][1][-9][3][-3] = {'z': {'a': {'a': 'x'}, -2: {'o': 'p'}, 7: {'o': 'l'}}, 'e': {1: {'q': 'g'}, 'u': {'c': 2}}, 'v': {'r': 'y'}}
n[6]['s']['t']['k']['p']['f'] = 'v'
l[-9]['b'][0]['o'][5]['v'][8]['x']['t'] = w[-5]['o']['b'][4]
test(z[-4][6])
test(n['v']['l']['f']['i'][2][-6])
m[3][7] = {'c': {-5: {'a': 'a'}, -4: {'z': -4}}, 'e': {'y': {'f': 'w'}, 3: {'z': 0}}}
y[0][-1]['l']['r'][-2]['z']['e']['r'][8][6][1]['r'] = 'w'
length(x['m'][9][0][7])
a[8][-9] = {-5: {9: -1}, 'e': {'w': 2}}
o[8][-8]['x'][-7][-2][8]['h'] = 7
d[7]['t'][-1][0] = m[0]
j[5][8]['i'][-9][1][-7][4]['x']['c'][0] = -3
l['m'][-8][-9][-4]['b'][4] = 'j'
length(q['y'][-7][-2]['d'])
test(w['s']['u']['g']['t']['m'])
e['g'][7][-7][-3][6] = z
w[-5][7]['o'][-3][-7]['v']['q'][-1] = -5
j['p'][3][-6]['z']['i'] = x[7][2]
s[-5][-6]['s']['s'][6][7][-9] = 'h'
test(s[5]['s'][-9])
k[1]['x'][2][4] = 8
length(u['p']['h'][5])
test(t['s'][2]['h'])
q[-1]['b'] = n
x[-7][3][-7] = 'm'
q[-1][-9]['h'] = 0
d[2][4][3] = 2
i[9][-8]['c'] = r[0][-7]['f']['l'][-6]['l'][6][-4]
length(v['i'][-9])
s['m']['t'][9][3][4][4] = l[0][6]['s']
o[8]['c']['o']['l']['z']['b'] = {'q': {6: 7}, 'h': {-6: 'f'}, 'k': {'r': 'i'}, -3: {-7: 't'}, 6: {'y': -4}}
length(a[-2]['p']['l']['y']['z']['h'][0]['w'])
test(f['o'][-9])
length(o[-3][8]['u'][1][-5][-9]['e'])
p[-1]['b'] = 'a'
length(u[5])
test(o)
z['f'][-9]['y']['f'][-6]['f'] = {'r': {3: 'u'}, 'n': {5: 2}}
test(j)
test(o[-3][8]['u'][1][-5]['b'][-7][5][-5])
test(b['n'][-1])
w[-4]['m'][9] = p
s[-4]['c'][-8] = h[3]['i']
p[7][2][-7][6][-5]['c'][-8][-5] = 8
test(d['a'][9][3]['i'])
c[-8] = y[0][7]
length(l['e']['w'])
f['o']['w']['n'] = 't'
j[-4] = f[0][1]
g[5][-1][-3] = x['m'][6]['c'][-4]
test(q[-1]['b'][4][-2][2])
length(q[-1]['p'])
j['w'][-1]['a']['a'][-2]['b'][3]['z'] = {2: {'p': {8: 'b'}, 't': {'t': 'k'}}, -3: {'y': {'l': 'l'}, 3: {'x': 'f'}}, 'o': {'y': {-6: {2: 'k'}}, 'd': {2: {'c': 3}, 6: {-3: 'c'}}}, -9: {'f': 4}}
test(x[7][2]['b']['a'])
test(t['z']['x']['c'])
o['b']['p'] = 't'
p[-1][3]['d'][-4]['n']['x'] = d[7]
p[7][2][8][3]['t'] = q[-1]['m']
r[0][5]['a'][-4][2][5][9] = 'm'
length(p[-6][-8]['p'])
v['i']['j']['w']['i'] = 'l'
length(h['p']['p']['a']['i'])
test(l['u'][3]['y'])
r['v']['a'][-3][-4] = 1
n[4][-2][1][2][8]['a'] = m[3]['z'][-9]
k[7][-6] = {'q': {'o': 'u'}, 'b': {0: {0: -6}, 't': {5: 's'}}}
f['h'] = {'b': {-9: 'd'}, 'g': {'k': 5}, 'f': {4: -5}}
test(n['q']['c'][-1][4])
x[7][1][-8] = {'b': {'j': 'd'}, 'o': {'u': 4}, -9: {'g': -5}}
p[-2] = u[-2][-5]['b'][-4][-9][6]
s[-9] = 0
test(c[-8])
y[-7][3] = {'a': {'x': {'m': 'd'}, 'o': {-2: 1}}, 'e': {2: 'i'}, 'f': {8: -5}, 'r': {'x': 'a'}, 'x': {4: 'x'}, -1: {-7: 7}}
d['z']['k'] = -1
length(i['a'])
v['x']['d'] = p[-6][-8]
w['p']['o'][-6]['j'] = {-8: {-8: -6}, -9: {'w': -3}}
j[-1]['w'] = 'c'
test(n[4][-2][1][6][-6]['l'][6][-5])
test(f)
j[-4][3][2]['a'][-3] = z
length(n)
length(x['m'][9][-9])
o[0][1][0] = -3
length(r['g'])
length(p)
o[-3][8]['u'][1][-5][-9][-3]['c'] = {8: {-7: 'p'}, 'u': {2: -5}}
test(f[-5][-4]['x'][6])
t[8][5][-2][-4]['r']['w']['h'] = {'c': {'j': {'e': 'q'}, -5: {3: 'b'}}, 'd': {'j': 4}, 8: {'w': -8}, 't': {-7: {'a': 'v'}, 2: {'d': 'j'}}, 'w': {'h': {8: 6}, 'u': {-3: -5}}, 'v': {-8: {-1: -1}}}
k[-7]['g']['c'][-6]['q']['p']['h']['r']['v'][-4] = 'f'
l['m'][-8]['i']['d']['p']['s'] = 'c'
e[3]['n'][-6][4][-6]['c'] = 'f'
test(a[8][-9]['e'])
i['o']['l']['u'][-5]['d']['l'][-6]['c'] = {'f': {-3: 'c'}, 7: {'e': 3}, -9: {'o': -8}, 'n': {'h': 'b'}, 'v': {'l': 'z'}, -1: {1: 'n'}}
test(s['b']['z'][-7])
u['e']['z']['q'][6] = {2: {-9: -9}, 3: {'g': 0}, 'm': {'r': {0: 5}, -5: {0: 3}}, 'l': {8: -7}, -7: {0: {'a': 'd'}, -4: {'p': 5}}, -6: {-5: 'p'}, -1: {'v': 7}}
h[4]['w']['g']['a'][-2] = -8
a[-2][-4][-3]['r']['y']['i'] = -1
test(i[-2][5]['v'][0])
test(y[-4]['q'][-5])
r[1]['u'][9]['z'] = {-6: {'u': {'k': 'w'}, 5: {'t': 2}, 'd': {3: 'x'}}, 3: {-8: 'n'}}
test(e[2][5][1][0])
n['v']['l']['f']['i'][2][3] = {'h': {-1: -1}, 9: {8: 6}, 'z': {4: 'r'}, 'v': {'o': 3}, 1: {'h': 8}}
x[-7][3][4]['w'][-5]['p']['m']['m']['a'] = {'u': {-8: 1}, 'k': {9: -7}, 'm': {-2: {-8: 'o'}, -9: {3: 'c'}}}
s[-5]['y'][-6]['x'][8][-4][-3][5]['q'][-3] = 5
t[-5][-4]['a'] = d[2][-6]
q[-1][-4]['j']['d']['r'] = {0: {4: {'s': 'z'}, -3: {-4: {3: 5}, 5: {'f': 'u'}}}, -4: {4: 0}, 't': {'j': {'c': 'h'}, 'm': {'u': -9}}, 'w': {-2: {'z': 3}, -9: {'a': 'e'}}, -9: {'g': {'b': 0}, 'n': {'r': -6}}}
test(h[4]['w']['g']['a'][2]['u'][-6]['w'][-6]['u']['y']['l'][-3])
d['a'][9][3][4]['d'] = -3
u['p'] = {7: {-3: 'x'}, 't': {'i': 'y'}, -9: {'t': 9}, 'z': {-7: 1}, -4: {6: 's'}, -3: {3: 'e'}}
y[-7][3]['f'][8] = u['m'][4]['r'][8]['v']['r'][3]
length(o['b'][8])
f[0][1][-9] = {'a': {1: -7}, 'p': {'i': {'a': 3}, -7: {'u': 'x'}}, -9: {'x': 'l'}}
test(k['q'])
test(j['w'][7])
v[-1][-2][-4] = u['e']
l['e']['s'][6]['u']['m'] = n[4]['s']['d']['d']['h']['d']
test(c['i']['d']['n']['q']['h'])
test(t['t']['b']['f'][-6])
q['y']['l'][-5]['q'][-9] = {-5: {6: {'q': 'o'}, 7: {'e': 'i'}}, 't': {-5: {3: {5: 1}, 'u': {'x': 'y'}}, 5: {'z': {2: -9}, 5: {'p': 7}}}}
w[-5][7]['o'][-3][-7][7][0] = p[-2]
length(k[-7]['f'][-1]['x']['r']['i']['f'][9][0]['w'])
length(x[-7][3][4]['w'][-5]['p'])
length(q['y'][-7]['f'][-5])
k['b'] = {'h': {'a': {'x': 'a'}, 'e': {-3: -1}}, 'o': {'l': -5}}
length(g[8][-1]['x']['c']['j']['d']['d'][6][3]['v'][-8])
h[3][2][-5] = 'e'
j['t']['d'][-4] = 'l'
test(s['b'][7])
h[4]['b'][-3]['p']['x'][-6]['p'][-3]['i']['v'] = m[1][-7][-1]['i'][4]['d']['v']
r[7][4]['y']['g'] = 'g'
x['m'][-5] = {'l': {'y': {7: -4}, 'k': {'y': 'c'}, 't': {6: 5}, -1: {'j': 'm'}, 'v': {7: 'p'}}, -9: {'p': {8: 'l'}, 'e': {'r': 2}, -3: {0: {'e': 'm'}, -7: {'t': -4}}, 'w': {8: 2}}}
v['r']['l'][5]['e'] = 9
j[-1]['s'][0]['v'][4]['u'][-9]['y'] = -5
p[-2][3] = 6
length(l)
test(p)
y[-7]['q']['o']['e'] = 0
y[-7]['q']['o']['b'][2]['r']['g']['r'] = 5
v['q']['i'] = l
length(b['n'][0][-4]['j'][3])
e[2] = g['n'][3]
length(z['f'][-9]['y'][5][6])
v['i'][-9]['j'] = -9
k[1][-5]['r'][1][-8][-9] = {'i': {7: 4}, 3: {-6: 2}, -4: {2: 'f'}}
length(p[-6][-8][4])
d['z']['e']['l']['h']['k'] = -1
c['s'][-7][1]['h'][-6]['f'][2] = 'e'
l['m'][-8][-8][-6] = {'p': {0: 'c'}, 'e': {'g': -4}, 'o': {7: 'm'}, 6: {'i': 0}, 'v': {4: 'q'}}
length(r[0][5])
test(y[-4])
c[-8][-6][6]['i'] = 5
length(g[-4]['p'])
length(f['g']['n'])
test(z[4]['z'][-7])
test(y[-4]['b'][8]['z'][6]['y'])
w['c'][-1][-5] = 's'
r[0]['g'][-5] = 3
j[-4][-9]['a']['f'] = 'c'
v['m'] = 'l'
test(i['a'][-3][4]['u']['s']['n']['x']['o'])
i[-2]['p']['h'] = n
test(y[-7][3]['a']['o'])
f['h']['b']['i'] = g[-4]['p']
test(u[5])
length(r['v'][-7]['c']['b'])
a[-2]['d'][-4][5][3]['i']['u'] = i
length(p[-6][-8][4]['c'][2][2][1][4]['n']['p'])
test(s[5]['s'][-9])
a[-2][-4] = {1: {'a': 'r'}, 4: {'e': 'j'}}
test(n['q']['c'][-1][4][9][8])
length(j['t'][-8])
e[3]['n']['j'][5] = q[-1][-9]
z['f']['d'][0] = 'y'
test(j['w'][7]['j']['t']['i'])
test(r[7])
s[-5]['y'][-6][-1]['x']['r']['i']['f']['r']['j'][-9] = 2
test(g)
a[8][-9]['e']['w'] = s['b']['z'][-7]
m[-5]['r'] = g[0]
h[4]['w']['t']['k'] = 'e'
z[4]['z'][-7][-4] = 'k'
test(h[3][2]['n']['i'][7])
q[-1]['b']['c'] = g['n'][-4]
l['m'][-8][-8][-6]['o'][-7] = 'e'
test(a)
z[-4][0][6][3]['l']['m'] = 7
test(w[-5][7]['o'][-6]['o'][-1]['r']['m'])
test(k)
q[-1]['b']['q']['c'][-1][4]['x']['f'] = {-7: {'n': 'u'}, 2: {'c': -8}, -1: {-4: 'f'}}
j['w'][7]['j']['t'][-2]['g'] = {'q': {-6: -5}, 'z': {'b': 'r'}, 'e': {-3: 1}, 'd': {'w': 'z'}}
test(r[1])
p[-6][-8]['z'] = h['p']
k[-7][1] = 'm'
length(b['a'][-2])
test(k[-8])
h[4]['w']['t']['k'] = {'j': {9: {-4: 'n'}, 'x': {0: 'n'}, 7: {5: -7}}, 5: {'y': {-6: 3}, -9: {'g': 'o'}}}
t['s']['i']['q'][4] = 5
g['n'][3]['y'] = -9
t[-9][-4]['z'] = {-7: {7: 'f'}, -9: {'m': {4: {3: 'b'}, 'd': {'p': 'v'}}, 'l': {'s': 'j'}}}
test(r[0]['r'][5]['g']['t'])
r['g']['l'] = 0
b[2][7][1]['w'] = {'s': {'b': 2}, 2: {3: 'u'}, -5: {0: {'u': 3}, 7: {-5: -2}}, 'l': {7: 0}, 'x': {'h': -2}}
h['p']['p']['a']['i'][0] = {'e': {9: 'u'}, 6: {'n': 'y'}, 'w': {-4: 'o'}, -7: {'p': 7}, -5: {7: 'c'}, -1: {-1: -2}}
length(n['c']['l'])
w['p'][-6]['l'][2] = -6
g[-1]['a'][-9]['x']['d'][8] = s['m']['k']['q'][-1]['b']['r'][8]
n[-8]['v'] = {8: {0: 'q'}, 'a': {-8: -8}, 'h': {-8: {-9: -5}, 'b': {3: 'o'}}, 3: {-6: {-8: 6}, -3: {1: 'n'}}, 9: {3: 2}}
length(i[3][6]['t'])
w[-4][7]['o'] = n['q']['c'][-1][4][4]['p']['s']
length(f[0]['d']['h']['d'][8][9]['j'][-8])
v['r']['l']['l'][-4] = {-6: {-6: {'p': 0}, 5: {0: {'n': 'b'}, 'o': {9: 's'}}}, 'd': {'p': {'v': 5}, -4: {9: -7}}}
test(z['f']['d'][-9]['f']['y'])
length(o[-3][-7]['k'][-5][-6]['u'])
test(v['q']['i']['e']['s'][0]['v']['o']['q'][-3])
length(x[7][9][9][-1]['l'])
n[4] = 't'
length(j[5][8]['c']['d'][-6][-6]['r']['d'])
test(d[7]['t'][-1][0]['u'])
test(y[0][7])
y[-7]['q']['o']['b'][2]['i']['r']['a'][-8] = y[-7]['q']['o']['b']
test(o[-3][-7]['k'][-5][-1])
length(p[-1][3][6][-4]['r']['i']['f'][-9]['e'])
j['w'][-1]['a']['w'] = g[8][-1]['x']['c']['l']
n[6]['s']['t']['k'][-5]['c'] = y[0][9]['k']['t']['v']
b['n']['a']['g'][-2] = {-8: {-8: 7}, 'f': {'n': 't'}, 't': {'t': 'o'}, -9: {'f': 'w'}}
length(c[-8][-6])
o[0][-3]['g']['j'] = k['b']['h']['e']
j['w'][7]['j'][5]['y'] = 'w'
t['s']['a'] = 'r'
h[4]['w']['g'][-1] = {1: {-5: -7}, 3: {'q': {'v': -1}, 0: {8: -4}, 'a': {'q': 'l'}}, -3: {-6: -9}}
n['q']['c'][-1]['k'] = {'q': {'o': -2}, -9: {6: 'g'}}
n['q']['c'][-1] = 'k'
test(t[-5][-4]['a'])
t['z'] = {-6: {'g': 'c'}, 5: {-3: -9}, 'f': {'k': 4}}
s[-5][-6]['s']['s'][-8]['t']['h']['q'] = x[-7][3][4]['w']
d[-1] = -4
s[5]['s'][-9][-9] = 'g'
y[-4]['b'][8][7]['v']['i'] = g[-1]['a'][-2][2][3]
n[-8]['p'] = {0: {-7: {-6: {'n': 5}, 'd': {'x': 4}}, 5: {-7: 8}}, 'h': {3: {'n': 'p'}, -2: {4: 's'}}, 4: {-9: 'f'}, 'e': {'a': {7: 'b'}, 'n': {'w': 4}}}
i[-3] = 7
h[4]['w']['t']['k']['j']['x']['o'] = 'm'
test(s['b'][7])
x[7][2]['b'][-7][5] = {'x': {0: {'y': 7}, 'x': {'y': 'o'}}, 'f': {-6: {-1: 8}, 5: {'e': {'i': {'a': 'n'}, 'l': {'y': -2}}, 4: {'e': 4}, 'l': {'d': 'q'}, 6: {'t': 'j'}}}}
length(y)
length(c['i']['d']['n']['q']['t'])
y[-7]['q']['o']['b']['r'][5]['a']['c'][2] = 'y'
z[4]['u'][4][7][6]['d']['l'][-6][5]['t'] = i[9]
b[2][7]['p']['r']['c'] = -7
s[-5]['y'][-6][-7][0] = r[7]['l']['r']['r']['s'][-8]['t']['f']
u['p'][-3][3] = 'w'
y[-7]['q']['o']['b']['r'][5]['a']['e'] = 4
y[0]['f'][5][-8]['g'] = 's'
q['y'][-7][-2]['d'][-2] = 2
length(s[-5])
j['t']['d']['o'][7] = 's'
p[-6][-8]['z'] = 'o'
e['g']['q'][-4][-4] = a[8][-9]['e']
j[-4][-8] = b[1][3]
b['n'][0][-4]['j']['j'][-6] = 'c'
z[7] = 'w'
w[-5]['o']['b'][-2][5]['g'] = {'a': {'z': 'b'}, 5: {'q': {'x': 'o'}, 'p': {-3: 6}}, 6: {'c': {'o': 'r'}, 's': {'c': 5}}, 'n': {-5: {-5: -3}, 'f': {4: 'y'}}}
test(o[0]['j'])
length(w['s']['k']['o'])
test(s[-5][-6]['s']['s']['i'][4])
y[-7]['q']['o']['b'] = -3
g['n'][4]['i'][-4]['a']['q'] = {-7: {-8: {'a': -1}, 5: {-8: 'q'}}, 'w': {1: {'u': 's'}, -2: {0: {-6: -6}, 'r': {'f': 'k'}}}, 'n': {'b': 's'}}
length(z[-4][8][0]['z'])
length(h)
length(m[1]['x'])
q['y'][-7][-2]['d'][-2] = {-8: {'p': 'j'}, 9: {-8: 'q'}}
length(u[-2]['g'])
length(b['a'][-2]['b'][-4][-4][3][-1][6]['a'])
k['q'][-9] = x[-7][3][4]['w'][-5]['p'][-3]['d']
test(n[6]['s']['t'])
test(b['n']['u'])
t['s'][5]['b'][-3] = 'w'
x['u'] = 'i'
i['a'][-3][-2] = -5
r['g']['l'] = p[-1][3][6][-4]
t['z']['f']['r'] = -8
test(h['p'][1][-5]['j'])
j['p'][3][-6]['r'] = t[-5][-4]['a']['q']['n']
l['e']['s'][0]['v']['o']['q'][-6][-2] = 1
length(v['r'])
test(b)
test(l)
test(h['p'][1][-5]['j'][5])
g[0][-7] = 'k'
length(e['t']['m'][3][-1]['d'])
length(n['c'][2])
j[-1]['s'][0]['v'][4]['u'][-2][-5]['j'] = -2
r['v'][4]['b']['x'] = l[6][3]
g['i'][0]['h'][-5][-3] = 'f'
test(k)
s['m']['t']['k'] = -7
h[4]['b'][-3]['p'][3][-6]['r']['b'] = 'b'
test(j['p']['x'])
test(u['m'][4]['r'][8]['v']['r'][3]['f'])
j[-4][-8][9][1] = 'f'
test(p[-1]['h'][4]['f']['g']['o'])
j[-4][3] = 'e'
test(i['n'][-5])
k['q'][-9][7] = l
w['p'][-6][-4]['j'] = 'v'
f[-5][-4][8][-2]['q'] = d[2]
test(l['m'][-8]['s']['e']['t']['j'])
n['m']['f']['u'][-6]['w'][-6]['u']['y']['l']['z'][-1] = e['b']['l']
l[0][6][-9][3]['s']['e'] = -7
test(x['m'][-5]['l']['t'])
j['w'][-1][-3]['r']['i']['f']['r']['j'][-9] = 7
test(g['d'])
test(b)
e['a'][-7]['f']['o'] = {0: {'q': {-9: 'q'}, -5: {'s': -1}}, 'n': {9: 'j'}}
d['z']['e']['o'] = 'e'
length(k[7][-6]['b'])
j[-4][3] = {3: {9: 'z'}, 'e': {'c': 9}, 7: {'f': 'a'}, 8: {'d': {'t': 'x'}, -9: {'q': 9}}, 'z': {1: {'s': 2}, 5: {1: {6: -1}, 5: {'u': 't'}}}, -2: {1: -6}}
length(z['f'][-9]['y']['f'][1])
length(q['y'])
h['p'][1][-5]['j']['k'][-8] = {6: {'m': 'u'}, 7: {'p': 'x'}, 'j': {'g': {-2: 0}, -1: {-1: -8}}, 'o': {'w': 'c'}, 'q': {'e': {'h': 'y'}, 'l': {9: 'c'}}, -9: {'w': 's'}}
length(y[-7])
z[4][7][-4] = 'n'
q[-1]['m'][-9] = {'t': {-6: {'t': -6}, 't': {'y': -7}}, -3: {'u': {-8: 'a'}, 'l': {'a': -5}}}
a[8][-9][-5][9] = 'q'
c[-9][-9]['e'][-1] = -1
n['q']['c']['b'] = 2
length(g['d'])
length(x['m'][9][0][-2])
y[-7][3]['f'][8][5][-8][9][-4][0][6][3][-2]['z'] = {'x': {8: -7}, -4: {8: {2: 'h'}, 'n': {'j': 'x'}}}
test(a[8][-9]['e']['w'])
length(r[7]['y']['c'][-2])
t['t']['b']['f']['y'][-9] = -8
c['i']['d']['p']['x'][-4]['y'] = 'g'
k[-8]['f'][-1][7] = {'b': {'r': -3}, 6: {-8: {'l': -4}, -3: {-2: -5}, 'g': {'u': 7}}, 8: {'o': 8}, 'n': {'s': 6}, -9: {'s': 'e'}, -8: {-9: -8}}
test(x)
length(w[-5])
g[-6]['b']['r']['o']['b'][-2][5] = 5
length(b['a'][-2])
length(f['o']['g'])
x['m'][-5][-9] = 'n'
o['f'] = m[3]
length(r['g'])
l[-9]['b'][1] = 'v'
length(a[-2][-4][4])
z[4]['z'][-7]['e'] = s['b']['u']['s']['n']['x'][6]
s[-4][-3][-2] = {1: {'k': {'f': 'u'}, 6: {'g': -1}}, 'r': {'t': {'u': 5}, 'g': {2: 'v'}}}
m[1]['x']['m'] = {8: {1: 'q'}, -7: {9: 'o'}}
n['m']['f']['u'][-6]['w'][-6]['u']['y']['l'][-3][-6] = 7
g[8]['e'][-3]['u'] = {-6: {-5: {'s': -8}, -4: {-2: 'f'}, 'o': {'e': 'x'}, -1: {-2: -6}, -9: {6: {3: -1}, 'n': {-4: 'q'}}}, 7: {'u': {0: {'b': 'a'}, -9: {'h': 'u'}}, 'n': {'o': -7}}}
test(x[-7][3][4]['w'][-5]['p'][-3]['i']['v'])
length(w['s']['u'][-9])
e['a']['s'] = 1
k['b']['o']['a'] = -5
test(a[-2]['s'][-9]['d']['b'][-3]['w'][7]['j'][-8]['c'])
y[-7]['y'] = 'w'
u[5][9] = o['f'][7]['e']['y']
e[2][-1] = c[-9][-2][1][-9]['m'][6]['r']
y[-7][3][-1][-7] = 'v'
w['c'][-1]['m'] = 'g'
h[4]['b'][-3] = {'d': {'h': {'e': {'x': 't'}, 7: {'v': 7}}, -3: {'c': 8}, 'v': {'h': {'q': -4}, 'c': {6: -7}}}, -9: {'s': {'h': {'x': 'i'}, 'x': {'e': -1}}, 'r': {0: {'n': 's'}, 3: {'a': 'o'}}}}
length(t['t']['b']['f'][-6][4][-3]['y'])
test(p[-1][3]['d']['c'][6]['s'][-8])
c[-8][-6]['v']['j'] = 'a'
length(f['h']['f'])
g['n'][-6]['i'] = 9
test(y[-4]['b'][8]['z'][8])
f['h']['f'][-7] = 2
length(g)
v['i']['j'][9][-7] = {'c': {2: 'w'}, 3: {'u': -5}, 6: {'r': 'o'}}
length(g[-6]['b']['r'][7]['o'][-3]['b']['a'][0][-7]['z'])
o[0][-3]['g']['j'][-3] = -4
e['b'] = 'b'
length(c)
length(k[2]['h'])
test(h[4]['w']['t']['k']['j'][9])
z[4]['u'][1][-1] = {8: {'x': {8: 8}, -6: {'n': 'o'}, -3: {9: 'l'}}, -9: {'s': 4}}
r[1] = j['w'][-1]['a']['a'][-2]['b'][0]['u'][-1][6]
length(g[-1]['a'][3][-8][4][-4])
length(v['q']['i']['s']['f'])
d[2][-2][9] = 't'
p[7]['i'][4]['i'][-8] = {-4: {6: -1}, 'v': {1: {8: 'v'}, -1: {-2: -8}}}
s['b']['z'][-7][-5] = 2
o[0]['j'][7] = 'l'
length(o)
length(l)
p[-2][-5] = {8: {-5: 'k'}, -6: {-6: 'u'}, -4: {'t': {'t': 9}, -1: {'m': -4}}}
length(i[3][6]['t']['q'])
i[9][7]['c'] = -1
e['t']['m'][2]['r'] = {4: {'c': 7}, 5: {3: 6}, 9: {'h': 'm'}, 'k': {-5: 'q'}, 'j': {'q': 'u'}, 'w': {6: 0}, 'y': {3: 'o'}, -2: {'c': 'x'}}
length(r[1][4][-2])
length(o[8][-8])
test(m['v'][6][-5][9][-8][-5]['f'])
v[-1][-9][9]['f'] = n[-8][3]
r[1][4][-9][9]['f'][0] = b
n['m']['f']['u'][-6]['w'][-6]['u']['y'][4] = k[1][1]
a[8][-9][-5]['o'] = -7
t[-6][3][-8][4] = 3
z[-4][-2][-1] = {'f': {1: 'h'}, 'j': {6: -9}, 'o': {'o': 'j'}, 'p': {5: 6}, 'w': {7: 'w'}, -6: {'j': 'v'}, -2: {'p': 't'}}
length(w['s'][-3])
g[8][-1]['x']['c'][2][-5] = {-8: {'k': 'f'}, 'y': {0: {'t': -4}, 1: {'r': 'a'}, 'v': {4: 't'}}, 3: {'h': -2}, -1: {'m': 'z'}, 'v': {4: 7}}
length(x[-7][3][4]['w'][-5]['p']['m']['p'])
n['v']['l']['f']['i']['i']['b'][-7] = 'j'
b[2][7][1]['w']['x'] = 'm'
o[-3][-7]['k'][-5][-1]['z'] = h['p']['p']['a']['d']['e']
test(d['z'][-7][5][-8])
w[-4][-6]['l'] = 6
length(w)
i[9][-8][-9]['o']['h'] = q['y']['l']['b']['o']
length(d['z']['e']['l'][-9])
m['v'][6][6]['w']['z'] = 'n'
length(o[0][-3][-4]['k'])
test(x[-7][3][4]['w'][-5]['p']['m']['u']['e'])
r['g']['l']['r']['i']['f'][-7]['t'][-2]['u'][3] = 'z'
length(f)
length(o[4][-6][3])
s['m'][8]['u'] = {2: {9: -9}, 'b': {0: 'a'}, 5: {1: -8}, 'm': {'w': -6}, 'o': {'s': 'm'}, 'r': {'f': 4}}
test(r['v'][4]['e'][0])
s['m']['t'][9]['h'] = 0
s[-5]['y'][9] = -1
r[0][2] = 'h'
b['a'][-2]['b'][8] = 0
q['y'][-7]['f'][-5][-4][5] = v['i'][9][7][-9]['x'][-8]
test(k[1]['x'][2])
g[-1]['a'][3][2][-3] = 9
u[5][9]['f'][0][1][6][-6]['c'] = -1
x[7][1][-8][-9][-4][2] = {-7: {6: 1}, 'b': {'t': 2}, 5: {'p': {1: -3}, 'l': {9: 8}}}
test(g[0])
d['z'][-7][5]['u']['t']['d']['l']['j'][0][5] = k
w['s']['k'][9]['p'] = 7
f['g']['v'][-3]['i'] = {'x': {4: 8}, 'd': {'v': 2}, 'p': {9: 6}, 'n': {4: {'c': 'c'}, 'e': {'l': -9}}}
test(e[3])
length(n['m']['f']['u'][-6]['w'][-6]['u']['y']['l'][-3])
d[2]['y']['l'] = 'u'
z['f']['d'][-9][5] = 'v'
test(m[-4]['u']['f'][-9])
h[3]['g'][-4][-3][5][4]['n']['l']['r'] = u['e']['z'][8][-1]
r['v'][3] = 'z'
test(i[-8])
test(y)
test(x[7][2]['b']['l'])
a[8][-9][-5]['w'] = 'e'
t['z']['f'] = {'a': {'g': 'g'}, -6: {0: 0}, 2: {'t': {'i': -2}, 'v': {9: 'd'}}, -2: {'o': 'k'}}
test(e['a'])
e[2] = -5
m[0]['u']['t'] = {9: {-9: -2}, -6: {'m': {'i': {'v': 'f'}, 'k': {1: 'z'}}, 'w': {8: 'e'}}, 'u': {-8: 'z'}, 7: {-8: {-2: 'f'}, 1: {'z': -3}}}
length(g[8][-1]['x']['q']['c'])
y[-4]['b'][8]['z'][8]['z'] = 'z'
n['m']['m'] = 'm'
test(n)
test(u['e']['z']['q'][-9])
q['y']['h'] = 9
b['a'][-2]['b'][1]['e'][-1] = p[-6][-8]['b']['i']
s[-4]['t'][4][-3][4]['g'] = -2
s['m'][8][9]['o']['s'] = x['m'][-5]['l']['t']
c['i']['n'][-8][3][0][3][-5] = 'm'
test(x['m'][-5]['l'][-1])
c['i']['d']['x']['j'][5][-3] = {2: {'r': 'o'}, 3: {'m': 'r'}, 5: {'e': 'e'}, 'q': {-8: -7}, 'u': {1: {5: 9}, 7: {-8: 'f'}}, -9: {-2: -7}, -7: {'g': 0}, 'd': {0: {-8: 'o'}, -2: {-3: 'o'}}}
length(j['w'][7]['j']['t'][-2]['g']['e'])
f[-5][-4]['x'][3]['z'] = u['g']
s['b']['z'] = 8
f['g']['e']['w'] = o[4]['b'][-5][-2]['l']['r']
length(d[3])
j[5]['n'] = -8
b['n'][-1]['n']['w'] = 7
z['f']['d'][-9]['f'][1][0] = -6
q[-1][-4]['j']['y'][-8]['r'][4] = {'j': {'e': 'z'}, 't': {5: 'n'}}
test(c[-9][-2][1]['p'])
c['s'][-3]['a']['z']['t'][7] = {'n': {-6: {'m': 3}, 't': {'o': -1}, 6: {4: 8}}, 4: {'r': {'y': 'l'}, 'l': {8: -8}}, 5: {0: 't'}, 7: {1: {-2: 'q'}, 'r': {3: 'q'}}}
length(r['v']['a'][-3])
b[1][-6][3][-1] = {2: {7: -7}, -4: {'a': {'c': 2}, -3: {'f': 'x'}}}
m[-4] = 3
length(i[-2]['p']['h']['c']['l'])
k[1][1]['k'] = {0: {'x': 5}, 'x': {'w': {'f': 'a'}, 'v': {8: 'k'}}, -4: {2: {5: -9}, -9: {-6: 'w'}}, 'g': {5: 'j'}}
r['v']['a'][-3][4] = {-6: {1: -1}, 3: {'t': 't'}}
test(h[3]['i'][-2])
q[-1]['m'][-9][-3]['l']['a'] = a[-2]['a'][7]['x'][-1]
i[-2][5] = l['f']['j']
length(q['y']['l']['b']['o'])
k[-8]['f']['i']['e'][6] = 5
n[6][-3] = a[8][-9][-5]
c[-8][-6]['p']['i'] = f[0][1]
b[1][6][-6]['l'][6][-5]['f'] = -1
q['y']['l']['b']['z'][5] = 'm'
m[3]['z'][-9][-9] = 's'
length(v['i'][-9][-6])
p[-1]['y'][8][-6][-1][9]['s']['k'] = 'd'
n['c'][2][-5]['v']['b'] = n['c']['l']
x['m'][-5]['l']['y'][-5] = v['i'][-9]['o'][-4]
test(r[7][4][0]['t'])
test(v)
f['g']['n'][-2] = 6
length(b['a'][-2])
test(e['a'][-5]['q'][-8][-8]['o'])
test(v)
q[-1]['p'] = -3
k['b']['o']['z'] = p[-1][3]['d'][-4]['n']['x']['t'][-1]
test(g[0])
e['t']['f']['p']['s'][5] = x[-7][3][4]['w'][-5]['p']['m']['k']
t['z'][-6] = 'e'
q[-1]['h']['a']['f'][-9]['y'][-4]['p']['a'] = x['m'][6]['c']['u'][-1][0][2]['q']
test(t['t']['u'])
b['n'][-1]['n']['z'] = c['i']['d']['n']['q']['h']
z['f']['d'][0] = w['p']['o'][-6]['j'][-8]
l[6][2]['b'][5][3][-5] = -7
length(l[1][-4])
j['t'][-4]['s']['e']['k'][-2][3]['a'][-2]['b'][3]['z'][2]['t']['t'] = {1: {'j': 'c'}, 'j': {'h': -8}, 'o': {'v': 'm'}}
test(i[-2][5][-3])
r[7]['l']['r']['r']['s'][7][-4][-1][-3]['r']['o'] = 'd'
m[1]['f'] = -3
t[8][5][-4] = o[4][-6][3][0]
y[0]['f'][5]['a']['v'] = {'q': {6: 'q'}, 9: {'w': 'b'}, -1: {'p': 'b'}}
e['g']['q'][-4]['w'] = t['a']['h']
length(u['e'])
f['g']['v'][3]['e'] = {'q': {'p': {'p': -6}, -2: {'s': 'c'}}, 5: {4: 8}, 'g': {-8: {'x': {6: 'g'}, 'c': {-9: 's'}}, -7: {'v': 0}}}
t['z']['f'][2]['t'][-6] = {-7: {-8: 'd'}, 'm': {7: -4}, 'f': {'w': 2}}
g['n'][-4] = {'a': {'x': {1: 'b'}}, 0: {'p': {'g': -1}, 'u': {'n': 'b'}, 'g': {-4: -8}}}
length(r['g']['l']['r'])
l[-6][-5]['b'][-7][5]['b']['y'][-5] = 'l'
u[5] = {'r': {9: -8}, 'm': {0: 'y'}}
test(w['c'][-1])
j['t']['d']['o']['d']['w']['m'][6]['d'] = {'a': {'a': 'm'}, 1: {'b': {'t': -8}, 'u': {'g': 'b'}}, 5: {-8: {'p': {-4: 'm'}, 'o': {'s': 's'}}, 7: {'r': 5}}, 'k': {'b': 'v'}, 'o': {'z': -1}, 'u': {'s': 'm'}, 't': {-4: 0}}
j[-4][0]['u'][3][7][4][3]['a'] = p[7][2][8]['b'][1]['y']
length(p[-2][-5][8])
length(d['a'][9])
f['g']['n'][-2] = {4: {'u': 2}, 'n': {'y': 'l'}}
length(k[-7]['g']['c'][-6]['q']['q']['a'][7][-3])
m[3][0]['r'][-9] = a[-2]['d'][-4][-4][3][4]
b[-1] = l[-9]['b'][0][6][4][-9][9]['f'][0]
s[-5][-6]['s']['s'][6][-9] = -9
y[-4]['b'][8][7]['w'][8] = 'g'
d[3][1] = {'t': {8: {-2: 7}, 'w': {'h': {-3: {-8: 'p'}, 'n': {1: 'o'}}, 's': {-3: 'y'}}, 'v': {'a': 'q'}}, 6: {-8: {'n': 0}, 'p': {-5: 'v'}, 'b': {-7: 'w'}, 6: {9: 'u'}, 'v': {'g': 9}}}
c[-8][-6]['v'][-3] = 'b'
test(r[1][4][-9][9]['f'][0][2][-1]['u']['b'])
length(b['n']['a'])
a[8][-9][-5]['t'] = {8: {-9: 7}, 'p': {0: 'e'}, 'c': {-7: 'r'}, 'k': {'g': 'l'}, 7: {3: {7: 'h'}, -3: {'n': 3}}}
d['h']['h'] = -3
test(e)
test(h['p'][1][-5]['j'][5])
g[8][-1]['x'][6][-6] = p[-6][-8][4]['c'][-3]
y[0][9]['k']['y'] = c['s']
m[-5]['v'][-9]['o']['o'][1] = 3
t[-2] = c['s']['e']['t']['j']
x[-7][3][4]['w'][-5]['p'][-3]['i']['v']['f'] = q['y']['l'][-5]['q'][-9][-5][6]
y[-4]['q'][-5]['s'] = x[7][2]['b']['l']
b[2][7]['p'][-8]['v']['p'] = 'i'
r['v'][4]['b']['x']['e'] = {-8: {0: {4: -3}, 1: {'h': {7: 'q'}, 7: {8: -5}}, -6: {'p': -8}, -8: {'b': 8}}, 'b': {'i': {2: {'z': 9}, 'k': {'s': 'w'}}, -5: {'i': {'b': 'u'}, 7: {'w': 0}, 'f': {-9: 3}}}}
length(e['a'][-3]['t']['c'])
a[-2]['s'][-9][7]['f']['u'][-6]['w'][-6]['u']['y']['l']['z'][-1][2]['a'][-9]['t'][-6]['q'] = {-8: {0: -4}, 9: {-4: 'b'}, 'w': {'z': 'y'}, -2: {'a': 't'}, 7: {0: 'l'}}
j['f'] = w['c']
k[2]['p']['q'] = v
test(w[-4][7]['o'])
o[8][-8]['s'] = k[-7]['g'][-3]
a[-2][8][6][5][-5][-5][-9]['d'][6]['q'] = 8
test(j[-4][-9])
q[-1][-3][-2] = i
q[-1][-9] = 4
a[8][-9][-5]['t'][7][-3][-2] = {3: {4: 'r'}, 'n': {4: {'e': -1}, -2: {'j': 'm'}}, 'p': {'z': 7}, 'w': {0: {-2: 'o'}, 'f': {-5: 8}}, -7: {'e': 'i'}, 'z': {1: 'e'}}
l[1][-4][3] = {2: {-7: {'p': 'c'}, 'j': {-6: {'k': 'h'}, 'm': {-4: -1}}}, -3: {-8: {3: 'e'}, 'a': {'m': 0}, -6: {'p': 'g'}, 3: {-8: 'n'}}}
r[1][4][-2][-5][4][-2]['d']['g'][-6] = {'a': {'j': 6}, 'k': {'t': 'r'}, 4: {'j': 'a'}, 'f': {-7: -7}}
i['n']['c'][-1][2] = 'b'
length(f['h'])
t['a']['h'][-8]['r'][1]['y']['g'] = z['f']['d']
j['f']['g']['q']['n'] = 't'
length(d[2][-2])
length(t['z'][5])
test(q[-1][-4]['j'])
length(l['s']['a'][-5])
x[7][1][-8][-9][3][-6] = -7
h[4]['b'][-3]['d']['v']['c'][0] = {'i': {'y': {6: 'a'}, -3: {8: 'q'}}, 9: {'h': {'z': 'b'}, 'c': {0: 8}, -1: {8: 5}}, 'e': {9: 6}}
length(j[5][8][8])
length(n['c'][2])
a[-2][-9] = -7
l[1]['c']['r'] = -5
length(w[-4]['x'])
test(r['g']['l'])
q['y']['l']['z'] = 'c'
y[0][7][-6][6][1] = 'm'
test(h[4]['w']['t']['k'][5][-9])
i[-8][6][4]['x'] = {-7: {2: 'a'}, 'b': {'e': 6}, 'v': {'n': 'o'}}
test(j[-4][-8][9])
c['s'][-4]['h'][2]['e'][1]['q'] = 'i'
g['d'][2] = -2
b[-1][-1][2][-1][-6][1] = -8
test(w)
k[-8]['q'] = m[-5]['v']['i']['n'][-8][3][0][3]
length(p[7][2])
n[6][-5]['f'][-5] = -9
s[5]['s'][-9]['l'] = t[8][5]
a[3] = 3
length(l[-6][-5]['b'][-7][5]['r'])
test(p[-6][-8][4]['c'][-3]['d'])
u[8]['y'] = 'w'
length(i[3][6]['t']['f'])
test(v['i']['s'][-6])
b[-1]['w']['y'] = g[3]['l'][-8]
l[-9]['b'][0][4] = o[-3][-7]['k'][9][6]['t']['s']
test(t['s'][5])
a[8][-9][-5]['t'][0] = 'c'
g['n'][3][-1][-3]['h'] = e[1]['t'][8]
l['m'][-8][-7] = 'p'
i[-2][5][-3]['h'] = l[-9]['b'][0]
length(o['f'][0]['r'][-9]['w'][-5]['p']['m'])
length(z[-4][8][0]['b'][-9])
test(s)
length(k[-7]['f']['s'][-7])
e['t'] = {'q': {-1: 'q'}, 8: {7: -2}, 'z': {'k': 'e'}, -3: {-9: 'f'}}
length(x['m'][6]['c'][-3][-4][6][-5])
length(r[0][1][6])
r[1] = q[-1][-3][7][9][9]
x['m'][6]['c'][-4]['w'] = 'f'
r[0][-7][3] = d
p[-1]['h'][-9]['i'][8]['j']['e'] = m[3]['z'][-3]['y']
z[4]['u']['s']['n']['x']['o']['s'] = 6
v['x']['w'][3] = 'k'
c[-9]['o']['o']['o']['w'][-5][-2] = 'l'
c['i']['n'][-5]['p'][-8][-7][-1] = {-6: {'p': 'o'}, 'b': {'p': {'p': 8}, -5: {'r': -6}}, 5: {'a': {'o': 5}, 'k': {'l': 'a'}, 't': {3: 'r'}}, 't': {5: 'f'}}
s[5][-6]['d'][-5][-5] = 'r'
test(y[-4]['b'][8]['z'][8])
c[-9]['o']['o'][0]['d']['h']['d']['g'] = 5
test(o[0][-3][-4]['k'])
length(r[7][4][0]['t'])
p[1] = u[5]['r']
d['h'][7] = 'f'
length(f['g']['v'][3]['e']['q'][-2])
length(z['f']['d'][-9]['f'][-6])
test(p[-2][-5][8])
p[7][2][-7][6][-5][-2]['l']['r'][-9]['w'][-5]['p'][-3]['p']['z'] = {'p': {'r': 7}, 's': {'i': {'r': 'c'}, -5: {-6: 't'}}, -3: {-6: -9}, 7: {-1: 2}}
length(v[6]['z']['y'])
x[-7][3][4]['w'][-5]['p'][-3]['p']['z'][7][-1] = 4
z['f'][-9]['y'][-4] = g
s['b']['u'][4][7][6]['d']['l'][-6][5]['t'][7]['c'] = 'l'
x[-4] = b['a'][-2]['b'][-5]['v'][-9][-2][1]['p']
o['f'][0]['r'][-9]['w']['h'] = 9
b['n']['b']['x'] = {2: {'w': 'm'}, 'z': {-2: -9}, 'd': {'e': {-3: 4}, 'l': {-1: 'b'}}, 'w': {0: 'v'}}
m[3]['z']['o']['d'][6] = {1: {0: {'h': 2}, -5: {-5: 3}}, 9: {3: 'u'}, -9: {'i': 9}, 'n': {'r': 0}, 'v': {6: 'i'}, 'y': {2: {'a': -9}, 'v': {2: -2}}, -3: {9: 'v'}, -1: {'n': 's'}}
j[5][8]['i'][-9][1][-7][4]['b'] = g[5][7]['p'][4]['c'][-3]['d']
length(y)
length(d['z']['e']['l']['h'])
c['i']['n'][8]['z'][-4]['f'] = {'p': {2: {6: 'i'}, 'b': {'n': 'e'}}, -6: {3: 'e'}, 3: {-4: {8: -4}, 7: {'x': 'a'}}, 'f': {-7: -9}}
z['f']['d'] = 'j'
length(i[-8]['j']['o'])
test(q)
test(v['i']['j']['f'])
k[-8]['q']['z'] = 'b'
length(z[4]['u'][4][7][6]['d']['l'][-6]['l'][6][-5])
e['t'][8][5] = {'u': {0: {-2: 'f'}, -5: {'e': 'k'}, 'w': {'p': -2}}, 'g': {9: 'h'}}
s['m'][8]['u']['b'][0] = -8
x[-7] = d[9]
length(r['v'][4]['e']['s'][0][3][-4])
f[-5][-4]['f'][-8][-8] = 't'
length(b['n'][0][-4]['x'][-2]['n'])
length(z['f'][-9]['y'][-4]['s'][0])
d[1]['g'][4][-6]['m'][-5] = {'i': {8: 2}, -7: {'g': 'w'}, -6: {'y': {'p': 'v'}, -8: {'x': -8}}, 'm': {'x': 'm'}}
u[-5]['b'][-4][-9][-7]['z'][2]['e']['q'] = f[-5][-4]['x'][6]
h['p']['p']['a'][0][9]['q']['i']['n'][-8][3][0][3]['z'] = 3
e['g']['q'][-4]['l']['p'] = o['f']
t[-5][-4]['a']['q'][-7][5][-4] = 5
e['t'][-5] = {-6: {'b': {'f': 'r'}, -1: {0: {6: 0}, 't': {-7: 9}}}, 'r': {-5: {-5: 'h'}, 7: {'f': 6}}}
f[-5][-4]['x'] = y[-7]['q']['o']
e['t']['q'][-1] = y[0][7]
p[-6][-8]['p']['i'] = {-4: {'x': {'c': {-3: 'n'}, -9: {8: {-3: 'q'}, 9: {4: -5}, -9: {'s': 'q'}}}, -3: {9: 'd'}, -1: {'l': -7}}, 'm': {'a': {9: {'m': -4}, 7: {-3: 6}}, 'j': {-5: 'g'}, 'n': {9: 'n'}}}
length(k)
test(k[1]['b'])
d['a'][9][3][4][4][-6] = 5
length(h[4]['b'][-3]['d'][-3])
b[1][3][0] = s[5][-6]['d'][-5][-9]['e']
test(y[0][-1]['y'][2]['c']['j'])
length(d[1]['g'][-6]['d']['x'])
i[9][-6]['q']['y']['z'] = 4
length(r['g']['l']['r'])
w[-5][7]['o'][-6]['o'][-1]['r']['m']['f']['s'] = {0: {4: 3}, -3: {9: {'p': -9}, -6: {-2: 'x'}}, -9: {-8: 4}}
test(e[1]['t']['w']['h']['n'])
f['h']['b']['i']['r'] = 'g'
s[-4]['a']['n'] = {-6: {'b': {'s': 1}, 'j': {7: 'r'}}, 's': {-9: 's'}}
x[-4]['w'] = 'b'
e['g']['q'][-4]['l']['p']['z'][-3]['y']['e'] = {'y': {-9: 'p'}, 'k': {-2: {0: 'h'}, 'n': {'p': 'd'}}, 4: {'s': -3}, -1: {-5: {'z': {'g': 'd'}, -2: {'f': 'c'}}, 'v': {'c': {'p': 'y'}, 'e': {'t': 3}}}}
length(y[-7]['q']['o'])
test(d[7]['t'][-7])
test(c[-9][-9][9][6][-2][8])
z[-4][-2][-1][-6]['f'] = 'x'
c[-9]['o']['w'] = u[-2]['g']
s['b']['w'] = {0: {1: 'j'}, 3: {'h': 'e'}, 'r': {-1: 0}, 'j': {'a': 'b'}}
w[-5][7]['o'][-6][3][-9][2] = {2: {'d': 'm'}, -5: {6: 'c'}, 6: {-9: 9}}
f['g']['n'][-2][4]['u'] = 'z'
h['p'][1]['z']['t']['l']['j'][-6] = {'x': {'s': 5}, 'n': {'f': {'o': 'g'}, -9: {-5: 'f'}}}
test(r['g']['l']['r'])
b[2][-1][1]['e'][-1][2]['a'][-9]['t']['t']['y'] = h[3]['i']
s[-5]['y'][-6][-1]['x']['r']['k'] = 'y'
test(t[-9][6]['r'])
a[-2]['s'][-9][3] = {2: {-8: {'o': 1}, -7: {'b': 'z'}, 2: {5: 'x'}, 's': {4: 5}, 8: {'r': -6}}, -2: {'i': {8: 'c'}, 2: {'v': -4}, 4: {-7: 0}}}
j['p'][3] = -1
t[-9]['c'][-6]['q']['p']['h']['r']['v']['f'] = {8: {'j': 'f'}, 'h': {-2: 'b'}, 'b': {1: 'a'}, 3: {-3: 4}, 7: {-1: -7}}
c['s'][-3]['a'][0][9] = 'd'
length(y[-4]['b'][8]['z'][6]['y'])
length(i[3][6]['t']['f'])
length(u[8])
b[1][3][0][-4] = -5
length(k['b']['h']['a'])
length(m[0][-7]['o']['e']['r']['v'])
test(m[1]['e'][-1])
test(g['d'])
q[-1][-4][-1] = w['c']['g']['q']
o['f']['z'][-9]['f'] = -4
r[1]['z'] = 6
w[-4]['m'][9][1][9] = {'p': {'h': {'t': 't'}, -9: {-3: 6}}, 's': {0: {'p': 'o'}, 'i': {7: 'u'}, 'b': {5: -9}}}
m[1]['o'][6] = -7
test(x['m'][6]['c'])
g['t'] = 'i'
test(y[0])
c['s'][-7][1] = -4
s[5]['s'][-9] = 8
w[4] = n['q']['c']
e['a'][-6]['d'][9] = 'n'
test(r[0]['r'][5]['g']['l'])
k['x'] = 'w'
u[-2]['g']['t'] = {8: {'u': 'u'}, 'a': {'z': 8}, 'd': {3: {'b': 'h'}, 6: {'u': 5}}}
p[7][2][-6][3][-1][2][7] = v['x']['d']['p']['i']['m']['n']
length(r[1])
p[1][9]['p'][-9][-3] = 'b'
r[0]['g'] = 'o'
test(w['s']['b']['s'][9]['b']['u'][4][7][6]['d']['l'][-6]['l'])
x[-7][6][-3]['p'] = 'k'
k['b']['o']['z'][0][-7][-9] = {'p': {'z': 'u'}, 6: {2: -4}}
v['b'][1] = {'q': {'b': {2: 'g'}, 'f': {'g': 8}}, 'd': {0: {'s': 't'}, 2: {-1: 'u'}, -4: {8: -2}}, 'w': {3: {'z': {9: 5}, 'u': {-9: -3}}, 'm': {4: -4}}}
h['p'][1] = 3
q['y'][-7][9] = j['t'][-4]['l'][4][8]
length(e['g']['q'][-4]['l'])
r['v']['a'][-3][4][3]['a']['d'] = 'j'
n['m']['f']['u'][-6] = 'g'
d['z'][-7][5][-8]['e']['j'] = {0: {'v': 5}, 'd': {-9: 's'}, 6: {-3: -1}, 'h': {8: 'k'}, 'o': {-2: 'z'}, 'n': {2: 4}}
a[-2]['m'] = -2
h[3][2]['q'][2] = -7
test(n['v']['l']['f']['i'][2][8]['b'][1])
i[-8][6]['k']['x'] = 'k'
length(b)
o[4]['r'][-3][5] = m[3][0]['r'][-9]['w'][-5]['p'][-3]['d'][7]['a']
w[-5]['o']['b'][-9][9] = -4
length(k[-7]['f']['s'][-7])
y[-4]['b'][8][7][-2] = {'q': {'c': 'g'}}
h['p']['p']['a'] = 'p'
length(v['i'][9][7]['u']['h']['u'])
test(f['h']['b']['i'])
e['g']['q'][-4]['w'][6][-5][5]['k'] = {'b': {'z': -9}, 'u': {'j': 7}}
test(f['h']['f'])
test(l)
a[8][-9] = g[-4][-2]
t[8][5][-2][-4]['x']['t'] = {9: {'y': {'s': 2}, 'q': {'h': 5}}, -9: {'y': {'p': 'e'}, 6: {-9: -2}}}
test(d['a'][9][3])
length(v['q']['i']['a'])
length(k[-8]['q'])
u['p']['t'][0] = {'r': {-5: {-8: 7}, 'b': {'h': 'z'}, -1: {-8: -8}}, 'j': {'o': {'o': {'z': 'y'}, 'g': {'m': -6}}, 'n': {'f': 't'}}}
a[8][-9][4] = o[0][-3]
test(n['v']['l']['f']['i'])
e['t']['z'][0] = r['v']['a'][-3][4][-6]
s['b']['w'][3][2] = {'a': {1: {'d': 'd'}, 'd': {'b': 'b'}}, -7: {'z': {'f': -9}, 'b': {'g': -2}}, 4: {'l': {'f': 7}, -2: {-7: 1}}, -9: {'w': -3}}
w[-5][8][0][-2][-8]['z'] = {'q': {'e': 8}, 'c': {'h': {0: 'h'}, 'z': {-9: 'p'}, 4: {7: 'n'}}}
length(r[7])
g[8][-1]['x'][-8]['p'][-8] = -1
x['m'][-5]['l']['r'] = {'f': {'k': 'j'}, 'j': {1: 4}, 'q': {-8: {'t': 'n'}, 'i': {-6: -9}}, 'p': {-3: 'm'}, 'r': {'n': 'm'}, -8: {'s': {'b': 7}, -6: {0: 6}, 'v': {'u': 0}}}
u[-2][-2][5]['r'] = {'a': {'v': 'a'}, 's': {'w': {'a': -2}, 'n': {9: 'r'}}, 'r': {-4: {-4: 0}, 'w': {-7: 'y'}}, 'd': {'j': 'a'}, -9: {0: -1}}
h[4]['w']['g']['a']['k'] = {'j': {'s': {'m': -9}, -9: {'l': 'g'}}, 6: {5: {'k': {5: 'f'}, 's': {6: -7}}, 7: {9: -7}}}
h[3]['g'][1][-7]['y']['h'] = {-3: {-4: {'l': 't'}, -2: {-4: 4}}, 2: {5: -6}, 'v': {'t': 'o'}, 5: {0: {'p': -3}, -3: {'i': {-1: 'o'}, 7: {'o': 7}}}, -9: {-5: -6}}
r['g']['l']['r'][5] = {-1: {-1: 9}}
j['p']['x'][-6]['p'][-3]['i']['v']['f']['y'] = 'q'
length(w[4])
t['a']['h'][6][-6]['d']['x'] = 4
y[-4]['e'] = 'g'
v[-3] = z['f'][-9]['y'][-4]['i']['h'][7][4][0]
j[-4]['u'] = n[-8]['r'][1]['y']
y[0][7][-6] = 'a'
test(l[0][6][-2]['k'][2])
length(l['f']['g']['u']['b']['i'])
test(c['s'][-3]['a']['z']['t'][7][4]['l'])
j['p']['x'][1]['r']['g'][3] = 3
test(d['a'][9][6]['n'][9]['j'][-5][-4][-2])
o['b'][-9][4] = 'e'
p[-2][-5][8][-5] = -7
p[-1]['h'][2] = 'm'
t[8][5][-4][-8] = {-2: {'t': -4}, 7: {'b': 'e'}}
s['b']['w']['r'][-9] = 'w'
u['e'][-1]['f']['i'][8] = 'a'
t[-2]['a'] = {'a': {3: 1}, 1: {'m': 'f'}, 'j': {'f': 'a'}, 'l': {-9: 9}, 'o': {'b': -8}, 'p': {'s': 2}, -8: {6: 'h'}, -6: {1: -9}, 'z': {'d': 6}, -4: {'d': -8}}
p[7]['i']['b'][-7] = 'b'
y[-7]['b'] = {8: {'c': 'z'}, 'y': {-6: 'x'}, 'd': {5: 8}, 'w': {'g': 'e'}, 'x': {'m': 'n'}}
z['f'][-9]['y']['o']['j'][1] = {'q': {7: -6}, 'e': {5: 'h'}}
length(p[7])
a[8][-9][4][-4]['k'][-6] = 'u'
g[5][-1][-3]['r'][5][-1][-1] = 8
n['c'] = 'k'
o[8]['y'] = 'm'
p[-6][-8][4]['c'][-3]['d'][1]['d'][2][-1] = -2
q[-1][-6][0] = {0: {9: 'v'}, -7: {'h': 'e'}, -3: {'x': {-8: 'n'}, -7: {-5: {'f': 7}, 'n': {'i': 4}}, 'p': {'q': 'z'}}, 'w': {'g': {'l': -1}, -9: {'p': {-8: 'l'}, -6: {'z': -9}}}}
w['c'] = h[3][2]['q']
test(l['a'])
s['t'] = 'f'
length(p)
test(n[6][-6]['d'][1]['d'][-4])
u[-2][5]['m'][0] = 'n'
test(n['m']['f']['u'])
test(l['m'][-8])
u[-5]['o'][3]['a'][5][0]['h'] = {'i': {7: 'l'}, 'o': {7: -9}}
h['p']['p'][-8] = {-8: {7: 't'}, 'p': {-5: -6}, 'q': {'d': 'u'}}
g[3]['l'][-8]['b']['i'][9] = {0: {'c': 'g'}, 1: {'z': -1}, 5: {'o': 't'}, 6: {'a': -8}, 'h': {9: 't'}, 'm': {-5: 5}, 's': {2: -3}, 'u': {9: 'v'}, -6: {'q': 'k'}, -4: {'i': 'e'}}
x[-4]['w'] = p[7]['i']['b']
test(i['a'][-3][4][7][4])
z[4]['w']['s'] = 'f'
p[-1]['y'][8][-6][-1][9][-2]['r'] = 7
x[-4]['w']['m'] = u[8]
d['h']['h'] = 'f'
length(b['a'][-2]['b']['v'][6])
b['a'][-2]['b']['v'][6][-5][9][-8][-6][6] = 6
test(r[7][4][-4][-5]['k'])
x['m'][6]['c'] = 'z'
p[7][2][3]['z'][4] = 3
test(e['t'][8][5]['u']['w'])
length(m['v'][6][-6][1][-5]['z']['x'])
length(y)
u['m'][4]['r'] = 3
w[-4][0] = x[-7][7]
w['c'][2] = e[3]['v'][4]['e']['t'][-4][-3][9][-7]['g']
test(s['b']['w']['j'])
test(q)
o['p'] = r['g']
d[9][6][-3]['q'][-5][7]['o'] = 'b'
a[8][-9][4]['g']['j'] = 6
test(h[4]['w']['g'][-1])
i[9][7]['c'] = i['o']['l']['u']
length(z)
length(i[9][7]['c'][-5]['d']['l'])
i['o']['l']['u'][-5]['d']['l'][-6]['l'][6]['h'][-3]['d'][-8]['g'][-2]['h'][4]['n'] = 't'
l[-6][-5][-9] = {'m': {'q': 7}, 'g': {'x': {-2: 'z'}, -2: {'i': -9}}}
test(v)
k['b'] = z[-4][-2][-1]['j']
length(y[-4])
test(k[7][-6]['b'][0])
u['b'] = {'a': {'g': 'r'}, 6: {-5: {8: {'n': 'h'}, 'y': {'z': 'w'}}}, 'f': {-8: 'm'}}
test(k['q'][-9][7])
length(r)
length(j['f'][-1])
x[-7][7]['f'][9]['y'][-6] = -9
test(y[-7]['b'])
v[6]['k'][0]['i'] = {'c': {'m': -8}, 4: {-2: {'j': 'a'}, 'f': {'k': 6}}, 'k': {9: 'e'}, 'g': {'s': 'r'}, 'v': {1: 'u'}}
v['q']['i'][0][6][-2]['k']['h']['c'] = {2: {1: 'q'}, 'b': {'c': 9}, 'd': {'z': 'c'}}
c['s'][-4]['h'][-9][-3][2] = s['m']['t'][9][3]['i']
test(v['i'][9][7][9][6]['q']['m'])
b['a'][-2]['b'][0]['u'][8][5][-1] = 'f'
v[6]['k'][0]['i'][4][-2]['o'] = -1
v[-3][9] = 'd'
p[1][9]['p'][-9][-3] = {'r': {9: {9: -7}, 'b': {-7: 4}, 6: {0: 'i'}}, -5: {-7: {7: 'g'}, 'r': {'l': 'e'}, -4: {7: 'n'}, 'p': {'h': 'b'}}}
e['a'][-5]['q'][-8][-8]['b']['j'] = b['a'][-2]['b'][-5]['r']
k[2]['p'] = -4
d[2][2][-9]['g']['r'] = b[1][6][-6]['l'][6]['h'][-3]
k[-7]['g'][7] = 5
length(q['y'][-7][9])
test(z['f'][-9]['y'][5][6])
r[7]['y'][2]['c']['j']['u']['z'] = 'x'
f[-5]['v'] = 5
s[-5]['y'][-6][-7][0][0] = -5
q['p'] = 'g'
l['u'][-2][-2]['d'] = 's'
s['b']['w']['r'][-9] = {'p': {'q': {6: 4}, -5: {7: 'e'}, 'g': {5: 'q'}}, 'd': {0: {'u': 8}, 'w': {'c': -5}, 7: {-9: 3}}}
n['q'][1] = {2: {0: {'j': -2}, 'x': {2: -1}, 1: {'e': 'n'}}, -5: {'t': {3: 9}, 'l': {-2: 'c'}, 'f': {9: -1}}, 'd': {2: {'d': -7}, 'j': {'p': 'k'}, -9: {-9: 'l'}}}
o['f'][0]['r'][-9]['w'][-5]['p']['y'] = 'o'
z[-4][6][6] = e['t'][-5]
length(o[0][1])
o['f'][0]['r'][-9]['w'][-5]['p'][-3]['i']['v']['s'] = 'j'
length(v[-1][-2][-4]['z'][8][2])
length(z)
m[1][-7][7]['w'] = 'c'
length(b[2][7]['p'][-8]['v'][5][-4][-8][-2])
length(p[-6][-8]['p']['i']['m'])
x['m'][6]['x'] = 'd'
m['v'][6][-5]['r'][0] = 'r'
e[3]['v'][3][3][3][-4]['j'][-7]['h'][4] = -9
m[-5]['v']['j'] = -7
test(z['f'][-9])
test(g['d'])
test(e[1]['t'][8])
test(w[4][2])
length(x['m'][6])
d[3][1][6]['b'][4] = 'o'
h[3]['i']['o']['h']['z'] = 9
h[4]['b'][-3][-9]['s'] = {-5: {'u': 'j'}, -3: {'y': {-4: 4}, 7: {'d': 8}}}
h['h'] = b[1][2][8][-9]
test(v[5]['y']['h'][2])
t[-6][3]['y'][6] = 'w'
length(p[1][9]['p']['h'])
test(o['p']['l']['r'][5][-1])
k[-8]['f']['i']['e'][5] = {'u': {-6: 's'}, 'm': {-3: 'm'}, 'n': {'w': 'w'}}
length(m['v'][6])
length(o['f']['z']['o']['d'][6]['v'])
i[9][7]['c'][-5]['d']['l'][-6][5][-4] = {5: {'f': -3}, 'f': {'p': 's'}, 'h': {-4: {7: 'f'}, -1: {-7: -2}}, 'u': {2: 'v'}, -7: {'h': {'w': -9}, 4: {0: -6}}, -5: {-5: -2}, -3: {'v': 0}}
n['q']['c'][2]['v'] = -4
x[7][9][9][-1]['l']['j'][-6]['n']['f']['y'] = {5: {4: -3}, 6: {'i': -4}, 7: {'e': 9}, 'f': {'m': {8: 'c'}, -2: {-5: 'v'}}, 'q': {'a': {'t': 2}, -3: {-9: 4}}, -8: {'o': 'n'}, -7: {'w': -4}}
length(m[3]['k']['k'][3]['o'][6]['g'])
length(u[5]['r']['a'])
l['f'][7]['y'][-5][-5] = e['a'][-6]['d'][1]['d'][-4]
p[7]['i']['m'][2][-2] = 's'
o['b']['t']['v'] = 'j'
length(x)
length(b[2][-1]['u'])
m[3]['k']['g']['h']['n'] = 'h'
test(m[0][-7][2][7])
test(y)
v[5]['y']['h'][2]['d'] = m[-5]['r']
p[-1]['y'][8][-6]['t']['o'][6] = 'b'
p[-1][3][6]['u'][8]['y'][-3] = 'r'
f['o']['w'][-5][3] = 's'
a[8][-9][4] = {'n': {0: {7: -9}, 9: {-3: 'b'}, 'm': {-8: 'p'}, -2: {'d': 'j'}, 'f': {-4: 'g'}}, 7: {-9: 4}}
test(t[-2]['a'][-6])
m[0][7][1]['u']['z'] = -3
i['a'][-3][-4][-2][-1]['w'][7] = {'x': {'z': -7}, 2: {'g': 'b'}, 'r': {-2: 'v'}}
length(v['x']['w'])
test(q[-1])
i[3][6]['t']['q'][6] = p
y[-7] = {'q': {'t': 'a'}, 9: {-6: 3}, 's': {3: {'p': {'a': 'd'}, 'z': {3: -3}}, 5: {-3: {7: 2}, 'f': {'c': -6}}}}
length(n['q']['c'][2])
test(t['z']['f'][2]['v'])
test(a[8])
e['g'][7] = o[-3][8]
r[7]['y']['b'][-1][3]['f'] = -4
q['y']['l'][8]['e'] = 6
h[3]['g'][-4][-3][5]['q']['u'] = {5: {1: {'c': 'v'}, -1: {'a': 'h'}}, -3: {-6: {6: -1}, 'j': {'t': 't'}}, 'g': {'y': {'u': 'y'}, 'e': {'h': -1}}, 'd': {9: {9: {-3: -7}, 7: {-6: 'x'}}, 'u': {'w': 'h'}}}
x[-7][6][-3]['q'] = {'q': {'b': {-7: 'e'}, 'e': {-5: 8}, 'f': {7: 'c'}}, 'k': {-7: {-6: 7}, -9: {'a': 1}}}
c[-8][-6] = {2: {'i': {'c': {8: 9}, 'e': {6: 9}}, 'c': {5: {4: -5}, -9: {'n': -9}}}, 'f': {'x': {'a': {'h': -6}, 'h': {'k': -1}, 'x': {'w': 3}}, 'v': {-6: {'e': 'g'}, -2: {'n': 9}}}}
test(s['b']['w'][3][2][-7]['z'])
a['d'] = 'g'
n[6][-7][-1][5]['t'] = {'y': {-3: 1}, 'x': {'x': 'q'}}
test(j['p']['x'][-6]['p']['m']['k'])
length(k['q'][-9][7]['e']['s'][6]['q'])
i['o']['l']['u']['s'] = 'y'
z['h'] = 7
s[5]['s'] = f[0]['d']['s']['o']['o']
test(k['q'][-9][7]['e']['s'][6]['y'])
o[0][-3][-1] = 'p'
length(h[4]['b'][-3]['d'][-3])
length(o['f'])
f[-5][-4][8] = h[3]['i']['n'][-8]['p'][0]
o['f'][-4] = c['e']['f'][2]
o['q'] = 'v'
c['e'][1][9] = 'p'
b['w']['y']['b']['i'][9]['h'][-5] = 'q'
p[1][-8] = {8: {'z': 's'}, 1: {5: {'v': -6}, 't': {'g': 't'}}, 4: {'m': -8}, 't': {-7: -1}, -9: {7: 8}}
w['s'] = {'a': {'x': 'w'}, -5: {-5: -5}, 'i': {-9: -5}, 's': {4: 'o'}, 'w': {-8: 'g'}, -9: {'z': {-1: -5}, -9: {'o': 'z'}}, -7: {'n': 4}, 'z': {-5: 'm'}, -4: {-6: -1}}
e['g']['q']['y'] = {2: {'u': {'z': 'r'}, 4: {'i': 9}, 'n': {'q': 'u'}}, 4: {'p': 'c'}, 6: {'n': 'u'}, 'f': {'a': -1}, 7: {-8: 4}, 'e': {'b': -1}, -4: {'x': {'f': 'p'}, 'm': {'x': -8}}}
m[0][7][6][9]['q'][-9][-4]['r']['p'] = 'r'
h['p']['p'][-8]['q']['h'] = 't'
y[0]['f'][5][-2][-2][8]['d'] = 'u'
u['k'] = 8
m['v'][6][-6] = w[-4][-6]
e[-2] = 'c'
x[-7][6][-3]['q']['q']['b']['c'] = 'e'
i['n']['c'][2]['h'] = h[4][8]['d']['r']
v['r']['l']['l'][-4][-6][5] = 's'
p[-6] = {-8: {9: 4}, 's': {1: {'b': 'j'}, 5: {1: -8}, 'o': {-5: 'x'}, 9: {'f': 5}}, 'd': {'l': 6}, -3: {'l': -4}}
p[1][-8][-9][7] = b[1][3][0]
length(t)
test(z)
test(x[7])
test(s)
length(q['y'][-7][-2][8])
c['e']['f'][-6]['b'] = b['n']['b']
length(o[-3][-7]['k'][9][6]['t']['f'])
a[8][-9][4]['n']['f'][-4] = {'h': {1: -6}, 'k': {4: 'e'}, 'q': {'i': 4}, 'w': {8: -4}, 'y': {'f': -6}, 'z': {'b': 'x'}}
g[-4] = -8
test(a[-2]['a'][7]['x']['d'][-8])
d[1]['g']['r'][1]['s']['a'] = {-8: {4: 'f'}, 0: {'a': 'j'}, 's': {0: 'j'}}
test(v[6]['k'])
i[9]['g'][7] = -6
n['m']['f']['u'][-9] = {'d': {'s': -9}, 6: {-6: 'e'}, 7: {-8: 'x'}, 'j': {'u': -5}, 's': {9: 'q'}, 'r': {'u': -7}, -1: {0: 'u'}}
q['y'][-7]['f']['h'] = w['s']
test(w['s']['s'])
b[1][6][-6][5][-4]['f'][-8] = {'p': {9: 7}, 8: {-8: 'm'}, 'i': {'y': 's'}, 'r': {'a': 't'}, -8: {-7: 'k'}, 'x': {1: {-7: -1}, 'n': {-5: 0}}, -4: {-4: 6}}
test(e['a'])
test(z[4]['u'][-5]['h'])
s['m']['t'][9] = 'd'
l[6][5][3] = m[3][0]['r'][-9]['w'][-5]
t[-1]['o'][5]['t'][-8]['y'][6]['k'][-9] = 5
w[-4] = -7
test(g[0])
test(d[9][6][-3]['q']['k'])
w['s'][-7]['n'] = -4
e['t'][8][5]['u'][0][-4] = 's'
r[2] = {9: {-9: -4}, -6: {1: {'z': 2}, 9: {'o': 'f'}}, 'c': {'x': {3: 3}, 2: {'w': 'w'}}, -3: {6: -6}}
test(t['t'][7][1])
c['s'][-7][8] = {'e': {9: 'k'}, 'd': {-2: -2}, 9: {'p': {'a': 3}, -6: {'h': -3}, 'k': {2: 7}}, 'k': {'b': 'g'}, 'n': {'p': 4}, -4: {-1: 'q'}}
test(w['c'][2]['h'])
r[0][-6][7] = {9: {-6: {'c': -1}, 'o': {'k': 'u'}, -2: {-8: {'o': 0}, 'g': {2: 'z'}}, 7: {-9: 'e'}}, -3: {-7: {-3: 9}, 'l': {2: 'g'}, 5: {6: 9}, 'n': {'p': 'j'}}}
n['s'] = 'z'
i['o']['l']['u'][-5]['d']['l'][-6]['i'] = 'l'
z[4]['u']['b']['m']['z']['b'] = -5
length(h['h'])
k[1]['b'] = 'e'
test(v[5]['d'][9][-9]['w'][0])
test(x[7][1][-8]['b']['j'])
k[2]['h'] = r[1]
y[-4]['b'][8][7][-2]['q']['c'] = u['b']['f']
length(l['m'][-8]['s'][-4]['h'][2]['h'])
length(d[7][-4][-9])
c[-8][-6][2] = d
length(c['e'][1])
test(c['i']['d']['p']['x'][-4])
length(e[1]['t'][8])
g['v'] = d
a[-2] = {'d': {'h': {7: -5}, 'z': {8: 3}}, -2: {'r': {'r': 4}, 'e': {0: {0: 'v'}, 'j': {'u': 'k'}}}, 'l': {-8: {-5: 'm'}, 'a': {'l': -3}, 'w': {'i': 7}}}
j['w'][-1][-3]['r'][5][-1][-1] = -1
k[-8]['f'][-6]['g'][-1] = -4
q[-1][-4] = s['m'][8]['u']['b']
p[-6]['s'][5]['z'] = l[2]['d'][3][-4][9]
h[3][2]['n']['y'] = {0: {'n': 'r'}, 6: {-8: {'o': 'b'}, 'd': {'n': 'o'}}, 'f': {'h': {'u': {-4: 8}, 'g': {'f': -2}}, 'b': {-3: 'm'}}}
r['v'][-7][-8]['m'] = 'b'
r[5] = 'b'
c['s']['e']['t']['u']['q'][-2] = 1
test(s[-4]['d'])
l['u'][-2][-2]['v']['g'][-3] = {'j': {8: {'r': 8}, 'f': {3: 's'}}, -9: {-1: -1}}
test(h[4]['w']['g'][-1][3][0])
r[2]['c'][2]['w'] = 'l'
q[-1][-3] = 'z'
n[-8][-9]['a'][7][7] = {3: {2: 2}, 'r': {'b': {-7: 0}, 'l': {3: 'j'}}, -5: {'d': {-9: 'n'}, 'n': {'p': -3}}, 'v': {'w': 'a'}}
test(h['p']['p'][-8]['p'])
u[5]['m'][0] = y[0][7][-6]
length(m[3][0]['r'][-9]['w'][-5]['p'][-3]['p'])
length(m[3]['z']['o'])
test(o['p']['l']['r'][5][-1])
length(k[1]['e'][4]['x']['d'])
w['c'][2]['h']['x'] = 'l'
test(g[3][-5]['g']['q'][-4][-4])
d['a'][9] = 6
length(i[-8]['j'])
length(b)
k[-7] = y[-7]['s'][5]['f']
test(r[1])
j[-4][-9]['p'][-7]['u'] = j['f']['p'][-4]['e'][0]
length(e['t'][8][5]['g'])
r['g']['l']['r'][5][-1]['t'] = {-7: {'f': 'e'}, -6: {8: -2}, -5: {'d': -5}, 2: {'m': 8}, 'f': {'n': -5}}
o[4]['r'][-3]['t'][5] = {'q': {'x': 'v'}, 'k': {0: {'s': -2}, 2: {'p': 'u'}, 'b': {4: -6}, 6: {-7: 't'}}, 'd': {-7: 'k'}, -9: {'h': {'r': 'a'}, 'k': {-6: 2}, 'w': {'o': 'y'}}}
o[8] = 'b'
a[8][-9][4][7][0] = 8
k['b']['e'] = 7
r['v']['a'][-3][4][3]['a'][8] = 8
length(s)
f[-5][-4]['j'][-1][9]['f'][0]['w']['y'][4]['h'] = {'r': {'e': 'a'}, 3: {9: 'u'}, -2: {'o': 'm'}}
k[7][-6]['b']['t'][7] = -6
g[-1]['a'][3][6][1] = {-6: {'x': {'x': 'b'}, 4: {0: 'm'}}, -3: {'z': {'g': 'x'}, -1: {'r': 4}, -5: {4: -6}}}
u['b']['f']['m'] = {0: {'v': 'g'}, 2: {'h': 'g'}, 8: {-2: -9}, 9: {-4: 8}, -7: {3: -7}, -4: {2: 'v'}, -3: {-2: 'i'}}
test(i['o']['l']['u'])
test(l['e']['s'][6]['u'][0])
q['y']['l']['b']['o']['h'] = {8: {'h': 'v'}, 2: {1: -4}, -4: {9: 'l'}, -6: {2: 'i'}, 6: {'s': 9}}
n['v']['l'][2] = {'j': {-3: 1}, -9: {-7: 'p'}}
length(a[8][-9][4][7])
length(k[-8])
r[7]['y']['h'][2]['d'][-8] = z[-4][0][6]
c['i']['n'][-5]['p'][-8][-7][4]['f']['d'] = {'q': {-9: 3}, 'p': {-8: 7}}
p[7]['i'] = 'z'
a[8][-9][4]['n'][0] = 'k'
y[-7] = 'w'
q['y'][-7]['f']['h']['z'][3] = 't'
length(y[-4]['b'][8][7]['v']['i'])
q['y']['l']['b']['o'] = {7: {-5: {-5: 'v'}, 'f': {'y': 'x'}}}
k['p'] = -9
m[-5]['v'][-8][-6][2]['z'][-7][5][-8]['e']['j'][6]['i'] = {3: {0: 'b'}, -5: {'m': 'd'}, -2: {9: {6: 't'}, 3: {-2: 1}}, 7: {'x': {'r': {'u': 'u'}, 5: {0: 6}}}}
test(s['m']['t'])
u['e'][-1]['f']['n'][-4]['l'] = -6
length(t[-9][6]['s'])
length(m[1]['x'])
p[-6][-3]['l'] = 's'
a[-2]['d']['h']['g'] = 7
length(v[6]['z']['w'])
test(s)
d[9][6][1] = 3
a[-2][-2]['e'][0]['f'] = -6
e[1]['t']['v']['a'] = 0
test(m[0][7][6][9]['j']['d']['m'])
test(i['a'][-3][4][7][4][-6])
m[3]['k']['h'] = 'f'
length(y[0])
test(c[-8][-6][2][7][-4]['c'])
y[-4] = g[0][-8]
length(q['y'][-7]['m'][-6][1])
length(q['y'][-7][-2][8])
u[8][-2] = l
x[-4]['d'] = 'h'
l[-9]['b'][0][4][-7] = o['f'][7]
test(x[7][9][9]['a'][-3]['t']['c'])
length(y[-4][3]['l'])
length(g[-1]['a'][3][2])
v[5]['y']['h']['b']['q'][-9] = {3: {'q': {-7: 'z'}, 'k': {-1: 'r'}}, -7: {5: 'y'}, 'c': {2: {0: 'c'}, 'd': {6: 'c'}}, -5: {'f': 'p'}, 9: {'h': 'u'}}
w['p'][-6]['l']['c'] = 'h'
g[-6]['b'][-2] = {5: {-7: {'n': 'r'}, 'n': {'i': 6}}, -1: {8: 'u'}}
f[0]['d']['t']['w'] = 'h'
g[-6]['b'][-2][5] = i['n'][4][2]['h']
g[3][-5] = 'p'
g[5][-1][-3]['r'][5][-1]['t'][-5][-2] = {0: {'f': 't'}, 2: {'l': 'm'}, 'u': {'i': 'j'}, 'o': {'l': 'z'}}
b['a'][3] = {2: {-9: 6}, 'e': {'g': 'w'}, -2: {5: 6}, 'c': {-8: 'd'}, 'u': {'d': 'v'}, 't': {-8: -7}, -7: {'d': {'d': 8}, -9: {-8: -1}}, -4: {9: 't'}, 4: {-5: 'n'}}
u['p']['z']['w'] = p[7][2][3]['z']
v['i']['a'][-9][1][-5]['o'] = l['e']['s'][6][-2]
x[7][1][-8][-9]['i']['c'] = 1
p[-1][3]['d']['c'][6]['s'][-7]['t'][8] = 'i'
test(m[-5]['r'][-8]['t'][7])
t[-6][-2]['m'] = 'g'
length(r['v']['a'][-3][4])
test(e['g']['q'][-4]['w']['q'][1]['d']['j'])
test(c['s'][-4]['h'][2]['h'])
l[6] = 'd'
length(v['b'][1]['d'][-4])
k[-3] = {'i': {'x': {-5: 'w'}, 'b': {4: 'd'}, 'm': {5: -1}}}
test(u['g']['t']['a'])
j[5][8]['i'][-9][1][-7][4][6][5] = -3
k[-8]['f'][-1][7][-9]['s'] = p[-2][-5][-6]
test(i['o']['l']['u'][-5]['d']['l'][-6]['l'][6][-4])
test(k[1][1]['k'])
test(k)
test(m[-5]['r'][-8][3][-2]['z']['x'])
length(s[5]['s'])
n[-8]['p'][4]['f'] = 3
length(k)
x['m'][-5]['l']['r'][-8] = {-3: {6: {0: 'v'}, 'n': {-9: 'w'}}, 'f': {-8: {'u': 5}, 't': {-7: -4}}}
z[4]['w']['j']['a'] = q[-1]['h']['a'][4]
s['b']['u'][1][-1][-9][8] = g[0][-8]['t'][7]
test(a[-2]['d']['h'])
test(d)
length(o['f'][0]['r'][-9]['w'][-5])
l['a'][5] = {-7: {3: {-9: 'k'}, 'l': {2: 'e'}}, -6: {'k': 3}, -3: {7: -5}}
length(u['b']['f']['m'][-4])
g[8]['e'][5]['o'] = u['g']['t']['d'][3]
length(x[-7][6][-3]['q'])
test(z[-4][-4][3][4])
length(v[6][7])
s['m']['k'][9][8][0][-2]['z'][4]['g']['c'] = w[-5]['o']['f'][-4]
test(z['f'][-9]['y'][5][6])
length(g['v'][3][3]['n']['j'][5])
n['g'] = {'x': {2: {2: 'm'}, 'm': {'l': 'k'}, 'l': {'w': -6}}, 6: {'b': {'e': 3}, -3: {-7: -9}, -2: {'f': 'r'}}}
length(a)
d['a']['k'] = 'q'
test(g['i'][0]['h'][-5])
e[3]['n']['o'][-2] = 'q'
test(t['a']['h'][6][-5][-2])
m[-5]['r'][-8]['t'][1][-5] = 'k'
test(a[-2][-2]['e']['j'])
test(z['f'][-9]['y'][7])
length(s[-5]['x']['e']['b'][-5])
c[-9][-2][1]['p']['d'] = {'q': {-4: {4: 'a'}, 'g': {-9: -2}}, 'y': {'v': 'y'}, 5: {'b': {-1: 6}, 'd': {-5: 'k'}}, 'x': {8: {'i': {-8: 'i'}, 'p': {6: 9}}, 'i': {'r': {'z': 'm'}, 5: {1: 'x'}}}}
f[0][1]['u']['g'][0][-8][7]['b'] = {-1: {-8: {'n': 'c'}, -7: {-8: -6}, 'r': {'h': -7}, 'h': {1: 1}}, 7: {0: {'s': {-9: 'l'}, 'm': {'o': 's'}}, 'c': {9: -8}, 3: {1: -7}}}
s['m']['k'] = {'a': {'y': -2}, 'g': {'k': 't'}, 6: {-4: 'm'}, 'q': {'i': 1}, 'w': {'e': 6}, -9: {6: 'f'}}
j['t']['v'][1]['w'][3] = 'o'
length(a[8][-9][4][7])
f['g']['v'][-3]['i']['p'][-2] = 'j'
length(o)
length(z[4]['w'][0])
length(o[-3][8]['u'][-6][8])
length(u['p'][7])
f['g'][8] = -1
f[-5] = 'j'
n[-8][-9]['a'][7] = 'k'
n['g'] = 'l'
test(b['n'][0][-4])
d[1][-5] = {4: {'i': {'c': 'r'}, 1: {7: 'o'}, 't': {'r': -8}, 5: {-6: 'm'}}, -3: {'s': {'s': {'g': 'x'}, -4: {-9: 'e'}}, -4: {6: 'y'}}, -2: {'e': {9: {-2: -1}, 5: {5: 9}}, 7: {'z': 'e'}}}
b[-1]['a']['o'] = 'q'
o['b'][-9][4] = 4
length(n[6][-6]['d'][1]['w']['m'])
test(v['b'][1]['d'][-4])
test(p)
x[-4] = p[1][9]['p'][-9][-3]['r'][9]
g[8]['e'] = t[-6][3]['z']
t[-9][5]['o'] = c['i']
u[8][-2]['a'][5][-6][-6] = h['h']
test(c)
test(b[-1][-1][2][7][1]['w']['s'])
l[2]['d']['t'][-7] = {0: {2: 8}, -5: {0: 'j'}, 'u': {'y': 6}, -3: {3: {2: -1}, 'j': {8: 'd'}}}
test(a[8][-9][4][7])
test(j[-4])
e['g']['q']['y'][4][-5] = {'i': {-3: -2}, 'o': {7: 'f'}}
length(i)
k[2]['h']['n'] = -6
test(g[0][-8][3]['l'])
m[0][-7][-9]['p']['z'] = 6
l['f']['g']['u'][4]['c'][2] = {'a': {1: {-6: -7}, 'm': {'s': -3}}, 7: {'h': {-9: 'l'}, 6: {'p': 'z'}}}
h['p']['p'][-8][-8] = {6: {'g': 'g'}, 8: {'z': {-2: -9}, 'm': {1: 0}}, 'k': {'y': 'a'}, 'o': {-3: 9}, 'n': {'j': 'm'}, 'q': {'a': 'm'}, -9: {-9: 'w'}, -4: {'d': -5}}
g[-6]['b'] = 'i'
test(q)
test(f['g']['e']['w'][-9]['w'])
test(f['h']['b']['i'])
test(k[-3]['i']['x'])
e[1]['t'][8]['g'] = {'e': {'d': {-9: 8}, 'w': {2: 'c'}}, 7: {'m': 'd'}, 'i': {'y': 6}, 'j': {-1: 6}, -5: {7: -3}, -3: {'a': 1}, -2: {'p': {-7: 't'}, 'j': {'o': -5}}}
length(n['m']['f']['u'][-9][6])
test(x[7][9][9]['a'])
g['n'][-4][0]['u']['n'] = c['e'][6]
x[7] = d[3]['g']['q'][-4][-4]['w']['e'][-4]
test(h[4]['b'][-3])
length(j['f']['g']['q'])
test(v['x']['p']['i'])
length(j['w'][-1]['a'][2][7][1]['w']['s'])
length(m[1][0][7])
test(a[-2]['d']['h'])
c['e']['o'] = 'c'
f['g']['e'][-6] = u['b']['a']
length(k[1][-3][-6]['q']['s'][-8])
length(k[-7])
w['p'][-6][-4][3] = 'z'
f[9] = m[1]['e'][-1][9][5]
x[7]['j'] = a[-2]['l']['a']
h['p']['p'][-8]['p'][-7] = -9
length(v['b'][1]['w']['m'])
p[7][2][8]['b'][1][0][-5][2] = 'e'
length(j['w'][7]['p']['p'])
length(c)
r[7]['d'][9]['q'][3] = b['a'][-2]['b'][1]['x']['m'][-7]
b['n'][-1]['n']['z']['d'] = h[3]['i']
u[-2][-2]['g']['t']['a']['t'] = d[3]['t'][-5]['r'][-5]
o[0] = a[8][-9][4]['n'][-2]
length(b)
test(d[1][-5][4][5])
e['a'][6] = 'x'
length(j['w'][-1][-3]['r'][5][-1]['t'][-5][-2][2])
y[-4]['k']['e'] = -7
x[9] = 'y'
test(g[3]['l'][-8])
w[4][2]['h']['x'] = -1
r[1]['n'] = d[2][-6]['q'][-7][5]
n['q']['c'][2]['h']['c'] = {'m': {'a': {'z': 'y'}, 'm': {9: 'e'}}, 'n': {'p': {'j': 't'}, 'z': {-7: -1}}}
x['m'][6]['u'] = 'a'
test(k['q'][-9][7][2]['d']['b'])
length(i['o']['l']['u'][-5]['d']['l'])
p[1][9]['s'][0][6] = 'r'
b['w']['y']['p']['i'][-3] = -6
length(t[-9]['g'])
q[-1][-6][0][-7] = 'o'
p[-2][-5][-6][2] = 1
d[7]['t'][-7]['v'] = 'u'
v['x']['p'][-2][0] = -4
t['a']['h']['q']['c'][2]['u'] = 0
d[3][3]['v'][4]['e']['t'][-4][-3][9][-6]['y'] = 'a'
length(n['q'])
g['d'][7] = 'u'
i['o']['l']['u'][-5]['d']['l'][-6][5]['t'][-6]['q']['x']['e'][-8][0][4] = -6
length(m[0][7][1]['u']['x'])
x[-4]['j'] = -4
j['f']['o'] = 'c'
test(j[-4][0])
x[-7][6][-3]['q']['q']['e'][-5] = -5
length(c[3])
v['r']['l'][5]['u'] = 2
length(g[5][-1][-3]['r'][5][-1])
test(w[-5]['o']['f'][-4])
length(s['b']['w'][0])
f[9]['h'] = 'o'
test(r[0])
m[1]['e'][8][-5]['y'] = 'x'
length(c[-8][-6]['f']['v'][-6])
test(s[-4][-3])
length(b['a'][-2]['b'])
s[5][-6]['d'] = 'g'
test(q['y'][-7])
test(j[-1]['s'][6]['u'][0])
n['m']['f']['u'][-9][7]['s'] = 'z'
length(b['a'][-2]['b'][-5]['v'])
m[-5]['v'][-8][-6]['f']['x']['a']['h'] = -8
test(t[8][5][3])
l[1][-7] = 1
length(n)
test(j[-4]['u']['g'][-9]['f'][1])
t['a']['h'][6][-5]['c'][-9][4]['n'][9][7] = -6
r['g']['l']['r'][5][-1]['t'][-6][8] = 6
v[-1][-9][9]['f'][0][2][-1][1]['e'][-1]['c']['h'][2] = d
d['z']['e']['l']['w']['q'] = -7
length(m)
length(a)
length(j['p']['x'][1][7])
length(f[9])
e[1][6][6][9] = 'y'
a[-2]['d']['h']['k'] = 3
c[-8][-6][2][7]['t'][-1] = -1
r['v'][4]['b']['p'] = {'c': {'i': {6: -1}, 'g': {0: 9}}, 'b': {8: 'o'}}
test(z[-4][8][0]['b'][-9][-8][-6]['f']['v'][-6])
test(r[7]['l'])
h['h']['f'] = 3
length(y[0])
v[6][7]['j']['j'] = y[0][-1]
length(z[-4][-4][3][4]['w'][-5]['p'][-3]['i']['v']['f'])
y[-4]['t'][1][-9] = 'g'
test(b[2][-1]['b'])
length(d[3])
i[-3] = -6
v['q']['i']['e']['s'][0]['v'][4]['u'][-2][5][6] = 7
l[-6][-5]['b']['k']['r'] = 'w'
l[-6][-5][-9]['m']['d'] = {0: {6: 'c'}, 'i': {-7: {'i': -3}, -4: {'e': 2}}, 't': {'s': {'c': {9: 2}, 'w': {9: 4}}, 'l': {'p': 'i'}}, 'o': {-7: {-4: -2}, -6: {9: -3}}}
a[-2]['d']['z'][8] = 't'
u['b'][6][-5]['y']['z'] = 'z'
u['m'][4][-2][-1]['o'] = r[1]['n']
test(s[-4][-2][-7])
o['f'][7]['c'][-5]['w'] = 'b'
p[1][-8][1][5]['v'] = {'a': {4: 'p'}, 't': {'d': 0}}
p[-2][-5][-4]['t'][-3] = {'j': {-2: 'b'}, 5: {'h': 0}, 6: {-2: 5}, 'v': {'t': 'q'}}
s[5] = u['b']['f']['m'][9]
test(k[-3]['i']['x'])
z[4]['u'] = {-7: {'i': {-2: 9}, 3: {2: -2}}, 1: {'b': -1}, 2: {4: 9}, 'z': {-9: 'k'}, 7: {'s': {'b': 'r'}, 'l': {'s': -8}}}
c[8] = {3: {7: 'p'}, 5: {'z': 'a'}, 7: {5: -7}, 'n': {'a': -9}, 'w': {9: -4}, -7: {'b': 'a'}, 'y': {'a': 9}, 'x': {5: -3}}
length(v[-3])
c['e'][1][3] = x[-7][6][-3]['q']['k'][-9]
e[1][6][6][9] = {'y': {-8: {-6: 'x'}, 't': {1: 'i'}}, -5: {'c': 's'}}
z[-4][-4][3] = 9
length(g[5][-1]['a'][2][-1])
x[7]['j'][-7] = 'o'
k[7][-6]['q']['o'] = -5
e[1][6]['b'][4] = {'b': {'m': 8}, 'd': {'k': 6}, 6: {-7: 5}, 't': {'s': 'f'}, -6: {-5: -4}, -2: {'a': 's'}}
length(l['e']['s'][6]['y'][9])
m[3][-4][-4] = g[-1]['a'][3][6][1][-6]['x']
length(t)
length(c[3])
test(l[1][7])
q[-1]['v'] = v['b']
test(e[3])
length(b[-1][-1])
test(i['n']['s']['z'])
length(o['p'])
test(c[8][-7])
w['c'][2]['h']['c']['n']['z'][-7] = -1
i['o']['l'][-5] = b['n']['u']
u['e']['z']['q'][6][-6][-5] = -9
g[5][7]['j']['t'][-2]['g']['d']['w'] = {5: {'d': {8: {'y': 9}, -9: {'u': 3}}, 5: {'d': {'d': 's'}, 7: {0: 0}}}, 6: {-8: 0}, 7: {-2: 'r'}}
h['h']['r'] = -6
test(z['f'][-9]['y'])
w['s'][-4]['g'] = u[5]['r']
w['p']['o'][-6]['j'] = 't'
k[2]['h']['n'][-4] = 6
o['f']['k']['k'][3][-8]['v'][-1]['v'] = a[8][-9][4][7]
y[-4]['k']['e'] = 'w'
length(x['m'][-5]['l']['y'][-5]['l'][8])
i['a'][-3][-4][6][6][-6][-1] = 's'
z['f'][-9]['y'][-4] = m
length(n['m']['f']['u'][-9]['d'])
o[4][-6][3] = x['m'][-5]['l']['t']
e[1][6]['p'][-5] = {'q': {'a': {-1: 'g'}, -6: {5: 1}}, -8: {'h': {'y': -5}, 5: {'k': -2}, 'w': {'n': 'b'}}, -5: {'k': 1}}
length(b[1][-6][3][-1][2][7])
p[1][9]['p']['h'] = 4
g[0][-8]['k']['d'] = z['f'][-9]['y'][5]['f']
b[2][-1][-6][1] = 8
b['a'][-2]['b'][-5]['s'] = {'x': {'b': {'x': {-8: 'u'}, 6: {'t': 2}}, 'e': {2: -8}, -2: {'f': 'r'}}, 'g': {6: 1}, 1: {-5: {-3: {'o': 7}, 6: {3: 6}, 7: {'g': -4}}}}
test(d['a'])
n[-8][3][0][2] = 9
length(x['m'][6])
f['g'][8] = 'i'
h['h'][0] = y[0][-1]['l']['r']
i[-2][5][-3]['h'][4][-7] = c[-8][-6][2][7][-4]['c']
u['t'] = 7
h[4]['w']['g'][-1][3]['q']['o'] = 6
a[8][-9][4][7]['q'] = 'j'
x['m'][9][0][-2][2] = 5
length(u['e']['z'])
test(b)
n[6][-7]['f']['o'][0][-5]['s'] = 8
j[-4][-9][-9]['w'] = 0
c[-8][-6][2]['z'] = {6: {-8: 3}, -9: {3: {-7: 8}, 'w': {-6: 'g'}}}
test(k[-7])
u['b']['j'] = b['n']['b']['x']['w']
d[3]['g'][7][-8]['q'][6] = 'n'
length(g[0][-8]['t'][1])
m[0]['u']['a']['h'][-8][3][0]['a'][3]['c'][-8] = {8: {'e': 'l'}, 'a': {0: 'f'}, -4: {1: 'z'}, 9: {'p': 'a'}, -9: {'r': 'h'}}
test(q['y'][-7]['f'][3])
a[-2][-2]['e'][0][0] = y[0]['f'][5]
y[-4]['t'][1][9] = x['m'][6]
test(q)
length(d[9][7]['f'][2]['f'])
test(s[5])
h['p']['p'][-8][-8][6]['g'] = h[4][8]['d']['r']['c']['n']['p']
test(r[2][-3])
length(u['g']['t']['a']['t'])
test(f['h']['b']['i'])
length(e)
length(v['q'])
v['i']['j']['w']['p'] = v['x']['d']['b']['i'][9]['s']
length(r['g'])
length(y[0][9]['k']['a'])
test(a[8][-9][4][7])
b[-1]['w']['y'] = 3
p[1][-8][1]['e'] = 2
u[-8] = p
test(b['a'][-2]['b'][-5]['s'][1][-5][-3])
length(t[8][5][-2][-4]['r'][1])
length(y[0]['f'][5][-2])
l[-6][-5][-9] = 'v'
r[2][-6][1][-9] = 'j'
length(v[-3])
q['y']['l'][8]['c'] = 7
l[0][6][3]['f'] = 'i'
test(l[-6][-5]['b'][-7][5]['b']['b'])
u[8][-2]['f']['j'][-3]['h'][6][4][-2][-4]['z']['q'][-9][-8] = b['w']
x[-4][6] = {2: {8: {'e': -3}, -4: {'r': -4}}, 3: {'b': 'k'}, 8: {'p': {'d': -9}, -3: {-7: -2}}, 9: {7: 'a'}, 'v': {'n': -8}, 'h': {-1: 'u'}, -4: {1: 'w'}, -1: {-9: -6}}
n['q']['c'][2]['h']['c']['n']['p'][4] = 2
m[3][0]['r'][-9]['w'][-5]['p'][-3]['d'][7]['e']['s'][0]['v'][4] = q['y'][-7]
u[-5]['b'][-4][-9]['n']['x'][-2]['e']['s'][6]['y']['j']['t'] = -7
length(j[5][8])
length(s['m']['k'])
test(e['g'][7][-8]['q'])
x['m'][9][-9]['g'] = 'd'
t['t']['u']['j'] = e[1]['t']['v']
v['q']['i']['u'][-2][-2]['v']['g'][-3][-9][-1] = {-7: {-4: 'w'}, 'c': {4: {'r': 'c'}, -3: {'z': 'm'}, 'f': {7: 'o'}}, 'z': {'d': 'x'}, 'e': {'s': {'t': 4}, 'z': {'r': 'e'}}}
j[5][8]['c'][-9][4]['j'] = g['v']['a']
a[-2][-2]['e']['j']['u'] = -2
q['y']['l']['b']['z'][4] = -3
f[0][1]['u']['g'][0][-8][7]['b'][7][3][1] = f['o'][-9]['l'][9][-4]
test(n[-8]['v'][9])
y[-4]['k']['d'][0] = k[2]['d']
h['p']['p'][-8]['q']['t'] = {'e': {'d': 'q'}, 'g': {2: 'e'}, 'h': {3: 6}, 'r': {'b': 'q'}, -8: {-8: {-5: 1}, 't': {7: 'c'}}, 'z': {'h': 'o'}}
test(u[-2]['b']['f']['m'][8])
s['b']['u']['z'][-9] = 'i'
j['f'][-1]['g'] = {0: {'g': -6}, -9: {'w': 'm'}, 'v': {'s': 9}, -3: {'c': {'q': 'd'}, 't': {-7: 9}}, 7: {-1: {-4: -2}, 'n': {'u': -7}}}
t[-6][-9] = o[4][6]['d'][9]['j']['d']['d'][6][3]
t['a']['h']['q']['c'][2][6] = {-8: {0: {'r': 'b'}, 9: {8: {'v': 'q'}, -4: {6: -6}}}, 8: {'p': {'g': 'q'}, -2: {'t': -7}}, 'c': {-2: 'z'}, 't': {'y': -4}, 6: {0: {-7: 'n'}, -4: {'a': -1}}}
length(i['a'][-3]['f'][-9]['y'][-4][1]['o'])
v['x'][9]['w'] = {3: {'v': -7}, 'f': {-3: 3}, 9: {'y': 'g'}, 'j': {-5: 'g'}, 'o': {'h': 'h'}, 'r': {8: 7}, 'u': {-7: 'y'}, -6: {0: 'g'}}
l[2]['d']['d'][7][-4] = {-2: {'y': 'f'}, 'j': {'r': -7}, 'm': {'f': 7}, 's': {0: 'u'}, 't': {-9: 'y'}, -6: {-7: 0}, -1: {'f': 0}}
d['a']['r'] = {'s': {4: {'d': 'e'}, 'f': {-9: 'g'}}, 'd': {-7: {'r': -5}, -5: {'h': -6}}}
test(j[-1]['s'][0]['v']['f'])
test(u['b']['f']['m'][8])
z[4][7][4] = -4
length(q)
test(r[1]['n'])
x[7] = {'i': {'a': 5}, 'x': {0: 4}, 5: {'r': 6}, 'v': {'w': 'q'}}
w['p'] = g[-1]['a'][-9]['v']['m']
c['s']['e']['t']['y'] = {7: {'x': {'k': {'g': 's'}, 'b': {-2: 2}}, 'r': {'u': -8}}, -9: {'b': {0: 'f'}, -1: {2: 9}}}
length(d['h']['h'][-4])
s['m']['k']['j'] = 1
q['y'][-7][-2] = {1: {'n': 1}, 2: {'c': 'p'}, 3: {'x': 7}, 7: {'s': -8}, 9: {6: -5}, 'w': {'y': -5}, -7: {'c': 'l'}, -6: {'r': 'n'}}
test(d[2][5])
y[0][7][-6]['f']['x']['h']['k'] = f['g']['e']['w'][-9]['w'][-5]['p']['m']['m']
test(u[8][-2][2])
k['w'] = h[3]['i']['r']
d[7][-4][-9]['t'] = -2
length(h['p']['p'][-8][-8]['k'])
test(m['v'][6][6])
z['f'] = v['q']['i']
s['z'] = k[-7]
p[7][2][3]['h'][-1] = 3
y[0][7][-6][2]['h']['h'][6]['s'] = {'h': {3: 'c'}, 9: {'b': {'a': -8}, 5: {-4: {-7: 3}, 5: {'m': 'y'}}}}
n[-8]['r'][1]['y'] = 'k'
s[5][-4] = -8
u[-2]['e'][-1]['f'] = -8
length(o[4]['b'][-5])
w['s']['i'][-9] = j['f']['p'][-4]
o['b'][-2][3][-5] = p[-6][-8]
length(c['i'])
length(e[3]['n'][2])
test(d[7][-4])
length(x[-7][6][-3]['q']['k'][-7])
test(i)
length(q[-1]['h']['a']['f']['e']['s'][6]['y']['j'])
length(l['u'])
s['z'][0] = {-6: {4: {'p': 'i'}, 7: {'k': {3: -2}, -1: {'j': -1}}}, -1: {'o': {6: 'f'}, 7: {5: -3}}}
u[-8][-6]['s'][9]['c'] = {'i': {'p': {2: 7}, 'r': {'e': -4}, -3: {5: {2: 'e'}, 7: {'o': 'r'}}}, 'c': {-8: {-2: 'v'}, -5: {'i': 'f'}}}
d['h'] = i[-8]['j']['o']
length(n['q']['c'][2][6][8][-2])
l['s']['q'] = 't'
test(h['p']['p'][-8]['p'])
g['v'][2][-6]['q']['n'][-9] = 'b'
p[-6][-8][9] = i['o']
length(d['a']['r']['s'])
b['w']['y'] = {-6: {-9: 'v'}, 'b': {-8: -4}, -2: {'k': 'h'}, 'v': {2: 9}}
test(a[8][-9])
n['m'] = 'f'
length(y[0][-1]['l']['r']['r']['s'][6][7][0])
w[-5][7]['o'][-6][3][8]['y'] = 'n'
f['o']['g']['y'] = i['o']['l'][-5]
test(p[-6]['s'][1])
r[1]['n']['e'] = 'w'
e['g']['q']['y'][7][6] = {2: {'q': 5}, 'd': {'f': -7}, 'f': {'m': {'w': 5}, 'l': {'d': -8}}, 'y': {'y': 'v'}, 'x': {8: -3}, -5: {'a': -1}, -1: {'f': -8}}
test(x[-4][6][-1])
r[2]['c']['x'][3] = {'i': {-5: 'u'}, 's': {3: {'m': -8}, 7: {-1: -1}}, -3: {'h': 6}, 'g': {'o': -8}}
test(w['p'])
n[6][-3]['t']['k'][7] = -4
length(e['g'][7]['u'][-6])
length(b['a'][-2]['b'][0][7][1])
c[-8][-6]['m'] = 8
v[-3]['y']['j'] = {'l': {'a': 'c'}, -3: {-2: -5}}
z[0] = y[-4]
i['n']['c'][2][6][8]['p']['p'] = k[1]['e']
length(z[-4][-4])
b['n']['u'] = f['g']['v']
length(w)
n[-8][-9]['a']['n'][9] = a[-2]['d']['h']
length(u)
w['s'][-5][-7] = 'z'
length(g[-1]['a'][-9]['v']['v'])
z['f'][-6][-5]['b'][-7][-1] = 'j'
e[1]['t']['m'] = {1: {'a': 9}, 2: {-1: 'v'}, 'd': {'h': 'v'}, 't': {'t': {3: 't'}, 5: {3: -6}}, 'w': {'p': -4}, 'x': {9: 6}, -3: {'g': 'b'}}
t['t'][-6]['w'][8] = 'c'
test(i[-2]['p']['h']['q']['c'][2])
g['x'] = 4
u['p'][-4][1] = 3
f['l'] = 4
h[3]['i'][-2][2] = -5
w['p']['v'] = 1
p[-1]['h'][-1] = p[1][9]['p'][-9][-3][-5]['r']
y[0][9]['k']['a'][7]['k'] = c[-9]['o']['w']['t']['a']['t']
test(x)
r['g']['l']['r'][5][-1]['t']['f']['n'] = m
test(y[-4]['k']['d'][0])
length(k['q'][-9])
j[-4] = c['s'][-7][8]['d']
f['k'] = r[0][-7]['f']['l'][-6]
v['z'] = 9
length(x[-7][6][-3]['q']['q']['e'])
length(r[7]['d'][9]['j'][9]['c']['v']['a'][3]['k'][-9])
q['m'] = {'a': {-8: {-6: {'u': 'm'}, 5: {'p': -8}}, 'h': {'i': 0}, 6: {'w': 'm'}, 'p': {'g': 'f'}}, 9: {4: {8: {-4: -2}, 2: {6: 'c'}}, 'm': {'a': -1}, -1: {'c': {-5: -2}, 'm': {-5: 'q'}}}}
f[9]['v'] = s['b']['w'][0]
i['n']['s']['s']['p'] = 'x'
l['f']['j'][-3]['h'][4][-7][-8] = {0: {5: -4}, 'i': {'c': -6}, 9: {-6: -6}, 'o': {'h': 'a'}, 't': {4: 'p'}, 'x': {1: 0}, -2: {'s': 'c'}}
a[-2]['l']['w']['i'] = {'z': {-8: {'l': 'f'}, 'h': {-6: 8}, 'o': {-6: 'b'}, -1: {-6: 3}}, 'e': {'p': {'p': 'p'}, -6: {-2: 'g'}, -9: {-7: -8}}}
length(w['c'][2]['h']['c']['m']['m'])
g[5][-1][-3]['d'] = -7
h['h'][0]['r']['s']['i']['p']['f'] = -6
length(e['g'])
length(f['o'][-9]['l'][9][1])
m[3]['z']['o']['y'][-6][5] = {'y': {-5: -6}, 'h': {0: {7: 'b'}}, 'z': {'a': {'k': 0}, 's': {4: 'z'}}, 'j': {3: 't'}}
n[-8]['v'][3][-3][1] = -5
c[-9][-7]['t'][-2]['u'][4] = g[0][-8]['t'][1][9]
d['z'][-9][3][-2] = {'q': {6: -9}, 'i': {'q': {'k': 'w'}, -7: {'t': 'e'}}, -3: {0: 1}, -9: {-1: 7}}
length(z[0][3])
test(m[1]['x']['m'][-7])
j[-4] = {0: {-9: 2}, 8: {'v': 'g'}, 'n': {'r': {'k': 9}, 'j': {-5: 2}}, 'q': {'b': {'u': 7}, 't': {-6: 7}}, -5: {-9: 'd'}, -1: {4: -1}}
t[-2]['a']['l'][-9] = {'i': {3: 't'}, 0: {'u': 'k'}, 'f': {'h': -5}}
h[4]['w']['g'][-1][-3][-6] = 'b'
length(e['g'][7]['u'][1][-5]['b'])
length(n['v']['l'])
length(o)
test(m[3]['z'][-3])
v['b'][1]['d'][-2] = 'v'
g['v'][2]['n'] = 0
b[-1]['n']['u'][-3]['i']['p'][-5] = -5
test(g)
o['b'][-2][0] = 1
t['a']['h']['q']['c'][2]['h']['c']['m']['a']['z'] = 'k'
m[3]['z']['o']['d']['q'] = 'd'
l['m'][-8][8]['x'][0] = 0
p[-1]['h'][-1][-2] = 'z'
test(s['b']['w'][3])
w['s']['a']['x'] = 6
b[-4] = g[-6]
y[-4]['t']['k'] = -5
length(l)
x[-4][6][-4] = y[-4]['t']['g']
w[4][-1] = 'a'
b[-4]['b'] = b['w']['y'][-2]
test(m[-5]['s']['g'])
r['g']['l']['r'][5][-1]['t'][-5][-2]['u']['i'] = 7
v['b'][-3] = y[0][-1]['y']['b'][-1]
f['l'] = -4
test(r[2][-6][1])
z[4][7]['u'] = 6
z[0][3][-2]['z']['x'][8] = {0: {-8: 'l'}, 6: {-5: 'b'}, 'k': {'j': 6}, 'l': {'t': 1}, 'q': {5: {'b': 'z'}, 'g': {'j': 8}}, 's': {-7: -9}, -1: {-4: 'h'}}
test(j['w'])
w['p'][5] = 'i'
o['p']['l']['r'][5][-1]['t'] = r[2][-6][1]
r['v'][4]['e']['v']['h'][9] = 'q'
f['o'][1] = {0: {2: 'l'}, 9: {-5: 'w'}}
n[-8]['v'][3][-6][-6] = 'p'
test(i[-2])
c[3][9] = 'f'
test(u['m'][4][-2][-1]['o'])
l[2]['z'] = -2
length(x[-7][6][-3]['q'])
p[-1][3]['g'] = d[3]['t'][-3]
v['q']['i'][2]['d']['b'][-2] = 5
b['n']['u'][-3]['i']['p'][1] = -1
t[-6][3][6][1][-3] = -2
r[1]['n']['h'] = e
n['v']['l'][2]['j'][9] = 6
test(m[3][7]['e']['y']['f'][0])
p[-6]['d'][-3] = 'p'
test(r['v'][4]['e'][0][-8]['k'])
length(l['a'][5][-6][-6][0]['r']['s'][6][7]['w'])
length(f[0]['d']['t']['s']['f'][-8])
b['n']['a']['g'][-2]['f']['n'] = {0: {'n': 4}, 2: {'i': {'j': 'a'}, 'g': {'q': -9}}, 'b': {2: {6: -6}, -3: {'s': 'm'}}, 'l': {2: {'i': 3}, 3: {-3: -4}}, 6: {3: 'c'}}
z[0]['k']['d'][0][-6] = p
test(n['q']['c'][2]['h']['c']['n']['p'])
test(n['v']['l']['f']['i'][2][8]['b'][1][-2])
z[0]['t'][1][9]['r'] = r['g']['l']['r'][5][-1]['t']
test(e[1][6][6][9][-5])
d['z'][6][5] = {-6: {'r': -2}, 'z': {'k': {5: 'n'}, 'u': {'c': -6}}, 'd': {'r': {'c': 0}, -3: {-8: 5}, -2: {'o': 'j'}}, 'g': {2: 'b'}}
j[-1]['s'][6]['q'][-1] = {8: {-1: 0}, 'k': {'r': -8}}
length(s['b'])
l[0][6]['s'] = {'z': {2: {-2: -2}, 'b': {'s': {5: 'e'}, 6: {3: 6}}, 'e': {-3: 8}}, 6: {-6: {'j': 'o'}, 's': {8: {'e': 5}, -1: {0: 4}}}}
h['h'][0]['r']['s'][1]['s'][-5][-9] = {'y': {3: {'u': 2}, 'u': {'t': -5}}, 9: {9: 'i'}, 'k': {'z': 'f'}, 3: {'s': 's'}, 5: {1: {'m': 'm'}, 5: {'n': 'x'}}}
n[2] = -2
c[8][3][7] = i['n']['p']
length(h[4]['w']['t']['k'][5]['y'])
length(y[0]['f'][5][-2][-2]['d']['z'])
length(n[6][-7]['f']['o'][0]['q'])
y[8] = {'e': {-6: -2}, 'g': {-3: -6}, 9: {4: 'h'}, 'o': {'c': 2}, 'p': {-2: 's'}, -3: {'x': 0}}
length(q['m']['a'][-8][5])
length(d['a'])
test(q['y']['l'][8])
test(g[8])
l[-9]['b'][0][4][-7][-8]['t'][4] = j['f'][-1]['g']['v']
test(w[4][2])
test(k[-3]['i']['x'])
length(d[2])
a[-2][-2] = 'x'
e[-6] = n[6][-3]['t']['p']
g[-1]['a'][-9]['v']['m'][2] = {'a': {'y': {'a': 9}, 'm': {3: 'w'}}, 3: {7: 'b'}, 4: {-2: 'w'}, 5: {'b': 4}, 6: {-6: -1}, 'h': {'k': 'u'}, 'q': {9: -6}}
test(r['v']['a'][-3])
length(b[-1][-4]['b'])
test(x[7]['i'])
test(k[-3]['i']['m'])
i[3][6]['t']['s'][-7][-8][-2]['u'] = w
test(n['v']['l'][2]['j'])
a[-2]['d']['z'][8] = {-8: {'p': 9}, 'i': {4: 1}, 'c': {-7: 6}}
length(a[8][-9][4])
z[-4][6][6]['r'][-5] = 'b'
length(y[8][-3])
length(a[8][-9][4]['n'])
w[-5][8] = u
test(i['o']['l']['u'][-5])
test(r[2][-6][9])
length(r[7]['d'][9]['j'][9]['c']['v']['a'][3]['k'][-9])
b[-4]['b'][-9] = {8: {5: 'z'}, 9: {6: -4}, 's': {'z': {'v': -7}, -1: {'x': -8}}}
a[-2]['d']['z'][8] = 0
test(t[-2]['a'][-6])
t['t'][-6]['m']['i'] = z[4]['w']
l[0][6]['s'][6]['s'][-1] = d[7]['t'][-7]
d['z'][-5] = h[4]['w']['t']['k'][5]['y']
d[1]['g']['h']['m'][2][-6][-9][5] = 'q'
test(e)
length(h[4]['w']['t']['k'][5][-9])
h[3]['i']['a']['k'][7][-7]['i'] = {0: {-1: 1}, 's': {0: -1}, 'z': {-9: -5}, 'u': {'b': -3}, 'g': {-2: 'z'}}
z['f']['u'][3]['h']['q'] = {'p': {'i': {'b': 'y'}, 'g': {1: -1}}, 'v': {5: -1}}
m[0][-7][-9][6][2] = k[7]['o']['x'][2]
u[-8][-2][5] = i['n'][-5][7]['o'][-6]['o'][-1]['r']['m']['f']['s'][-9]
p[7][2][8]['b'][1]['y'][8] = q[-1]['v'][-3]
z[4]['w'][3] = e[-6]
v[5]['d'][9]['j'][9]['c'][-8]['d']['x']['j'][5]['o'][-8] = 'q'
y[8][9][4] = -2
w['c'][2][-2] = u['p'][7]
length(e)
test(e[3]['v'][0]['p'])
k['q'][8] = 4
test(m[3]['z'][2]['p'])
a[8][-9][4][7][0] = z[4][7]
test(j)
length(z)
m[0][-7][2]['f'][1][-7] = k[-8]['f']['y']
q['y']['l']['b']['z']['y'] = 'z'
c[3]['b'] = {0: {-6: {'m': -5}, -3: {4: 1}}, 'y': {8: 3}, -6: {'a': 'r'}, -5: {'p': {'x': 'w'}, 'b': {3: -2}}, 'o': {-5: {6: 'l'}, 'd': {4: -9}}}
length(b['a'][3]['c'][-8][-4])
w['s'][-9]['z'][-1] = 'j'
r['g']['l']['r'][5][-1]['t']['f'] = f['g']['e']['w'][-9]['w'][-5]['p']['m']['p']
length(b[-1]['a'][3]['u'])
test(d[2][2][-9][-5][-2][7])
test(p[-6])
test(y[-4]['t']['g'])
o['p']['l']['r'][5][-1]['t']['f'][7] = {'b': {'u': {-9: 'z'}, 'l': {'d': {4: -7}, 'l': {'r': {'m': 'r'}, 'g': {'h': 7}}, -9: {7: 'q'}}}, 'm': {-8: {'d': 'k'}, 'y': {'a': {'n': 5}, 9: {'b': 7}, 'n': {'z': 3}}}}
s[5][-8] = o[0]
t[8]['b'] = 7
b[-4]['b'][-9][9] = 'g'
w['c'][2]['h']['c']['n']['p']['l'] = 'w'
q[-1]['m'] = 'd'
p[1][9] = {-9: {'o': -9}, 'v': {-4: {-8: 'f'}, -1: {'r': 4}}}
i[-2][5][-3]['h']['t'][5][-5][-5]['z'] = h['h'][0]['r']['s'][-7][8][2]
length(n[6][-7])
t[-6][3]['z'][-6] = 8
e['g']['q']['y'][6]['n'] = 'b'
i['o']['l'] = 'm'
test(z[4][7])
l[2]['d'][-2]['y'][-5] = m[-5]
length(j[5][8]['c'][-9][4])
test(z[4][7])
w['s']['z'][0] = m[0][7][1]['u']['x']
test(m[3][-4][-4])
j[-1]['s'][0]['v'][4][9]['t'] = h['h']
length(v[5]['y']['b'][-1][2]['e'])
p[-1][3]['u'] = 'y'
length(k[1]['d']['w']['m']['h'])
z[0]['t']['g']['d'] = {'d': {-2: {'b': 9}, -1: {'b': 'e'}}, 8: {'n': 'c'}, 'k': {9: 3}, -9: {'i': {'p': 'e'}, -4: {1: 8}}, -6: {'x': {'i': 'j'}, 9: {9: 9}}, -3: {-3: 'c'}}
z['f']['a'][5][-6][-6][0][-2][3][7]['c'] = -7
s['z'][0][-1][7][-3] = w['p'][2][4]
n['q'][1]['d']['w'] = -3
test(t[8][5][5])
length(f['o'][-9]['y']['a']['c']['z'])
h[4][8]['d'][4]['o']['t']['u'] = 'y'
length(o['b'])
length(d[9])
f['g']['n'][-2]['n'] = d[7][-4][-9]
length(f[9]['v'])
w['c'] = p[-6]['d']
length(q['y']['l'])
u['b']['f']['m'][2]['h'] = {-8: {-7: 8}, 'j': {'s': 'a'}}
v['i']['j']['k']['r'] = {3: {'j': 0}, 'e': {'t': 'r'}, 5: {-6: 'l'}, 6: {3: 'l'}, 'f': {-9: -9}, 'y': {'v': 8}, -7: {'a': {'i': 'p'}, 1: {-8: 'c'}}, -3: {'i': -6}, -1: {'r': 'u'}}
length(u[5]['m'])
e['a'][-6]['d'][1]['g'] = 'f'
test(f['k'][5]['t']['g'])
length(h[4]['w']['t']['k']['j'][9])
p[-2][-5] = 0
o['p']['l']['r'][5][-1][-1] = 6
r[0][6][0]['s'][5][0]['o']['n'] = {8: {8: 0}, 6: {-6: {6: 'y'}, -5: {'o': -7}, 'o': {'f': 'q'}}}
test(p[1][9]['v'][-1])
l[2]['d']['d'][7][-4][-1][-5] = 'a'
d[2]['a'] = r['g']
length(x[-7][6][-3]['q']['k'][-7])
length(k)
y[0][-1][4][4]['f'] = o['p']['l']['r'][5][-1]
t['z']['f'][2]['v'] = {0: {7: -9}, 'g': {'l': 'l'}}
u['m'][4][-2][-1]['o']['h'][1]['t'][8]['g']['j'][-1] = {'e': {4: 1}, 'g': {'a': 2}, 'i': {'g': {'w': 'm'}, 7: {'p': 's'}}, 's': {'p': -9}, 'u': {'d': 't'}, 'w': {'w': 'v'}, 'z': {'a': {0: 5}, 'k': {'q': 'm'}}, -2: {4: 3}}
test(y[8]['o'])
p[1][-8][4]['z'] = -7
b['a'][-3] = {0: {'a': 'x'}, 'b': {'i': 9}, 5: {'g': 'n'}, 6: {5: 'g'}, 'p': {'f': 's'}, 3: {-7: 'y'}, 't': {'s': 'h'}, -5: {-6: 'h'}, -3: {'x': -6}}
test(l['m'][-8]['s']['e']['t'])
y[0][-1]['d'][9]['j'][9]['c'][-8] = q['y'][-7][-2][2]
a[8][-9] = {1: {-9: 't'}, 5: {'l': 3}, 'f': {-4: 'j'}, 'h': {'v': 'i'}, 'o': {'r': 'l'}, -7: {'i': 'u'}, -6: {5: 'a'}, 'z': {'f': 'v'}}
test(j['f']['g']['q'])
r[7]['d'][9][-9]['c']['z']['g'][-8] = -8
r[0][-6][7][-3][-7] = 'g'
k[7]['o']['h']['a']['v'][-5]['p'] = {-6: {'y': {'c': {-1: 'm'}, -3: {6: -4}}, 'h': {'b': 'a'}, -2: {'a': {'q': {9: 'a'}, 9: {-4: -5}}, 'c': {'x': 0}}}, -9: {-3: 'y'}}
d[9][6][-3]['q']['k'][-9]['a'] = -1
r[0][-7]['f']['l'][-6][5]['t'][7]['c'][-5]['d']['l'][-6][5]['t'][-8]['c']['f'] = q[-1]['h']['a'][-4][6][6][-6]['b']
length(i['n']['c'])
test(m[1]['e'][-1][9][6])
c[-8][-6]['f']['x']['x']['t'] = 8
length(t[-6][-2][2][-9]['v'])
i['o']['v'] = -1
test(p[-6]['d'])
x[7][5]['r'] = p[-6]
test(o['b'][4])
h[3]['i']['r'][3] = {1: {1: -2}, 2: {'b': 'i'}, 'g': {'x': 'k'}}
g[8][-1]['n'] = g
length(p[7][2][3]['v'])
f['g']['e'][-6]['g'] = e[3]['v'][3][3][3][5][-5]
test(i[-8][6]['k'])
t['s']['i']['q'][-6] = {'a': {'q': {-9: 'g'}, 2: {'w': 'v'}, 'k': {-4: 'g'}}, 4: {0: -8}, 'w': {9: {3: 'n'}, -4: {-5: -3}}}
m[1]['x']['m'][-7] = 's'
length(s['m']['t'])
test(k[7]['o']['d']['w']['o'])
test(m['v'][6][6]['w']['w'][0]['c'][7])
u[-2][8][-2][-6]['n'] = 'g'
q['m'][3] = c[8][3][7][2][3]
s['z'][0][-1]['o'][6] = {'y': {-5: 'j'}, -3: {-6: -9}}
l['s']['v']['p']['d']['l'][-6][5][-4]['u'][2] = {'x': {-6: -8}, 2: {'c': 'j'}, 's': {-4: 0}}
length(x[-4][6][8][-3])
d[3][-6]['z'] = {'c': {-7: {'n': 'm'}, 't': {-3: 'g'}}, 7: {'q': {-5: -6}, 'e': {-4: -1}, -1: {'u': {0: 'c'}, -3: {'j': 9}}}}
length(w['c'])
f['h']['g']['m'] = p[-6]['s']['o']
q['y']['l']['b']['o'][7]['f'][-1] = -1
test(b[-1][-4]['b'])
length(b['a'][3][-7]['d'])
u['o'] = -9
o[0]['d'] = 5
k['w'][3][1][1] = -1
x[-9] = 4
s['z'][-5] = 'v'
length(g)
test(q['y']['l'][-5]['q'][-9]['t'][5])
m[-5]['r'][-8]['t'][1][9]['r']['f'][7]['b']['l']['l']['g']['p'] = e[3]['n']['w'][-1]
g['s'][-8][-2]['z']['h']['s'] = l['a'][5]
length(s['b']['u']['z'])
x[-4][-8] = {'c': {-6: {'y': -2}, 3: {'q': -8}}, 'd': {'r': {'a': 'a'}, 3: {-6: {'t': 'o'}, 'n': {6: 's'}}}}
c['s']['e']['t']['u']['n']['j'] = m
p[-1]['y'][8][-6]['t']['o'][-7] = i[-8][6]['k']
test(d[3]['t'][-3])
t[-5][-4]['a']['q']['n'][-9] = 7
z[-7] = {'y': {-8: -5}, -7: {9: {'i': 'm'}, 3: {4: 'w'}}, 't': {0: {-5: 'b'}, 1: {'v': -1}, -4: {4: 'k'}}, 'o': {-6: {-9: -1}, 'k': {-1: -8}}}
length(n[6][-3]['t']['p']['z'][7]['e'])
test(x['m'][6]['r']['f'][7]['b'])
length(j['p']['x'][-6]['p'][-9])
test(v['r']['l'][-9])
v['r']['l'][-9]['o'] = {9: {'i': {'h': {'i': 'c'}, 'd': {4: 8}}, 6: {'i': {'p': 'z'}, -9: {'m': 'i'}}}, 'h': {3: {'s': 's'}, -1: {'l': 'z'}}}
s['b']['w'][3]['z'][7]['q'][-3] = 3
test(w[-5]['o'][0])
z[-4][8][0]['b'][-9][-9][-2][1][-9]['m'] = l['s']['f']
q['y']['l'][8]['e'] = n[-8]['p']['e']
length(h[3][2]['q'][2]['h']['c']['n']['z'])
test(o['p']['l']['r'][5][-1]['t']['f'])
f['o']['g'] = 'l'
x[-4][-8]['c'][-6]['e'] = 3
q['m'][3]['r'] = b[1][2][8]['x']
h['i'] = 8
length(z)
test(p[-6][-8][9])
m[-5]['r'][-8]['u'] = 8
d[9][6][-3]['q']['k'][-9][8] = -4
i[-2][5][-3]['h'][1][-6][2]['t'] = 'u'
a[-2]['d']['z'][6] = -7
n[6][-7][4]['l'][-4] = -7
length(x[7]['x'])
test(b[-1]['a'][3][-7]['d'])
i['o']['l'] = d[7]
l['e']['s'][0]['v'][4][9]['t'] = p
q[-1]['e'] = i['a'][-3][-7]['y']
f[9]['o'] = f['o']['w'][-5]
length(g)
j['t']['d'][-6]['b']['t'][5] = {-4: {-8: {'n': 0}, 'b': {-3: {-7: {'d': 7}, 6: {'o': -1}}, 'w': {-4: 'd'}}}, 'e': {'y': {9: 'g'}, 9: {'m': -1}, 2: {-5: 'g'}, -4: {-4: 7}}}
test(g[5])
c['e'][7]['r'] = h[3]['i']['a']['k']['y']
m[1][0][9] = 4
n[-8][3][0]['w']['y'][-6][-9] = 'm'
n['q'][1][2] = 4
j[-4][8]['v'] = 2
test(h['p'])
i['o']['l']['t'][-7]['v'] = f['g']['v'][3]['e'][5]
r[0]['r']['g'] = 'z'
c[3]['b'][-5]['p'][9] = 3
test(s[5][-8])
length(t[-9]['g'])
b['n']['b']['x']['z']['h'] = 'f'
test(g['i'])
p[-2][5][-8] = 6
n[-8][-9]['a']['n'][9]['k'] = l['e']['s'][6]
r['v'][-7][1]['u'][-2][2]['d'][-2]['y'][-8] = h
i['a'][-3][0] = {'m': {'k': -7}, -3: {-2: 'z'}, 6: {-5: 7}}
b[-4]['b'][-9]['s']['z']['v'] = 'q'
h[3]['g'][1][-7][-2][-1] = c[8]['x']
test(r['v'][4]['b'])
test(m)
test(y[8][9])
q['m']['y'] = -9
g['n'][-4][0]['g'][-4] = {6: {9: {-1: {'b': 'd'}, -2: {9: 3}}, 'r': {1: 5}}}
o[0]['d'] = -9
test(h['p']['p'])
l[-6][-5]['b'][-7][5]['i'][-2][9] = {9: {6: {'n': -1}, 'v': {'z': -6}}, -6: {'q': {-9: 'n'}, 'd': {'p': 1}}, -1: {'q': 9}}
length(q['y'][-7][-2])
l[-9]['b'][0]['t'][5][4]['c']['f'] = 3
r['g']['l']['r'][2] = 'r'
c[3]['b'][-5]['b'][3] = {-6: {2: -5}, 'r': {'y': {'q': 'm'}, 'v': {'k': 'n'}}, -9: {'b': 'w'}}
length(i[9][-8]['y'][6][4])
test(g[-1]['a'][3][-8][-1])
v[5]['v'] = 's'
c[-9][-7]['t'][-2][-1] = {'l': {'y': 1}, 5: {-5: -6}}
z[-7]['o'][-6][-9] = {9: {'j': {-9: -6}, 'l': {'z': 'm'}}, 'k': {'z': 7}, 2: {-5: {-2: 'j'}, -9: {0: 7}}, 5: {8: -5}, -2: {'p': -4}}
length(a[-2]['d']['z'])
e['t']['z'][0][1] = {-8: {-4: {-2: -3}}, 'r': {'i': {'v': 4}, 'u': {'c': 'k'}}, 'z': {'s': {'c': 'q'}, -9: {'s': 's'}}}
b[1][6][-6][5]['v']['f'][-8][3][3]['d'][-4]['n']['x'][-4][-9]['c'] = w['s'][-4]['g']['a']
j[-4]['n'] = 'p'
test(j[5][8]['i'][-9][5])
t['z'][5]['l'] = 's'
u[8][-2][-6][-5]['b'][-7][5][-4][1] = 5
r['v'][4]['b']['y'][-6][-7][0][0] = {'a': {6: 5}, 'k': {'e': -2}}
test(b['w']['y'][-6])
length(p[-6][-8])
q['m'][3]['r']['e'] = -5
s['m'][8]['r']['i']['b'] = 7
i[9][-6]['q']['y'][-6]['x'][8]['n'][-7] = 'b'
test(p[-6]['d'])
t[8][5][3][9] = e['a'][-6]['d'][1]
f[9]['v'][1] = 'b'
test(s[5][-8])
test(i['a'][-3][-7]['o'][-6][-9][2])
test(u['m'])
length(z[4][7])
test(f['h']['f'])
j['w'][7]['p']['b']['i'][9]['u'][9] = -7
l[-5] = s
test(k[-3]['i']['m'])
m['v'][6][-6][1] = -4
length(h[3][2]['n']['i'][7]['x'][-4])
i[-2] = 'v'
t[-1][6][4][-9] = {'y': {'r': -9}, 'j': {8: {-2: 5}, 'e': {8: 2}}, 'g': {'l': 'g'}, 'v': {'t': {8: 8}, 'f': {'l': -4}}}
u[5]['r']['r']['w'][-7] = u['m'][4][-2][-1]['o']['h']['t'][-5]['r']
j[4] = 3
length(m['v'][6][6]['w']['w'][0]['c'][7])
a[8][-9][1]['j'] = 'y'
length(m['v'][6][-5][9][-8][-7]['f']['o']['n'])
length(c['i']['n'])
v['b'][-3]['c'][6]['a'] = 'p'
test(n[-8]['v'][3][-3])
a['j'] = m[0][7][1]['u']['x']
u[8] = -4
z[0][6][-5] = {'x': {'q': 'r'}, -7: {-1: 'i'}, 6: {9: {9: 'o'}, -1: {'u': 'k'}}, -2: {3: {1: {7: 'y'}, 5: {8: 'l'}}, 'l': {8: -1}}, 'f': {'b': {'e': 'f'}, 'z': {'y': 3}, 't': {'a': 'u'}}}
o['b'][-2][3][-5][9]['l']['t'][-7]['v'][-9] = {-7: {'i': {'j': {5: 'd'}, 'd': {'g': 'p'}}, 'b': {5: 'b'}, 4: {-6: {8: 'h'}, 'j': {-2: 7}, 'd': {1: -6}}}, -9: {8: {'y': {'b': 5}, 'w': {'z': 'd'}}, 'z': {'k': {'q': 'm'}, 4: {-8: -7}}}}
b[1][8]['b'][1]['s']['q'] = {-8: {2: {'x': 'f'}, -1: {-6: {-3: 'x'}, 'n': {'f': 'b'}, 'f': {'x': 0}}}, 'z': {8: {'x': -6}, 'x': {-9: 0}}}
s['y'] = -5
test(a['j'])
test(h['p']['p'][-8]['q']['t'][-8][-8])
z[-7]['t'][1]['x'] = x[-4][-8]
length(u[5]['m'])
test(m[0])
length(z['f']['e']['s'][0]['v'][4]['f'][-5]['n'])
z[0][6][-5]['x']['q'] = {0: {1: 2}, 'e': {-3: -4}, 7: {-2: -8}, 'l': {-6: 1}, 'n': {'o': 6}, -7: {-7: 'r'}, -2: {-3: -1}}
length(p[-2][5])
e[1][-9] = 'j'
e['t']['z'][0][1]['r']['b'] = {-8: {9: 'u'}, -1: {'m': 8}}
e[-6]['z']['c'][-7]['t'] = {0: {-3: 'j'}, 6: {2: 8}, 7: {-6: 's'}, 'k': {'a': 'j'}, 'j': {-9: -9}, 't': {-3: -3}}
h['p'][9] = 'r'
test(h['p']['p'][-8][-8]['n'])
w[4][2][6]['t']['y'] = -9
p[1][-8][8]['c'] = {9: {-9: 2}, -1: {3: {'i': 7}, 4: {'w': 'i'}}}
test(q[-1]['v'])
length(w[-5])
s[5] = 'c'
t[-5]['l'] = {'z': {4: {-8: -6}, 'd': {1: 7}}, 5: {'i': {-8: 8}, 'b': {3: 'd'}, 'o': {-1: 'q'}}, 'g': {-5: {-7: -3}, 'z': {'r': 'a'}, 6: {-5: -1}}, 'f': {-2: 0}}
e[3]['n'][2][-5]['i']['l'] = -1
f['h']['b']['i'][1] = e['a'][-7]['f']['o']['n']
a[8][-9]['f']['m'] = 5
y[-4]['t'][1][9]['r']['f'][7]['m']['y']['n'] = {9: {'z': 'l'}, 'm': {-2: {'z': 'i'}, 'g': {-8: -1}}, 'r': {'s': 'k'}, 'u': {-3: 'l'}, -8: {-6: 'k'}, 'x': {-3: 'e'}}
f['k'][5][-4][-7]['h']['w'] = 'p'
h['h'][0][-2][3] = 'r'
test(p[-1])
test(v[6])
v[-3]['y'][4] = {0: {9: {-7: -6}, 2: {8: 'u'}, 5: {-7: 9}}, 'u': {'e': {'k': 'k'}, -2: {'x': {'k': 's'}, 'b': {-5: 'n'}, -1: {8: 'q'}}}}
v[5][4]['g'] = a['j']
length(z)
y[8][-4] = {1: {'i': 4}, 7: {-7: 'i'}, 'i': {-1: -7}, 's': {4: -3}, 't': {-6: -7}, -5: {'a': -2}}
test(k['b'])
length(c[8])
a['j'][1] = {'u': {'s': {'s': {'t': 'l'}, -5: {2: -3}, 6: {-8: -1}}, 'u': {-8: 8}}, 7: {'i': {1: 'n'}, -5: {7: 0}, -4: {'e': 'm'}, 7: {-1: -4}}}
i[9]['g'][-3] = i['n'][4][2]['h']['c']['m']['m']
k[-8]['q'][-1] = 's'
q['m']['a']['h'] = r
a[-2]['d']['h']['k']['y'][-5] = j['p']['x'][1][7]
test(y[0]['f'][5][1])
length(s)
test(g[0][-8]['k']['d'][0][-6][-6][-3])
length(e['a'][-3]['t'])
r['v'][4]['b'] = -1
y[0][7]['f'] = a['j'][1]['u']['s'][-5]
v['r'] = u[-2][-5]['o'][3][0][-3]
test(z[-4][-4])
k[-3]['i']['x'][-5] = 'm'
u['e'][-1]['f'] = 'g'
length(p[-2])
f['l'] = -6
test(q['y'][-7]['f']['h'][-5])
length(i[9][7]['c'][-5]['d']['l'][-6])
a[-2]['d']['h']['k']['u']['m'] = h['h'][0][-2]['z']['e'][9]
test(k[-7])
j[5]['u'] = h['p']['p'][-8]['q']['t'][-8][-8]
g[3]['l'][-8]['b']['i'] = 'm'
length(m[0]['u'][-1])
r['g']['l']['r'][5][-1]['t']['f'][7]['b']['u'][-9] = {8: {-9: 'i'}, 'j': {2: -8}, 'g': {'h': {'n': 'p'}, 'u': {-3: 'a'}, 'g': {'x': 'd'}}}
test(l[-6][-5]['b']['k'])
test(z[-7]['t'][0])
l[-5]['b'][7][1] = r[1]['n']['h'][1][6]
test(j)
r['g']['l']['r'][5][-1]['t']['f'][7]['m'][-8]['d'] = s['m']['t']['r']['s']['f']
test(p[1][-8][-9][7])
k['b'][-7] = -1
l['s']['a'][-1]['a'] = 'w'
w['c'] = {8: {'m': 'y'}, 's': {-1: {5: -7}, -9: {'e': -8}}, 't': {-6: 7}, -1: {'z': 8}, 'v': {8: 8}}
q[-1]['e'][-6] = w[4][2][6]['t']
l[2]['d']['t'][-7][-5][0] = u['g']['t']['a']['t']
test(t[-9][-3])
test(i[3][6]['t'][3])
test(m[1]['x']['m'][8])
p[1][-8]['t'][-7] = x[7]['v']
length(p[7][2][6][-6])
q['y']['l']['b']['o'][7]['f'][-8] = 'k'
o['f'][-4][-4]['f'] = m[1][-7][-1]
length(g['n'][-6][-8])
m[3][7]['c'][-4]['l'] = 6
test(a[-2]['d']['z'])
r[1]['n']['h'] = {-6: {'x': 'n'}, 7: {8: {-7: {'f': 2}, 7: {'q': 8}}, -8: {'x': 6}}}
l[-4] = 'j'
length(m[1]['x']['m'])
test(e[3]['n'][2][-5]['i'])
v['i'][9][-8] = {3: {'y': 8}, 5: {'n': -2}, 'g': {0: {'n': 'v'}, -7: {'t': 'a'}}, 'h': {'w': 't'}, 'v': {'h': {9: 's'}, 4: {-8: 'r'}}, 'y': {'n': 7}, -2: {'c': {'f': 1}, 4: {-6: 8}}}
o['f'][0]['r'][-9]['w'][-5] = 'r'
z[0][-3][-3] = r[0][5]['a'][-4][1]
length(x[-4][6][9])
c['s']['e']['t']['u']['q']['e'] = {2: {-9: -9}, 6: {'x': 'h'}, 'g': {'u': 7}, 'f': {'u': 'g'}, 'j': {9: 'z'}, -9: {'f': -1}, -8: {'g': -8}, 'z': {'o': 6}}
q[-1][-6][0][-3][-6] = {8: {-1: 'b'}, 'j': {3: 3}, -3: {-9: -8}, 6: {8: {'s': 'e'}, 'p': {0: 'l'}}}
v[-1][-9]['g']['l'] = 'l'
test(v[5]['l']['r']['r']['s'][-7][8][2])
test(o)
d[1]['g']['h'][-5]['i']['a']['k']['q'][-4]['x'] = {3: {'u': 'g'}, 'i': {'o': -7}, 'h': {'y': {5: 2}, 9: {'l': 'r'}}, 'l': {-6: -7}, 'w': {3: 'y'}, -9: {-6: -1}, -8: {'e': 'x'}, -3: {-7: -2}}
length(a[-2]['l'][-8])
r[7]['l']['m'] = {'s': {0: 'i'}, 5: {'k': 'n'}}
j['f'][-1]['g']['v'][0] = i['o']['l']['t'][-7]['v'][-9][-7][4]['d']
x[-4][-8]['d']['r'][7] = {'e': {-1: 'h'}, 'g': {'i': 'm'}, 'j': {'a': 'q'}, 'q': {'q': 'b'}, 's': {'r': -3}, 'r': {-4: 9}, -2: {-8: 't'}}
test(m[3][0]['r'][-9]['w'])
h[4]['b'] = 'r'
u['e']['z'][8][-1][5][-1]['t']['f'][7]['m']['y'][9] = {2: {'p': {'v': {-6: 'n'}, -9: {-3: -3}}, -4: {-4: 7}}, 3: {-8: 'u'}}
test(q['y']['l'][-5]['q'][-9][-5][7])
j[-4][-5]['i'] = 'v'
test(y[-4]['k']['d'][0])
y[0][9] = i[3][6]['t']['s'][-7][-8]['i']
v['b'] = 'e'
h['p']['p'][-8][5] = 7
test(m[1][0][7])
l[-5][-4]['f']['m'][5]['c'] = {'y': {-2: -2}, 'u': {-2: 'l'}, 'c': {'p': 'v'}, 4: {3: -1}, 'w': {'p': -9}}
z[-4][8][0][-5][7][6][4]['k']['t'] = 2
test(k['w'][3][1])
c[3]['b'][-6][-5] = p[-6][-8]
length(p[1][9][-9])
test(h[4][8][9][-9])
v[5]['l']['m'][5]['k'] = 'e'
w[-5][8]['e'][-1]['d'] = -3
q[-1]['b']['v']['l'][2]['j'][9] = -6
k[-7][0][-6][7]['k']['p'] = i['n']
test(m[3][7]['e']['y']['f'][0][-1]['n']['a']['g'][-2][-8])
h['h'][0][-2]['z']['e']['r']['u'][-4] = s['b']['u'][7]['s']
b[-1]['w']['y'][-2][-9][8][5] = 'f'
a[-2]['l']['c'] = 'l'
u[5]['r']['d']['m'] = 9
y[-7] = 4
c['e'][1][3]['a'] = 'h'
d['a']['y'] = 1
test(s['b']['w'][3]['z'][7][-1][-3])
d[9][7]['e']['q'][-8] = {'y': {'s': 'm'}, 'k': {'t': -1}, 'e': {'y': 'm'}}
g['v'][2][5][-7] = 'd'
j['f'][-1]['g'][0] = g
m[1]['x']['m'][8][1] = 9
test(t[-5]['l'])
a[8][-9][5][-1] = p[1][9][-9]
test(q['m']['a']['h']['v'][-7][1]['u'][-2]['s']['v']['p']['d']['l'][-6]['l'])
b[-1]['n']['u'] = {'m': {'e': {'q': {'n': 'f'}, 'v': {'s': {0: 'p'}, 7: {-4: 4}}}, 'o': {'y': {'k': -8}, -1: {-7: 7}}}, 'g': {'j': 3}, 'w': {8: {-8: {-2: 8}, 8: {'m': 1}}, -1: {1: 4}}}
test(d)
x['m'][-5]['l']['k'][-9] = 8
j['t'] = -7
test(a['j'][1]['u']['s'][-5])
i[9][7]['c'][-5]['d']['l'][-6]['l'][6][-4]['f']['f'] = -4
v[-1][4] = 'w'
length(o['b'][4])
length(v['r'][5]['t'])
length(y[8]['e'])
p[-2][5][-8] = s['m'][8]['u']['b']
test(u['e'][-1])
u['m'][4][-2][5]['c']['n']['z'][-9] = -8
r['g']['l']['w'] = {-3: {-7: 'b'}, 7: {'e': 5}}
a[-2]['d']['z'][8] = 8
test(q['m'][9])
test(l[0])
x[-4][6][9][7] = {-7: {'i': {-9: 3}, -5: {2: 's'}}, 9: {'v': 0}, 6: {'y': {'c': 'a'}, 'k': {'z': 'y'}}, 'n': {-2: 5}}
h[4][8][9][-9][-6]['v'] = 'n'
length(v['x'][9]['w']['u'])
g[3]['l'][-8][4]['h'][3]['g'] = {'q': {'n': 'g'}, 'a': {2: {9: -2}, 't': {9: {'d': 'f'}, 'd': {-7: 3}, 'p': {'d': -6}}}, 2: {'b': {'b': 'a'}, 'f': {'p': -2}}, 'j': {-6: 'i'}, 'u': {'j': {'k': 3}, 'w': {1: 'p'}}}
a[-2]['d']['h']['k']['u']['m'][3] = {5: {'s': 'l'}, 'f': {'y': -7}, 'o': {'u': 9}, -8: {1: 2}, 'z': {'s': 'e'}, -1: {-2: 'x'}, 'd': {'m': -2}}
i[9][-6]['q']['p']['b']['r'] = m['v'][6][-6]
k['q'][-9][7][-9]['b'][0]['t'][5][-5] = 'z'
length(o['f']['z'][2]['t']['t']['j'])
length(o['b'][-2][3][-5][9]['l']['t'][-7]['v'][-9][-9]['z'][4])
k['w'][3]['g']['g'] = k[1]['d']['w']['m']['h']
c['i']['n'][-8][3]['i']['u'][9]['g'][-3][9] = {'m': {'u': {'k': 'v'}, 5: {2: 'r'}}, -6: {'h': {-6: {'t': 'y'}, 7: {8: 't'}}, 2: {7: 'e'}}, -5: {5: 'd'}, 'u': {'v': 'b'}, -3: {3: 4}}
test(p[7][2][-7][1][4])
test(p[1][9]['v'][-1])
c[-8]['f'][2] = 'x'
m['v'][6][-6]['l'] = {'j': {8: {1: 'r'}, 'f': {'h': {-4: 2}, 'u': {-7: 'd'}}, -5: {'u': {'x': 0}, 4: {'z': 4}}, -9: {-7: -1}}, -5: {8: {-2: -5}, -7: {-8: 'q'}, -3: {'i': 'i'}}}
q['m'][9][-1]['c'][-5] = {8: {2: {9: 5}, 'b': {-4: 'q'}}, 'x': {4: {-4: -5}}, 'r': {-8: 'e'}, 7: {'j': {'z': 9}, 6: {'g': -2}, 7: {0: 'u'}}}
test(w[4])
s['b'][7][1][-8][-9] = 'm'
test(m[3][7])
length(k[-3]['i'])
length(o[4][-6][3])
j[-4] = 'k'
test(q['y'][-7]['f'])
test(c['s'][-7][8]['n'])
r['v'][4]['e']['n'][-6]['w']['j'] = 3
x[-7][6][-3]['q']['q']['e'] = 0
t[-9][5]['o']['d']['p']['o'][-5]['c']['c'] = 'f'
length(u[5]['r'][-9])
length(y[-4]['t'][1][9])
length(w['c'][-1])
f['o'][-9]['l'][9]['u'][9] = 7
test(t['z']['f'][-6])
length(s)
q[-1] = {-8: {3: {8: 'j'}, 7: {'x': 6}, -3: {3: 'q'}, 'n': {'e': -1}}, 'x': {-8: {'i': {-4: 'u'}, 9: {'v': 7}, 6: {7: 5}}, 9: {-1: {'o': -7}, -9: {-1: 8}}}}
test(q)
y[-4][3]['l'][-2] = {'y': {'g': -4}, 'b': {'p': 1}, 4: {9: -8}, -3: {'r': 2}, -2: {'p': 'n'}}
j['p']['x'][1]['r']['g']['s'] = {0: {'j': -3}, 'c': {'p': 's'}, 5: {5: 'p'}, 'g': {4: 'w'}, 'i': {9: 'e'}, 'h': {'s': 'i'}, 'm': {'z': 'h'}, 'z': {4: 'g'}, -1: {0: 'f'}}
s['b']['w']['r'][-9]['d'][7] = 'q'
test(p[-6]['d'])
length(u[5]['r']['r']['w'][-7][7])
test(q['m'])
c[8][5]['z'] = a[-2]['l']['a']
u['b']['j'][0] = l[-9]['b'][0]['o'][5]['v'][8]['x']['t']
w['s'][-7]['w'] = d['a']['r']['s']
o[0]['d'] = y[8]['e']
e['t'][-5]['r'][7]['f'] = 'g'
c[8][5]['z']['d'] = {1: {'l': 'a'}, 'w': {3: -2}}
test(m[3]['k'][-8])
length(k[1]['h'])
test(m[1]['o'])
test(x[7][5]['r']['s']['o'])
m[-5]['v']['i']['d']['n']['q']['h']['d']['r'] = v['r'][5][4]['n']['l']['w'][7]
test(v['i']['s']['p'])
s['z'][0][-1][7] = 'e'
e['t'][8][5]['z'] = l[-9]['b'][0]
c[-8]['f'][2] = 7
n['v']['l'][2]['j'][9] = k[7][-6]
length(k[2])
length(a[-2])
length(a[8][-9])
l['m'][-8][-9][9]['j']['q']['j'] = 'b'
v['x']['p'][9] = {'m': {'b': 9}, -2: {9: 'g'}}
test(z[0][6][-5]['f'])
length(z[-7]['t'][1])
p[-6]['s'][1]['b'] = -1
l[0][6][-9][3][-5]['s'] = 6
z[-4][-2][-1]['o']['o'] = 's'
q[-1]['x'][-8]['i'][-4] = 'v'
test(l['s']['g'][-9][-5]['i'])
test(o[-3][-7])
d['z'][-9][3][-2][-9][-1] = {'q': {'j': {'n': 'k'}, 'e': {-3: -5}, -1: {2: {-8: 'a'}, 6: {-6: 'n'}}, 7: {'q': -1}}, 9: {-8: {-3: 3}, 'h': {-6: 'm'}, -3: {'e': -2}, 'g': {'f': 'p'}}, 'v': {'i': 'e'}}
v['i']['a'][-9][-3]['l'] = h[4]['w']['t']['k']['j']['x']
test(l[2]['d']['d']['w'])
length(a['j'][1][7])
v[-3]['y']['j'][-3][-2] = {'q': {'p': 8}, 2: {9: -5}, 3: {2: {'e': 'j'}, 'd': {-6: 'h'}}}
g[-1]['a'] = {2: {'w': 'i'}, 'g': {'z': 'h'}, 'p': {4: 5}, 'w': {'o': -7}, -8: {8: {2: 3}, -6: {6: 1}}, 'x': {'q': {9: 0}, 'v': {-6: -3}}}
length(l['e']['s'][0]['v'][4][-2][7])
length(g['d'])
v[5][7] = p[-1]['h'][4][-7]
n['q']['c'][2][-2][-3] = 3
test(d[3][3]['v'][4]['i'][-8][6])
m[-5]['r'][-8]['t'] = x['m'][6]['r']['f'][7]['m']['y']['n'][9]
h['p']['p'][-8] = 'z'
k[7][-6]['b']['t'][5][-4] = 'u'
r[1]['n']['h'][6] = p[-6]['d']
test(n['v']['l'][2][-9])
length(z[-4][8][0]['z'])
l['a'][5][-7]['l'] = 'c'
test(v)
length(r[7][7])
length(m[-5]['s']['x'][-2])
d[-7] = {9: {'j': 'u'}, 's': {'g': {'c': 'y'}, -1: {0: 9}}, -2: {'k': -6}, -1: {'y': {3: 'e'}, 'm': {-4: 'z'}}}
test(x[-4][-8]['d'][3][-6])
t[-5][-4]['a']['q'][-7][5]['h'][7][8][-7][-8] = 'e'
y[8][9][4] = 'p'
v['i']['s']['k']['v'][6] = 'k'
k[-7][0][-6][4]['x'] = 0
i['o']['l']['t'][-7]['v'][-9][-9]['z']['k'][-6] = y[8]['e']
length(q['m'][3]['r'])
length(p[-6][-8][9]['l'])
x['m'][6]['r']['f'][7]['m']['y']['n']['x'][-3] = {'x': {'w': -3}, 2: {-2: 'u'}, 'w': {'h': 'f'}, -1: {8: 8}}
c[8]['x'][5] = m[1]['e'][8][-5]
test(w['p'][2]['a']['y'])
test(b[-4]['b'][-9][8])
a[5] = {-7: {'s': 0}, 'z': {'b': -1}, -4: {'y': 'x'}, 'd': {'b': 'e'}, 7: {'p': 4}}
length(h['p']['p'])
length(h['p']['p'])
w['s'][7] = {2: {'e': 'n'}, 4: {-6: 'a'}, 'i': {1: -3}, 'l': {'i': 'u'}, 'p': {'z': 'p'}, -8: {'o': {'u': 'm'}, -9: {'p': 'a'}}, -6: {1: 't'}, -3: {'e': -3}, -1: {'i': 3}}
e['a'][-5][-8] = 'z'
z[-2] = 'k'
u[-2]['b'][6][-5]['y']['s'] = {'q': {-6: {'o': -8}, 'z': {'m': -2}, 'm': {'t': 'n'}, 6: {1: 'r'}}, 'j': {-8: {5: 'g'}, 6: {0: 'e'}, 3: {'s': -6}, 'd': {6: 'x'}, 'z': {'r': 'z'}}}
length(e['g'][7]['u'][1][-5]['b']['k'])
u['p'][-9][-9] = {'b': {0: {-8: 2}, -9: {'y': 'm'}}, 't': {'y': -5}, 6: {1: 6}}
test(y)
length(f[9]['o'])
test(t['s']['i'][9])
length(m[-5]['s']['g'])
test(t)
m[-5]['r'][-8]['k']['d'][0][-6][1] = c[-9][-2][1][-9][-3]
c['s']['e']['t']['j']['a'][-6][-1] = 7
w['c'][-1]['z'] = 'i'
test(o['b'][4])
test(m[0][7])
length(k['b'])
t[-9]['g']['c'] = {-7: {-3: 'f'}, 6: {'t': 'z'}}
o['z'] = {4: {'o': 't'}, -6: {9: {'c': 'a'}, 's': {-7: 1}}, 3: {-7: {'j': 'z'}, 'e': {'u': -2}}, 'm': {-8: {'t': {-2: 's'}, -9: {'k': 'w'}}, 'c': {'u': 'j'}}, 9: {3: 'j'}}
length(r['g'])
l[-6][-5]['b'][-7][5]['r'][9]['f'] = 1
q[-1][-8][7]['x'] = f['g']['n'][-2]['n']['c']
m[-5]['s'] = 9
length(r[2]['c'][2])
length(p[-1]['y'][8][-6][-1][9][-2])
length(c[8]['w'])
t['t']['g'] = {'s': {9: 8}, 'b': {'n': 5}, 'm': {9: {-5: {7: -3}, 'n': {0: 't'}}, 'o': {8: 'c'}}, 'n': {'v': 'z'}}
length(k['q'][-9][7][0][6]['s']['z']['e'])
t[-2][3] = k['w'][3]['g']['g']
b['a'][3]['t'][6] = 'd'
s[-5]['x']['e'][-8][1][7]['z'] = 'j'
length(y[0]['f'][5][7]['e'][6]['r'])
q['y']['e'] = s['m']['t']
a[8]['g'] = {2: {-7: -4}, 'l': {'t': -3}, -8: {9: {-8: 9}, -1: {0: -3}}, 'y': {1: {-3: 3}, 'k': {5: {'p': 's'}, 'd': {-1: 'w'}}}, -7: {'d': 'g'}, -4: {4: 'u'}}
l[-9]['b'][0][1]['f'][2] = -8
test(s['m']['t']['r']['s']['f'])
h[4][8][9]['n']['l']['r'][3][-8] = {'i': {6: -1}, 'b': {-7: -3}}
length(m['v'][6])
test(x[-4][-8])
v['i']['a'][-9][-3]['l'][0] = r[1]['n']['h'][-6]
p[-1][3]['d'][6][-7]['h'][4] = 'q'
z[4]['w'][3]['z']['c']['t'][-3] = {'b': {-9: 'c'}, 'g': {6: -8}, 'p': {6: 'j'}, 's': {8: 6}, 'x': {'c': 'f'}, -6: {1: {2: 0}, 5: {1: 'k'}}, -5: {'f': 'b'}}
test(b[-4]['b'][-9][8])
b[-1][-4]['b']['v'] = s[-5][-6]['s']['s'][6][7]['b']
v[-4] = {'w': {-3: {-7: 'u'}, -1: {'k': 2}}, -1: {'d': {'t': {8: 'k'}, 'n': {-4: 'b'}}, 'o': {-6: {-5: {-4: 'a'}, 7: {-5: 'p'}}, 6: {'v': 'b'}}}}
test(s['z'][0][-1]['o'][6]['y'])
test(n[6][-7])
q['y']['l']['d'][3][-2]['l'] = 's'
b[-4]['b']['v'][5] = {8: {2: 'j'}, 'i': {'y': 2}, 5: {'j': 'd'}}
q['m']['a'][6][5] = {1: {0: {'c': -2}, 'c': {'z': 3}, -5: {'m': -6}}, 'b': {-5: {-7: 2}, -3: {9: {9: 'g'}, 'z': {0: 'g'}}, -2: {5: 'p'}}}
g[8] = {'b': {-7: -8}, 5: {7: 6}, 'h': {'x': 'z'}, 'q': {'a': 't'}, 'r': {8: 'y'}, 'w': {1: 4}, 'v': {'y': 'a'}, -8: {'h': 9}, -1: {7: -6}}
length(k)
length(w['p'][2]['a']['m'])
l['m'][-8]['i'][5] = -5
l[2]['d']['t'][-7][-3][3][2] = {'e': {9: {'s': -6}, -3: {'r': 'm'}}, 'd': {0: {'d': -3}, 1: {-1: -2}}, -1: {8: -2}}
length(v[-3]['y']['j'][-3][-2]['q'])
length(a[8][-9][-6])
test(g[-6]['b']['v'][5][5])
q['y']['l'][-5][2] = 'd'
length(g[3]['l'][-8]['p']['i']['m']['n'])
x[-4][6][2][-4][0] = 1
length(t[-6][-2][4]['s'])
i[-7] = {-6: {8: 'w'}, 'e': {-2: 3}, 'k': {'r': {-7: 'z'}, 'g': {2: 6}, -2: {5: 'h'}}}
o['f']['k']['k'][3][-8]['v'][-1]['v'][0][1]['v'][7] = e['a'][-3]['t']['c']
y[8]['e']['l'] = j['p']['x'][-6]['p'][-6]['y']
b['a'][-3][-3][2] = {0: {-6: {'k': 5}, 'g': {'g': 'g'}}, 'x': {0: {-1: 't'}, 4: {'r': 'w'}}, -4: {'t': 'f'}, -3: {'i': {'i': -7}, 'b': {-8: 'q'}}}
o['b'][4][3] = {-7: {'x': {'r': {'q': 'r'}, 'z': {8: 2}}, 'h': {1: 's'}}, 'u': {'q': {-4: 'w'}, -2: {'r': 't'}}, 'w': {0: -1}, 'g': {2: {'i': {8: 3}, 'k': {9: 9}}, -6: {-8: 3}}}
g[0][-8]['k']['e'] = 'j'
r['g']['l']['r'][5]['b'] = -6
r[0]['x'][7]['s'] = 4
t['t'][9][-9] = {'g': {'e': 't'}, 6: {'e': 'j'}, 7: {'p': 'g'}, 9: {3: 'z'}, 'q': {5: 'w'}, -6: {-8: 0}, 'z': {'k': 'u'}}
d[2][9] = -9
o['p']['l']['w'][7]['e'] = {9: {-5: 4}, 'h': {1: 7}}
k['q'][-9][7]['s']['v']['p']['d']['l']['i'] = {0: {-4: {'o': 'k'}, 'm': {'y': 4}, 'w': {0: 'k'}}, 8: {2: {'f': 7}, 't': {-2: -2}}, 's': {0: {'q': {'i': 'g'}, 6: {'h': 'v'}}, 1: {'q': 8}}}
test(d[7]['t'][-7]['v'][-9][-7]['b'])
h[3]['g'][-4][-3][5][4]['c']['f'] = 7
z[0][6][-5][-7][4] = {'i': {-1: -1}, 'y': {'m': 'p'}}
t['a']['h']['v']['l'][2] = {'s': {-1: -5}, 4: {'t': {-6: 2}, 7: {4: 8}}, -3: {4: {7: 7}, 'l': {'m': 'b'}}}
test(u['g']['t']['d'][6])
test(t)
j['f']['p'][-4]['q'][-8][-6] = 5
j['f']['p'][-4]['q'][-8][-6] = o['p']['l']['r'][5][-1]['t']['f'][7]['b']['l'][-9]
length(b[1])
e['g'][7]['u'][1][-5]['b'][-7][5]['b']['b']['n'] = 1
test(g[0][-8]['t'])
h['h'][0]['r'] = {-5: {-1: -4}, 'u': {'s': 1}, 'l': {'n': 4}}
j[-1] = {8: {'y': {7: -2}, 's': {'i': -5}}, 5: {-6: {'m': {'d': -9}, 'e': {-3: 0}}, -2: {'v': 'x'}}, 'v': {0: {'v': 'x'}, 'a': {3: -8}, 'm': {-2: 3}, 'g': {'w': 'v'}}}
s['b'] = -5
length(b[1][3]['v'])
p[-2][5][-8][-6] = -8
n[-8][3][0][-4]['b']['v'][5][5]['j'] = 'e'
y[0][7]['f'][2] = 'a'
h['h'][0]['r'][-5][-1] = {'c': {'n': -1}, 'e': {'v': 'm'}, 'r': {'i': 1}, -6: {'i': 'n'}, -5: {'d': 6}, -4: {'i': 'e'}}
z['f'][-9]['i'] = {1: {'u': 5}, 'c': {5: {'n': 'd'}}, 'd': {'h': 1}, 'k': {'u': 8}, 'l': {'p': 9}, 's': {5: -9}, -9: {'s': 6}}
j[-1][8]['s']['i'] = 6
b[-4]['b']['v'][1] = f['o'][-9]['l'][9][0]
e['a'][-7] = p[-6]['s']['o']
w['p'][2]['h']['k'] = {'x': {'n': -1}, -1: {'i': {'q': 3}, 'x': {'l': 4}}, 5: {'z': -1}, 6: {9: {'n': 'b'}, 'k': {'j': 'e'}, -1: {'v': -1}}, 'n': {-6: -9}}
w['s'][-5][4] = m[-5]['v'][-8]['f']
test(l['e']['s'][6]['u'][0])
a['j'][1]['u']['s'][6][-8] = i[-8][6][4]['x'][-7]
t[-5][-4]['a']['q']['w'][-2]['r']['n'] = {3: {'s': {'y': {4: 'a'}, 7: {'r': 3}}, 'v': {0: -1}}, 1: {9: {'b': -7}, 'w': {9: 's'}}, 'z': {-8: {-4: -5}, 'i': {1: -7}}, 7: {1: {-7: 'n'}, 'r': {7: 'v'}}, 'f': {'i': 1}}
test(b[1][2][8]['g'])
m['v'][6][-5]['r'][0] = {-8: {-8: {'o': 'n'}, 6: {'y': 3}}, 'e': {-7: {6: -2}, 'r': {-1: -5}, -2: {-8: 's'}}, 'm': {'k': {'p': 'o'}, 'w': {1: 'i'}}, 7: {1: -4}}
a['j'][1]['u']['u'][-8] = {'q': {1: {'h': 2}, 5: {-6: 6}, -2: {-4: 6}}, 3: {-8: {'h': {7: 'p'}, 3: {'l': 'v'}}, 'j': {2: 8}}, 'o': {'y': {1: -9}, 1: {'g': 2}, 'u': {'v': -2}}}
w[4][2]['h']['c']['n']['p'][-3] = 8
t['t']['u']['j'][-9] = 7
test(r[2]['c'][2])
length(b['w']['y'][-6])
c['i']['d']['x']['d'][-1] = 'v'
length(k['q'][-9][7][-6][-5]['b']['k'])
o['p']['l']['w'][-3][-7] = 's'
o['p']['l']['w'][7]['e'][9][7] = 4
length(f)
u[-2]['p']['z']['w']['x'] = v['q']
length(y[8]['p'])
z[-7]['t'][-4][4] = -1
length(s[-5]['p']['c']['g'])
length(q[-1]['x'][9])
m[3][7]['c'][-4]['o'] = 2
length(f['g']['v'][3])
k['w'][3][1][1] = 0
test(k[-3]['i']['b'])
w['c'] = u['b'][6][-5]['y']['s']['j']['z']
test(u['b'][6][-5]['y']['s']['j'])
e[-6]['z']['c'][-7]['t']['t'][-3] = {'k': {-7: 'q'}, -1: {-9: 'i'}}
test(j['p']['x'][1]['r'])
length(f)
length(j)
test(p[-1]['y'][8][-6])
t[-6][3][-8][6][6][4] = m[-5]['r'][-8]['k']['d'][0][-6][-1]
a['j'][1][7][7]['l'] = -2
i[3][-2] = c[-8]['f']
x['m'][6]['r']['f'][7]['m'][-8]['d'][-6] = 'p'
q['m'][9] = 6
length(w)
length(b[-4])
f['e'] = {3: {'w': 'u'}, 'n': {-4: 2}, 'p': {'t': 'm'}, 's': {1: {-4: 'c'}, 'v': {'v': 'v'}}, -1: {'q': 'j'}, 'z': {'b': 8}, -2: {'a': 1}}
x[7]['v']['m'] = {'i': {-1: 9}, 'o': {'t': 'v'}, 'r': {'a': {'k': 'w'}, -3: {'r': 'h'}}, 'u': {'r': 'q'}, -6: {0: 'q'}, -1: {'a': 'p'}}
length(d[2][5])
length(a[-2]['l'][-8])
x['m'][6]['u'] = -4
j['f'] = f['k']
m['v'][6][6]['w']['w']['j'][-9]['o'] = 'i'
r[0]['g'] = x[-4][6][-4]
length(x[-4][-8]['d'][3][-6])
u['e']['z']['q'][-9][-8]['y']['v'][2] = c['e']['m']
f['g']['v'][-3]['i']['n']['e'][2] = 0
q['m']['a'][-8] = 'b'
length(q['y'][-7]['f']['h']['i'][-9]['q'][-8])
p[1][-6] = 'w'
u['b'][6][-5]['y']['s']['q'][-6] = 4
length(v['i']['l']['m']['z'][-8])
length(m[1])
w[-5]['u'] = o['p']['l']['r']
length(p[7][2][-6][3][3]['y'])
length(n['q']['c'][2][-2])
e['t'][-5]['r'] = 5
o['b'][8]['n'] = a[-2]['d']['z']
length(x[-7][6][-3]['q']['k'])
q['m']['a']['p']['g'] = o['f'][7]['c'][-5]
length(f['h']['g']['m'])
j['w'][7]['p']['p']['i']['m']['a'][9][2] = {8: {'d': 'd'}, 'm': {'b': 'i'}, 's': {'o': 'd'}, -9: {-6: {'j': -1}, 'r': {7: 3}}, 'x': {-1: -3}, -3: {'p': 1}}
test(q[-1][-8][3])
l[-9]['i']['l']['h'] = 4
d[7]['t'][-7]['v'][-9][-9]['z']['k'][-6]['l']['c'][-1] = {8: {'b': {-5: {'d': 5}, 'b': {'k': -8}, -9: {'o': 'o'}}, 'l': {8: -5}}, 'x': {'p': {'v': -3}, -2: {'u': -1}, 'n': {5: 3}}}
length(l[2]['d'][-2]['y'][-8]['h'][0][-2]['z']['e']['r']['u'][-4])
test(d[9][6][-3])
test(z[4][7])
length(k['w'][3][2])
length(s['z'][0])
length(u['g']['t'][8])
length(i)
t[-9] = 'f'
length(q['y']['e']['r']['d'])
test(e[-6]['z'][7])
p[7]['q'] = w[4][2][-2]
g['i'][0]['h']['i'] = {'x': {-8: 'k'}, 'r': {7: 6}, 'f': {7: 9}}
x[5] = 'c'
l[2]['d'][3][-4][3]['c'] = 4
test(z[-4][0][6][3]['l'][-2]['b'])
test(n['v']['l']['f']['i'][2][6])
l[-6]['l'] = f['e']['p']
p[-1]['y'][8][-6][5][-7]['a'] = {3: {'c': {'m': 5}, 'u': {-5: 'b'}}, -5: {'r': {'c': 3}, 'b': {'p': 'c'}}, 'e': {9: {1: 'w'}, 's': {'r': 'z'}}, 'd': {'i': {'m': 'b'}, 'm': {'j': 'c'}}}
h['p']['p']['e'] = 'a'
b[-1]['a'][-3][5]['g'] = 7
n['q']['c'][2][-2][-3] = y[-4]
length(b['n'][-1])
test(n[-8][3])
length(f[0]['d']['t']['s']['u']['s'])
r[0]['x'][7][7] = -7
f['h'] = 1
test(m)
u['g']['z'] = -2
length(q['y']['l'][-5]['q'][-9]['t'][5]['z'])
length(w['c'])
w[4][2] = w['p'][2][6]
test(o)
f[0]['d']['h']['d'][8][9]['a'] = b['n']
h['p']['p'][-8] = {7: {'d': 6}, 'b': {'p': {-2: 'l'}, 'o': {'n': 'l'}}, -4: {-2: 8}, -9: {-5: {'g': 'u'}, 'w': {7: 8}}}
length(j['w'][7]['j'][5])
u[-8][1]['g'] = 'd'
p[-2][5]['v'] = -8
test(f)
n[-8]['v']['h'][-8]['s'] = -8
s['m']['k']['e'] = l['e']['s'][0]['v']['o']['q'][-3]
r[1]['n']['h'][6][-3] = {'c': {'q': {'b': 4}, -9: {0: -6}}, 'i': {5: 'k'}, 9: {'c': 'b'}, 's': {0: {'u': 2}, 6: {'c': 'y'}}, 'u': {6: 'a'}, 'w': {'p': 'd'}, 'v': {-7: -1}, -4: {9: -9}}
y[0][9]['c'] = {'q': {'a': {6: 'a'}, 'j': {'g': 'b'}}, -4: {0: 'z'}, 'o': {'z': {8: -3}, 'f': {5: 'x'}}}
y[8][-3][7] = {'x': {0: 2}, 'j': {'i': {'f': 0}, -2: {'z': -5}}, 'w': {8: 'i'}, 'f': {8: {'a': {'l': 3}, 's': {'o': 'g'}}, 'v': {'d': 4}}}
length(b['n']['a']['g'][-2]['f']['n']['b'][-3])
i[-8]['j']['g'][0] = y[8]['g']
length(v[5]['l']['m']['s'])
i[9][-8][-9]['o']['h']['t'] = z['f'][-9]['b'][0]
length(j[5][8][5][1][9])
i[3][-2]['c'] = 'x'
g[-8] = -4
v[-1] = 'j'
length(c['s'][-4]['h'][-9][6])
r['v'][4]['e']['n'][-4][0]['u'] = {9: {-8: {8: {9: 'w'}, 'd': {-6: 'a'}}, -2: {5: {'v': 'r'}, -1: {'m': 's'}}}, 'r': {-8: {'i': 0}, 1: {0: 'i'}, 5: {5: 'o'}}}
b['a'][3]['u']['d'] = {'i': {2: {4: -3}, 'j': {'g': -5}}, 'b': {'r': {9: 'k'}, -2: {'l': 'b'}, 7: {-2: -1}}, 'e': {8: {0: {5: 'w'}, 'p': {'v': 'm'}, 'f': {'f': 'w'}}, 'h': {-6: {-4: -1}, 'z': {'f': -1}}}}
t[0] = r['g']['l']['r'][5][-1]
a[5]['d']['p'] = x[7][5]['r']['d'][-3][9]
q['m'][3]['r'][-9] = 'q'
l[1][8][6] = 'z'
test(l['m'][-8]['s'][-3]['a']['z']['k'])
i['n'][-5]['o'][6] = 'q'
test(u['g']['t'][8])
test(b['w']['y']['v'][2])
n['g'] = 'i'
p[-6]['s'][9]['c']['i']['r'][7] = {'s': {'g': {-3: 'd'}, 7: {-4: 5}}, 'u': {'o': 'k'}}
length(y[0][-1]['y']['h'][2]['d'])
f['r'] = 'j'
t[-5][-4]['a']['q']['n']['b'] = 1
b['w']['y']['v'][2][-4] = p[-1]['h'][-9]
j['w'][-1][-3]['w'][-3][-7] = 'x'
e[5] = 8
length(s['m'][8]['r']['i'])
test(s)
b[1][3]['h'][-1] = -9
h['p']['p']['e'] = {'e': {'h': 8}, 'o': {9: 'c'}}
r['g']['l']['w'][-3] = 'r'
q['y']['e']['r']['s']['f'][7] = c['i']['n'][8]['m']
e['g'][7][-8][-6]['j'] = m[1][0][7]
i['n'][-5][9] = c
c['s'][-7][8]['k']['s'] = 'r'
r['l'] = 3
x[7]['v'] = h[3]['i']['r']['e'][9]
i['o']['l']['t'][-7]['v'][-9][-7]['b'][6] = 's'
test(d[1]['g']['h']['m']['v']['s'])
e[1][6][6][9]['y']['t'][-8] = u[-5]['b'][-4][-9][-7]['z']['j']
test(p[-1]['y'][8][-6][-1][9][-2])
l[0][6][5][-1][-5]['r'][-4]['t'][-2] = {'i': {'z': 9}, 'y': {1: 'i'}, -1: {4: 5}}
h[4][8][9]['j']['l'] = {'a': {'m': 0}, 2: {'a': -1}, 7: {7: 1}, 'm': {0: {'x': -6}, -6: {-1: 't'}}, -8: {0: 4}, -6: {'k': -8}}
length(b[-1]['w']['y'][-6])
c[8]['a'] = {'l': {'d': {6: 8}, 'w': {'x': {0: 'j'}, 'd': {'y': -4}}}, 'n': {'h': 7}, 'q': {'f': 't'}, 'u': {-2: -4}, 'x': {2: 'p'}, -6: {-6: {'a': -4}, 6: {8: -2}}, -5: {'w': 3}}
m[3][7] = {-7: {'r': -4}, 'j': {-4: 'b'}, 5: {9: 'c'}}
a[-2]['d'] = -9
test(g)
u[-8][-2][5][-8][-6] = 'q'
h[3]['i']['o']['h']['t'] = w['p'][2]
test(o['z']['m']['c'])
a[8]['g'][-4][4] = 'u'
length(y)
x['m'][9][0][-9] = 'h'
w['p']['m'] = -9
x[7]['x'][0] = r['g']['l']['w'][7]['e'][9]
h['h']['u'] = 'p'
e['g']['q'][-4]['w'][6][-3]['t'][8][-9] = {'u': {'t': -8}, -6: {'k': 'x'}, 'e': {0: 'm'}, 'c': {'m': -7}, 6: {4: 2}}
length(j['f']['l'][6])
test(v[5][7])
u['b']['j'][0][3]['u'] = {1: {'i': {'y': {0: -6}, -1: {'g': 3}}, 'n': {9: -5}, -4: {'h': 9}, -3: {-7: 't'}, 'v': {0: -8}}, -6: {0: {2: 'g'}, -3: {'c': 'k'}}}
y[-4]['t'][-2]['i']['z'] = a
t[0]['t']['f'][7]['m']['y'][9][2][-4][-4] = {1: {2: 'o'}, 3: {'g': 'h'}, 8: {-2: 't'}, 9: {-3: -4}, 'j': {8: 'w'}, -9: {'l': -9}, -6: {-6: -9}, -4: {-3: 6}}
length(q[-1]['x'][9][-1])
i[3][-2]['w'] = {2: {6: 'b'}, 'b': {-9: 'l'}, 5: {'h': 'd'}, 8: {6: 3}, 'q': {'l': 'y'}, 'p': {'e': 't'}, -8: {1: 9}}
t[-8] = z[4]
h[4]['w']['t']['k']['j'][9][-4] = p[7]['q'][-3]['k']['d'][0][-6][-6][-3]
length(d['a'])
q['y'][-7]['f'][-5][-3]['z'] = 's'
i[-7]['e'] = {'i': {-6: 'd'}, 'r': {'q': 'd'}, 'b': {'t': -1}}
x[-7][6][-3]['q']['q']['b']['c'] = 7
p[7]['q'][-3][3]['l'][-2][-3][6] = 'a'
length(d['z'][-9]['w'])
length(l)
q['y'][-7]['f']['h']['g'] = 0
r['g']['l']['r'][5][-1]['t']['f'][7]['m']['y']['n']['u']['l'] = {1: {0: {'i': 'f'}, 't': {3: -9}, 4: {4: 'g'}, 'l': {'q': {'g': 'u'}, 'p': {'j': 'b'}}, 'f': {7: 'g'}}, -4: {-8: {7: 'o'}, 9: {'n': -6}, 'w': {6: 'u'}}}
l['m'][-8]['s'][-3]['a']['z']['t'][7][4]['r']['y'] = {'q': {'v': {-1: 3}}, 'b': {6: 'l'}}
o[4]['r'][-3]['t']['r']['t']['a'][-5]['c']['l'][4][3]['l'][-8]['b'][-1] = {8: {'i': {5: 'o'}, 'f': {'k': 'a'}}, 1: {9: {8: 7}, 6: {-1: 8}}, 'r': {5: -4}, 'b': {'b': -6}}
m[1][-7][-1]['i']['d'][6] = u[-5]
s['z'][0][-6][7]['k']['p'][-5][9][3]['b']['o']['d'][4] = {'i': {'o': 'n'}, 9: {-8: 'y'}, 'f': {'s': 'x'}}
y[0][-1]['d'][9][-9]['c'][-1][-4][-3][5]['t']['s'] = 7
test(h[4]['w']['g'])
y[8][-4][-5][3] = 5
y[0][9]['c'][-4][0] = 9
w['p'][2]['n'] = d[7][-4][-9]
r[7]['d'][9][-9]['c'][-1][-4][-3][5]['t']['y'] = {0: {-7: {3: {7: 'z'}, -4: {'m': 'd'}}, 'r': {'n': 1}}, -5: {-7: {'v': -8}, 'r': {3: 'n'}, 'g': {-6: 't'}, 1: {'m': -9}}}
test(h['h'][0][-2])
j['w'][-1]['a']['n'][0][-4]['z']['w'] = 8
test(c['e'][-2]['m'])
length(c[-9][9]['o']['c'])
test(z[4]['w'][3]['z'][7][-1][-3])
x[-7][6][-3]['q']['k'][-9][8] = w
length(j)
p[-1][3]['d'][6]['w'] = g['d']
a[8]['g'][-4]['z'] = {6: {'a': {4: 4}, 'w': {-6: -4}}, 'f': {'u': {2: 'm'}, 'f': {-5: 8}}, 8: {1: 6}, 'o': {'x': 5}, -8: {'n': 'n'}, -6: {'z': {-8: -7}, -4: {'a': 5}}}
w['s']['w'][-8] = v['q']['i']['s']['f']
test(n['v']['l'][2][-3][4])
test(r['g']['l']['r'][5][-1]['t']['f'][7]['m']['y'][9][2]['p']['v'])
o['p']['l']['r'][5][-1]['t']['f'][-2] = 'i'
z[-2] = x[-4][6]
l[-9]['b'][0]['t'] = 'i'
w['p'][2][5]['b'] = {'i': {-7: 2}, 'o': {8: 'n'}, -9: {-6: 'h'}}
test(t[-5][-4]['a']['q']['w'][-2]['r']['n']['z']['i'])
test(w['c'])
s[-4][4]['p'][-5]['h'] = 'x'
test(e[1])
x['l'] = 7
o['b'][-9][7] = 't'
v['q']['i'][2]['d']['d']['w'][3] = 'q'
test(i[9][-6]['q']['y'][-6][2]['z']['a']['a'])
test(c['e']['f'][2][-4]['f']['i'])
s[-4][4]['p']['s']['n'] = {5: {8: 5}, -9: {'x': 'n'}}
length(o[0]['d']['l']['c'][-1][8]['b']['b'])
length(g[0][-8]['k']['d'][0][-6][-6][-3])
i[3][-2]['w']['b'][-9] = z['f'][2]['d']['t'][-7][-3][3][2]['d'][0]
test(f['e'])
length(z[-2])
s['m']['k']['g'][2] = {-1: {'b': {-7: -6}, 'j': {2: -9}, 'm': {'d': 't'}, 'p': {'y': {9: 'k'}, -6: {'j': -6}}, 'y': {-1: 4}, 'x': {'j': 7}}, 7: {9: {-4: 'f'}, 6: {'x': {5: -1}, 'd': {'x': 'r'}}}}
l['s']['g'][-9][-5][-8]['t'][-9] = 'c'
i[9][-8]['y'][6] = j['f']['l'][6][-5]
r[2]['c'] = s['m']['k']['a']
n['q']['c'][2][-6] = i
w[4][2][-6]['n'][8] = 'c'
i[-3] = {5: {-9: 0}, 'o': {'p': 1}, 'r': {'x': 'r'}, 'u': {'m': 2}, 'x': {3: 'j'}, -1: {-3: 'p'}}
o[-3][8]['u'][-6][8][9]['a'][-1]['n'][-9] = 'j'
length(f['e'])
w['c']['r'] = 0
test(q['m']['a'][6][5][1][0])
test(m[0]['u'][0]['t']['f'][7]['b']['l']['d'])
h[3][2]['q'][2][-6]['o']['l']['t'][-7]['v'][-9][-9]['z']['k'][-6]['l'][-3][-5] = {'q': {'h': {5: -1}, 3: {3: {4: -6}, 'e': {-8: 'i'}}}, 'a': {9: 6}, 's': {8: {2: 0}, -9: {2: 'z'}}, 'u': {'e': {'c': 'b'}, -4: {'x': {'x': 'q'}, 'k': {'v': 'k'}}}}
b['i'] = -1
length(l['e']['s'])
g[-1]['a']['p']['p'] = 5
z[-4][-2][-1] = 'b'
test(n[-8][-9]['a']['n'][9]['k'][-3]['x'][8]['z'])
w[4][2][-6][9][-6]['q']['y'][-6][2]['z'][-9]['s'] = f['o'][-9]
test(q['y']['e']['r']['d'][-5])
test(p[-2][5][-8])
g['y'] = {9: {'m': -2}, 7: {-9: -2}}
l[1][-4][3][2][-7]['p'] = 'w'
m[0][-7]['o']['e'][5]['n'][4] = j['p']['x'][-6]['p'][-9]
test(r[7]['l']['m'][5])
r[1]['n']['h'][-6]['x'] = p
length(f['k']['l'][6])
test(w[-5]['u'][5][-1]['t']['f'][7]['m'][-8]['d'][7])
u['e'][-1]['d'] = r['v'][-7]
v['q']['i'][2]['d']['d']['w'][4] = j[-1]['v']['a']
n['q']['c'][2][-6][-3][-1][-3] = {1: {'o': 'j'}, 'b': {'g': 'm'}, 'd': {'h': -9}, 'w': {'u': 'u'}, -9: {5: -7}, 'z': {-3: 'd'}, -2: {'q': 'p'}}
m[-5][-5] = 'b'
p[-1]['o'] = {'p': {-2: 'h'}, 'u': {'u': {'f': -6}, 6: {9: 3}}, -4: {'n': 9}, 4: {-3: 1}}
o[4] = -6
o['b']['t']['c'] = {8: {1: {-5: 'y'}, 'k': {3: 'o'}}, 0: {-8: {'n': 3}, 3: {'l': 0}}, 2: {-3: 'l'}, 1: {'g': 4}}
g[-1]['a'][-8][8] = {'z': {-6: {'d': -1}, 'r': {4: {3: 'w'}, -4: {1: 'i'}, -7: {7: 's'}}, 'o': {5: {'q': -5}, -2: {-9: 9}}}, -1: {5: {8: {-7: 'i'}, 'r': {-2: 'r'}}, 'g': {7: 4}}}
b[-1][1][-7][6][-5][-2][5][-5][9] = q['m']['a']['h'][2]['c']
test(x[7][5]['r']['s'][9]['c']['i']['p'])
length(e['t']['q'][-1]['f'])
k[1][7] = 8
i[3][-2]['w'][2][6] = a[-2]['l'][-8]
test(i[-7])
d[4] = m[0][7][1]['u']['x'][1]['u']['u'][-8]['q'][5]
length(p[-1]['o'][-4])
c['e']['n'][-6] = 'k'
length(r[2][-3])
length(x[-4][6][8]['p'])
d[9][7]['e']['q'][3] = 'g'
e['t'][8][5]['g'][9] = 0
test(m[1][-7][-1]['i'][4]['d']['v']['f'])
y[-4] = {'b': {'z': 8}, -2: {-3: -1}}
length(n['v']['l'][2]['s'])
r['g'] = b['a']
test(o['z'][9])
q['m'][3]['r']['q'] = {-8: {2: 'p'}, 'r': {'g': -5}}
t[-6][3]['i'] = {'e': {'b': 9}, 6: {0: {'h': 5}, 7: {'r': 1}}, 'i': {'z': {-8: 6}, 'v': {'o': 'c'}}, 'j': {-9: -7}, 8: {'w': -6}, 'w': {'t': {4: 'i'}, 'g': {-5: 9}}}
length(p[-6]['d'][-3][9])
m[-5]['v']['i']['n'][8][-4]['h'] = {4: {6: -8}, 2: {'t': 8}, 3: {'l': 7}, 'm': {9: 1}, 'o': {'j': 9}}
k['j'] = 'x'
length(i['o']['l']['t'][-7]['v'][-9][-7][4]['j'])
test(d[3]['g'])
test(m)
e['t'][8][5]['u'][0]['v'] = 'w'
s['z'][0][-1]['o'][6][-3][-4] = {0: {-8: 8}, 'k': {'b': -6}, 'r': {'u': 9}, -2: {'g': 5}}
n['k'] = 'a'
e['t']['q'][-1][-6]['f']['v'][-2]['e'] = {8: {0: {8: 2}, -5: {'p': 'r'}}, 'l': {-5: {'o': 'm'}, 'n': {-7: -5}}}
q['m'][3]['r']['q'][-8][6] = -9
length(v[5]['d'])
j['f']['l'] = {'y': {'p': 'i'}, 'j': {0: {'u': -6}, 3: {'c': -5}}, 'l': {1: {'z': 'i'}, -7: {'x': 's'}}}
f['g'][2][1][-9] = 'f'
test(h[4][8][9][-9][-6])
v['r'][5][4]['c'][-5] = {'s': {'p': 'm'}, -1: {7: -2}}
p[7][2][-6][3][3]['x'] = 7
m['v'][6][-6]['l'][-5][-7][-8] = -7
test(b['w']['y'][-2]['v'][1])
test(d['h']['t'][1][-6][2]['h']['t'][1]['f']['w'][2][6])
length(a[8])
length(v[-3]['y'][4]['u'])
r['v'] = v[5][7]
length(q['y']['l']['b']['z'])
test(w)
f[9]['v']['d'] = p
d[9][7] = -9
a['j'][1][7][-4]['j'] = 1
test(l[-5]['z'][0])
d[-7][-2][-3] = 'f'
n['v'][0] = {'p': {'k': 'p'}, 2: {8: 'v'}, -6: {'h': {-5: -1}, 'c': {'b': -9}}}
length(t['a']['h'][-8]['r'][1][-9])
g[-1]['a'][-8][-6][6] = b['a'][3][-7][-9]
test(c[8]['n'])
t['a']['h']['q'][1]['d'][2][-5] = -3
length(u['b']['f'])
x['m'][6]['r']['f'][7]['t'] = {'a': {'y': 'l'}, 'y': {-2: 5}, 'k': {'s': {'i': 'd'}, 'v': {-6: -6}}}
test(n)
e[3]['n']['w'][-1][8] = {'q': {'d': 'k'}, 9: {-8: {'t': 1}, 'o': {'c': {'x': 'q'}, 2: {'q': 3}}}, 'r': {-6: 4}, -1: {'d': -3}}
length(g)
e[-6]['z'][7]['e'][-4] = {6: {'w': -8}, 'o': {-9: 'b'}}
k['w'][3][1][1] = -4
d['h']['t'][1][-6]['m'] = -5
length(r[1]['n']['h'])
k[-7][0][-1]['o'][6]['y'][-5] = 7
s[-4]['a']['n']['s'][-9] = 'r'
n[6][-7]['y'] = 3
f[9]['v']['d'][1][3] = l['e']['s'][0]['v']['o']['q']
test(t['t'][7][-8])
b['a'][3][-2][5] = {2: {'h': 'x'}, 'd': {-8: 'j'}}
d[3][-6]['z']['c'][-7]['t'] = 0
r[1]['n']['h'][-6]['x'][1][3][-3][5] = 'n'
x['m'][-5]['l']['y'][-5][1]['e'] = 'k'
n['v']['l']['f']['i']['q'][-3][3][-2]['z']['x'][8][0]['d'] = 'e'
test(w[4][2][-6][-3][5])
test(z[-4][5][3][0]['m'])
u['g']['t']['d'][3]['y'] = 't'
s[5] = {-7: {-5: 'r'}, 'c': {'y': 9}, 'b': {'s': 'h'}, 's': {-9: 4}, 'x': {'y': {4: 'v'}, 'n': {4: 'j'}, -9: {-5: -6}}}
length(b[1][8]['b'][1][-5])
test(i['a'][-3]['f'][-5][-5])
m[3]['z'][-7] = v['r'][5][4]['c'][-5]['s']
length(n['q']['c'][2])
e['t'][8][5]['g']['k'] = -5
b[1][8][3]['t'][-9]['t']['t'] = {-5: {1: 'q'}, -4: {9: {'w': -9}, -6: {0: 'g'}}}
length(h['p'])
test(x[-4])
h['p'][0] = 'j'
length(q['y'][-7]['m']['u'])
n['v']['l'][2][4]['t']['p'] = {'u': {1: 'l'}, 4: {4: 5}}
e['t'][-3][8] = 6
test(a[-2]['l']['a']['d'][1])
v[-3]['y']['j']['l']['k'] = {'u': {'b': {'t': 'v'}}, 5: {0: {'t': 'h'}, 1: {'y': 5}, -6: {'v': -1}, 4: {6: 1}}}
length(d[2][4])
i['o']['v'] = 3
r[7][4]['j'] = -2
test(k[1]['d']['w']['o'])
length(t[0]['t']['f'][7])
z[-2][9][7]['n'][-2] = 'i'
d['z'][-5][-6] = g[5][7]
o['p']['l']['w'][7]['e'] = 'd'
test(n['v'][0][-6]['c'])
g['d'][2] = {2: {5: 'l'}, 'e': {-3: -1}, 5: {'e': -6}, 'i': {-1: 'd'}, 8: {-1: -6}, 'w': {'u': -9}, -8: {'c': 'a'}, -7: {-7: 'c'}, -6: {'k': -6}, -4: {'h': -5}}
length(z[4]['w'][3]['z'][7]['e'][-4][6])
a[6] = o['f']['z']['o']['y'][-6][5]['z']['a']
t[-8]['u'][7] = 's'
length(r['g'][3]['t'])
l['f'] = 'l'
length(q['y']['e']['r']['d'][-5])
length(k['b'])
length(x[-4][-8]['c'][-6])
c['m'] = 'a'
x[-7][6][-3]['q']['k'] = r[1]['n']['h'][7][8][7]
i[-3]['x'][3] = 'x'
h['i'] = -7
r['v']['e'] = a[8]['g'][2]
l[-5][5]['x']['n'][-1] = u
u[-8][-1]['o']['p'][-2] = 's'
length(n[6][-3]['t']['c'])
w[-5]['o'][-3][8]['u'][-6][8][9]['a'][-1]['n'] = {1: {'z': 'y'}, 7: {-8: {'w': 'b'}, 1: {'o': 'o'}, -9: {'t': -3}}, 'i': {'h': 7}, 'r': {9: {'u': 's'}, 'j': {-6: 'b'}}, -9: {0: {4: 'l'}, -9: {9: 5}}, -4: {'y': 7}}
length(k[-8])
length(w[-5]['u'])
q[-1] = 1
length(c[-8]['f']['w']['q'])
k[1][-5] = {2: {1: {'c': 'f'}, -3: {'j': -4}}, 'g': {5: -6}, 'v': {'h': {'z': 'c'}, -4: {4: -7}, 'f': {1: 'i'}}}
p[-2][5][-8][1] = -3
i[-8]['j']['g'][0]['g'] = {0: {'i': {4: 'r'}, 'c': {'k': {-2: 7}, 'z': {6: 4}}, 'w': {'j': 8}}, -3: {'y': {1: 'j'}, 'z': {'p': 'z'}}}
test(u['g']['t'])
length(z[4]['u'][1])
length(l['u'][-2][-2][3])
test(x[-7][6][-3]['q']['q']['f'])
a[5][-4][8] = -3
n['h'] = 0
n[6][-6]['d'][1]['w']['m']['y'] = v[-3]['y'][4]['u'][-2][-1]
j['f']['l']['l'][1][6] = -5
test(e['g']['q'][-4]['l']['p']['k']['g'][-3])
r[2][-5] = 8
w['s'][-2] = 'l'
s['v'] = {'p': {-6: -1}, -6: {4: 'k'}}
m['v'][6][6]['x'] = x[-4][-8]['c'][-6]
s[-4]['f']['m'][5]['c']['y']['t'] = 'o'
t['s'] = 'x'
length(b[1][2][8])
length(w[4][2][-6]['n'][-5][7]['o'][-3][8][9][-8][-1])
b['w']['f'] = f['e'][-2]
length(c[3])
v['x'][9]['w'][3]['v'] = 'z'
b[-4]['b']['v']['h'] = 'p'
m[1]['o'][6] = -1
r[7]['d'][9][-9]['c'][-1][7] = -7
v['x']['d']['b'][-1]['r'][-6] = 'w'
length(o['z']['m']['c'])
length(f['e']['n'])
length(i)
w['p'][2]['h']['k']['n'][6] = {0: {'c': 'l'}, 'h': {9: {2: 2}, 'o': {'e': 1}}, 'u': {-7: {'b': 'k'}, 'g': {'m': -2}}, 't': {'z': {'d': 'u'}, 'u': {5: 0}}, -9: {'x': 'm'}}
q['y']['e']['q'] = 'g'
u['b'][6][-5]['y']['s']['q']['z']['m'] = {3: {0: {'u': {9: {'v': 'f'}, -4: {'d': -8}}, 'l': {'j': 'e'}}, 'p': {'r': 3}}, -9: {'y': {-8: -1}, -2: {-6: 'n'}}}
d[2]['a']['l']['w'][7]['e'] = 5
test(i[-8])
k[-7][0][-1]['o'][6]['y']['z'] = {8: {'u': {'h': {'h': -8}, -3: {'k': -2}}, 't': {'q': 'n'}}, 9: {'d': 'b'}}
y[-4]['e'] = u['b']
q['m']['a']['h'][1]['n']['h'][6][-3][-8] = {'a': {-6: -4}, 'c': {5: 'm'}, 'n': {'p': -4}, 'p': {'u': 2}, 's': {'r': 'o'}, 'w': {'n': 'e'}}
test(m['v'][6][6]['w']['w']['j']['g'])
i['e'] = 9
test(g['y'][7])
n[-8][3][0]['w']['y']['v'][2][-4]['o'] = c
test(w['c'])
o[0]['d']['l'][-3][-5]['s'][-9]['r'] = p[-1]['o'][4]
length(w['s'][-5][4]['w'][5])
v[6] = a[6]
b[-1]['a'][-3]['t']['q'] = {1: {'y': 'n'}, 'b': {'s': 3}, 'd': {-4: {3: 9}, 'l': {-2: 'c'}}, 6: {7: 'f'}, 'o': {5: 'n'}, 's': {6: -9}, -3: {9: 1}}
b[-1]['a'][-3][-5][-6] = {'i': {'r': 8}, 8: {4: 'e'}, 4: {-6: 'y'}}
t[8][5][-2][-4]['r'][-4][-1] = 'r'
s['z'][0][-6][7]['k'][-3] = {1: {'r': 'f'}, 5: {-5: 'a'}, -2: {'f': 5}}
f['j'] = {'a': {'p': -4}, -5: {8: {1: 't'}, 1: {'o': 'f'}}}
x['m'][9][0][-2]['k'] = 'a'
test(s[5]['b'])
test(z[-7])
h['p']['p'] = {'r': {'i': {'t': 1}, -2: {'e': 'z'}, -1: {'f': -8}}, -4: {'x': {'t': 4}, -7: {'s': 'y'}}}
x[-7][6][-3]['q'] = 'j'
o['z'][9]['g'] = 2
z['i'] = d[3][3]['v'][0]['p'][-9]
length(e['t']['q'][-1])
e['g'][7]['u'][-6][8][9]['a'][-1]['n'][-4][4] = -6
t[0]['t']['f'][7]['m'] = f['k']['l']['y']
q['y']['e']['r']['d'][-7][7] = g['v']['a']
length(y[-4]['b'])
c[-8][-6] = {3: {'p': {-9: 'm'}, -2: {5: 'e'}, 'g': {-8: 'z'}, 9: {'y': 'a'}}, 'b': {4: {4: 'l'}, 'n': {-9: 'd'}}}
d[-7][-1]['y']['u'] = f['k']['l']['j'][0]
z[0][-3][-3]['u'] = {'f': {'s': 'u'}, 6: {8: {-1: 'd'}, 'h': {-5: 'r'}, 'y': {'s': {6: 'm'}, -1: {0: 'w'}}}, -9: {-2: 'v'}}
length(m[1])
test(b[-1][-1]['n']['u']['g'])
length(j['f']['l'])
i[9]['g'] = -2
e['t'][-3]['e'] = 'k'
j['f']['l']['j'][0][-6] = 8
u[5]['m'][0]['f']['v'][-2]['e']['l'] = 6
test(x[-4])
length(r['g'][-3][6])
length(r[1]['n']['h'])
length(x[7]['x'][0])
p[-3] = -1
w['c']['l'] = i['n']['s']['w'][-8]
test(b['w']['y'][-6])
test(j['w'][7]['p'][4]['p'][-4]['s'])
c[8]['y']['p'] = 'z'
y[8]['g']['g'][0]['i']['l'] = 'n'
b['a'][-3][-5][-6][8]['c'] = 'p'
m[0]['u'][8][5][5]['r'] = -3
length(f['o'][1][9])
d['h']['t'][1]['f']['w']['q'][3] = {3: {-1: 6}, -9: {6: 8}}
a[-2]['l']['a']['d'][1]['l'] = j[5]
v[-4][-1]['d']['n'][-4] = 'a'
f['g']['v'][3]['e']['g'][-7][2] = {-8: {'o': -9}, -4: {8: 6}}
test(y[-4][-2])
u[5]['r']['r'][-4][-4] = 'j'
length(a)
y[0][9]['x'] = 'f'
z[-2]['l'] = 'p'
m['v'][6][6]['w']['w']['j']['g'][-6] = 'm'
test(o['b'][-2][3][-5][9])
r[0]['r'][5]['g']['t'][-1] = u[-8][-1]['o']['u']['u']
z[4]['w'][0]['d'][-1]['y'][8][-6]['t'] = 'p'
length(q['y']['e']['r'])
r[0][-6][7][9]['k'] = {-1: {8: {'r': 'l'}, 'e': {-3: 'u'}, -4: {'s': 'k'}, 1: {-9: 3}}, 7: {'n': {6: 'c'}, 's': {-7: 'x'}, 'b': {0: 'j'}, 'j': {'n': 4}}}
test(y[0][7])
q['y'][-7][-2]['e'] = t['a']['h']
test(z[4][7][1])
p[1][3][-3] = u['b']['a']['g']
test(n['v']['l']['f']['i']['q'][-3])
c[-9]['r']['j'][-9]['w']['v'] = 6
t[0]['t']['f'][7]['t'][2] = i[-3]['r']
length(w['p'][2][4])
z['f']['u'][-2][-2][3]['i']['r'] = {'q': {-4: {'x': 'i'}, -3: {2: 0}}, 'h': {-4: {-9: 'r'}, -1: {7: 6}}, 2: {-3: {'e': 'l'}, 6: {-5: 'r'}}, -9: {'r': {2: 'e'}, -3: {5: 'n'}}}
e['g'][7][-8][-6][0]['q'] = {9: {'i': 'r'}, -5: {-2: 'y'}, 't': {3: 'x'}, -1: {'k': {-7: 'k'}, -5: {'v': 4}}}
c['e']['n']['i'][2] = {'q': {2: {6: 7}, -5: {'e': {-4: 'o'}, 't': {7: 'h'}}, 'n': {-8: 3}}, 'b': {1: {'v': 7}, -1: {5: 7}}, 7: {-6: {'p': {'g': 'f'}, -4: {'l': 'l'}}, 'd': {'i': 'y'}}}
length(n['q']['c'][2][-6][-7][-6])
c[8]['a']['l']['w']['d']['y'] = {'e': {5: 6}, -1: {1: {-5: 7}, 3: {'g': 'f'}}}
e[-6]['z'][7][-1][-3][-2] = {'d': {'z': 'x'}, 6: {-4: 'e'}, 8: {2: {2: 'e'}, 4: {'m': 'a'}}, 'o': {'u': 1}, -4: {'h': {9: 0}, -5: {'u': 9}, 1: {2: 8}}, -3: {'p': 'v'}}
z[-4][6][6][-6]['b']['f'] = {'h': {'h': 'm'}, 'k': {-8: {-2: 4}, -7: {7: 'f'}}, 'l': {-7: 'v'}, 'u': {'a': -6}, 't': {'x': -2}, -5: {-8: 1}}
test(q['y']['e']['r']['s']['f'][7])
t[-8][7][1]['c'] = k[-7][0][-6][7][-1]
l['e']['s'][-4] = s['m']
test(h['p'])
j['f']['l']['l'][1][6] = {'z': {'r': {'i': {'s': 'd'}, 'o': {8: {'x': -6}, 6: {4: -2}}}, 4: {'q': 'q'}}, -3: {'m': {'e': {5: 'b'}, -3: {'r': 'u'}}, 't': {'a': {-4: -3}, -2: {-4: 'j'}}}}
test(t[-8][7][1][-8])
test(o['p']['l']['r'][5][-1]['t']['f'][7]['m'])
test(i[-8][6][4]['x'][-7])
t[-1]['o'][-3] = 8
test(d)
g['i'] = {'i': {'p': 'w'}, 4: {-6: -8}, 'n': {'h': 6}}
k[1]['x'][2]['e'] = 'q'
s['v']['p'][-6] = 5
g['i'][4][-6] = -4
length(m[0][-7][2][7])
test(m[-5]['v'][-9][-2][1]['p']['w']['m'][-2][0][6][5][-1][5])
length(i)
test(t[-1][6][4][-9]['v']['t'])
test(j)
test(o[-3][-7]['k'][9][-2]['w'][8])
e['a'][-3]['t'][8][1] = 5
length(u[5]['m'][0][2])
c[3]['b'][-5]['p']['x'] = i[-7]['e']['i']
test(j['f']['l']['l'][-7])
test(v['q'])
y[8][9] = {'k': {'m': 'z'}, 5: {-6: 'h'}, 'w': {'k': {8: 'k'}, -4: {'v': 9}}, -9: {'i': -4}}
x['m'][9][0][-2]['h'] = {8: {'p': {'p': 3}, -3: {7: 9}}, 'n': {-8: {'o': 'n'}, 'n': {'f': 'v'}}, 'j': {-8: 'e'}, 'f': {-6: {'y': -8}, -4: {'e': 'o'}}}
length(s['z'][0][-1]['o'][6][-3][-4][0])
w['c']['l']['i'] = 9
test(m)
length(z[4][7][1]['b'][4]['t'])
length(v[6])
p[-6]['s'][1][6] = {'s': {7: 'u'}, 'k': {'b': -7}}
test(k)
t[8][5][-4][-8][-2]['t'] = -5
length(p[1][3][-3])
u['b'][6][-5][8]['n'] = {'c': {5: {0: 2}, 'v': {6: 't'}}, 'z': {'m': 's'}, -2: {'c': {-9: -6}, 2: {'e': -7}, 7: {'h': 'i'}}}
length(q['m'][3]['r']['q'])
s[-5]['y'][-6]['s'][-7]['j']['d']['w'][5] = -3
s[-4]['v'] = -9
length(b[-4]['b']['v'])
length(c['e'][-2]['m'])
length(k[-7][0][-6][7]['k'][-3][5])
e[-6]['z'][7][-1][-3][-2]['o']['p'] = 'o'
n['v'][0][2][3] = e
length(l[-6][-5])
k['q'][-9][7]['a'][5][-3][7] = 'f'
test(k[1]['x'][2])
test(h['p'])
u['p'][7][-3][3][-2]['z']['x'][8]['s']['y'] = {-8: {'g': 5}, -6: {8: -9}, 'n': {'s': 'a'}}
f['e']['p'][2] = {'s': {'l': 4}, 't': {'b': 'p'}}
test(p)
d[-7][-1]['m'][-4] = 7
y[-4]['b']['z'] = w[-5]['o']['b'][-9]
r[7]['y']['c'][1][3]['f'][9] = -2
length(b[1][2][8][-8])
length(g)
c['i']['d']['n']['q']['d'][-1] = -1
o[-3] = q['y']['l']
test(d[9][6][-3])
n[6][-6]['d'][-3]['z']['x']['j'] = 'q'
r[1]['n'][7] = 'o'
o['f'][-4][-4]['f']['i'][4]['d'][9]['v'] = 2
r[2][-6][1]['f'][7]['b']['l']['l']['g']['p'][8][9]['o']['c']['x'] = 0
u[5]['m'][0][2][-7]['s'][-5] = 'h'
test(t[-1][1][-6][3]['g'])
i[-7]['e']['i'][-6] = 's'
d[7]['t'][-7]['v'] = 2
length(i['a'][-3][0])
test(l[0][6][-9][3]['x'])
test(h)
length(k['w'][3][1])
h[4]['t'] = {'h': {'c': 5}, 'k': {'t': {-5: 'b'}, -1: {'k': 7}}}
test(s['v']['p'])
test(b['a'])
z[-4][-4][-5] = {2: {'m': 5}, 'r': {'d': -2}}
c['s']['e']['t'] = -2
n['v'][-1] = i[9][-8]['y'][6]
length(t['t']['g']['n'])
length(z[0][6][-5])
length(w[4][2][-6][9][-8]['c']['f']['f'][-5])
length(q['m'][3]['r']['q'][-8])
length(m)
test(d[-7])
length(q['m'][3]['r']['q'][-8])
length(d[2][4])
t['t']['k'] = 'd'
r[2][-6][9][-2] = x[-4][-8]['d']['r'][7][-2]
y[0][4] = 'q'
test(x)
length(z[-7]['y'][-6])
y[8][-4]['i'][-1] = 3
f[0][1][3][7][0] = 'm'
d[2]['y'] = {0: {'t': 'b'}, 8: {'b': {'t': -6}, -5: {'e': {-9: 'j'}, 'c': {'m': 5}, 'u': {'d': -6}}}, 'd': {1: {'w': 'r'}, 'e': {'s': -4}}}
length(n['v']['l'][2][4][7])
v['q']['i']['s']['a'][-1][3] = {5: {9: 'w'}, -2: {'t': 'j'}}
length(k[-3]['i']['b'])
length(d[2][-2])
q[-1] = m[1]
j['p']['x'][1][7]['n'] = {'p': {'k': {'v': 8}, 2: {-8: -1}}, 's': {1: 'f'}, 'x': {'m': 5}, 'f': {5: -2}}
c[9] = 'g'
n['v'][-1]['z'] = 'q'
z['f'][-5][5]['b'][0] = h['p']['p']['r']['i']
d[9][6][-3]['b'] = 'g'
i[-7][4] = h[3][2]['n']
length(i[9][7]['c'][-5]['d']['l'][-6][5]['t'][-6])
l['e']['s'][-4]['k'][-9][-9] = y[-4][-2]
test(y[8]['p'])
x[-7][6][-3]['t'] = {0: {-7: -9}, 2: {3: 3}, 'd': {'i': {'a': 'y'}, -3: {'v': 0}}, 'h': {-8: 2}, 'j': {'u': 'w'}, -2: {'u': 't'}}
test(x['m'][-5]['l']['t'])
u['p'] = 9
q['m']['a']['h'][2][-6][9][-2]['h'] = n['q'][1][-5]
w['s']['z'][3] = 'd'
o['p']['l']['r'][5][-1]['t']['f'][7][-8] = {8: {-8: 'p'}, 'p': {9: 's'}, 's': {-1: 1}, -4: {4: {'e': 'z'}, -1: {0: {6: 'd'}, 7: {'o': 'e'}}}}
t['t'][9][-9]['q']['t'] = -9
test(i['o']['l'][-4][-9]['c'])
b['n']['a']['g'][-2]['f']['n'][2]['i']['j'] = {'x': {'q': -3}, -3: {'i': 'o'}, 'h': {3: 6}}
test(a[5][-7])
y[0][-1]['y']['h'][2]['d'][-8]['t'][-2]['y'][-1] = 'p'
y[-4]['e']['a']['g']['s'] = 'u'
s['z'][0][-1]['o'][6][-3][-4]['k']['b'] = 'x'
test(m[-5]['r'])
f['g']['v'][-3]['i']['d']['v'] = {'c': {'o': 'y'}, 'j': {2: {'q': 'y'}, 'u': {-3: 'b'}}, 'w': {'f': -5}}
length(c[-8][-6]['b'][4])
length(h[3][2]['q'][2][-6][-8]['j']['g'][0]['g'][-3])
u[-2][-2]['m'][4][-2][5][-2] = z[-4][6][6][-6]['b']['f']['u']
length(b[-1])
w[-5][9][8]['n']['a'] = 'c'
test(z)
d[-7]['s']['g']['c'] = -7
test(g['d'][2][-8])
length(g[3]['l'][-8])
length(r['v']['e'])
z[4]['u']['z'][-9] = r[7][7]['e']
length(a['j'])
length(k['b'])
h['h'][0][-2]['z']['e']['r'][8][6]['w'][-7] = 'q'
length(m[0]['u']['a'])
n[-8]['r'][1][-7]['q'] = -5
test(o[0]['d']['l']['c'][-1]['x'][-2])
z['f'][-9]['i']['d']['h'] = -3
t[-5]['l']['z'][4][-8] = f['o'][-9]['y']['a']['c']['z']
v[-4][-1]['i'] = y[0][9]['c']
b[-1][-4]['b']['w'] = {-2: {2: {'c': 'v'}, -3: {'t': 0}}, 'f': {'g': -5}}
length(w[-5][9]['e']['m'][-4]['i'][4]['e']['d'])
i['n'][4][2][-6][9][7]['c'][-5]['d']['l'] = {'y': {-9: 1}, 'b': {'q': 'x'}, 'l': {'a': -2}}
m[-5]['v'][3]['n'] = 0
length(h[4]['w']['t']['k']['j']['x'][0]['x'][7]['q'][-3])
test(d['z'][6])
g[3] = 'h'
v['r'][5]['t'][5] = m[-5]['v'][-8]['f']
x['m'][-5]['l']['k'][-4] = 'p'
o[-3][-4] = {'a': {-2: 9}, 9: {'k': 7}, 5: {'x': 4}}
length(h[4][8]['d']['r'])
length(t[8][5][5])
k[-3]['i']['b'][3] = -9
test(u)
m['v'][6][-6]['l'][-5][-7][-8] = {'a': {'i': -8}, 't': {-5: 'o'}}
t[0]['t']['f'][7][-8][-4][-1] = 6
o[-3][-5]['q'][-9][-5][6] = j
k['b']['e'] = u[5]['r']['r']['w'][-7][7]
r[2][9][-5] = -7
m[3][7][5][9] = {'c': {5: 'f'}, 3: {6: 6}, 'm': {'n': -4}, 'l': {-9: 'o'}, 's': {-5: 'b'}, 'w': {'f': 9}, -9: {6: -8}, -4: {'q': -7}}
t[-2]['a']['z']['d'] = -4
length(a[5][-4])
v['q']['i'][-5][-4]['t'][4][-3] = q['y']['e']['r']
p[-6][-8][9]['l']['t'][-7][-1] = x['m'][9][-9]
k['q'][-9][7][-5][-5][-6]['s']['s'][-7][8]['w'][8]['d'] = -4
test(d[9][6][-3]['t']['d'][-3])
test(e['t']['z'][0][1])
e['d'] = 'l'
test(a[8][-9]['z'])
g[5][-1][-3]['w'][7]['e'] = d[7][-4]['c']
e[3]['n'][-6][4][-6][5]['t'][-6]['q'][-6]['s']['s']['i'][4][-6] = {2: {'d': 'u'}, 'm': {-8: {1: -7}, -1: {'v': 2}}, 'g': {5: {3: 'e'}, 6: {'n': 'x'}}}
test(g[0][-8])
l['s']['g'][-5][-8] = {1: {'l': 1}, 'c': {3: 'x'}, 'e': {4: 'r'}, 'd': {'x': {'s': 's'}, -6: {9: 1}, -5: {-8: 'n'}}, 'l': {'p': 'a'}, 'x': {'b': {'l': 4}, 'j': {'p': 'h'}}}
i['a'][-3][0]['m']['k'] = -2
l[-6]['l'] = -5
test(e[3]['v'][0]['p'][-9])
test(i[3][6]['t']['q'][6][-2][5][-8])
a[-2]['l']['a']['d']['w'][5] = -1
test(x[-4][-8]['c'][3])
length(f[9]['o'])
test(e['g']['q'][-4]['w'][-8][3][0]['w'])
b['a'][-3]['t']['q']['s'][9] = r[2][-3]
t[-6][3]['z']['q'] = 't'
y[8][9][-9]['i'] = 4
test(g[5][7]['j']['t']['i'])
length(z[-4][6][6][-6]['b']['f'])
q['m'][3]['r']['q'][-8] = {0: {9: -3}, -8: {'h': {-5: 'k'}, 'w': {3: {'a': 'l'}, -5: {'r': -9}}}, 'h': {-8: {-1: 2}, 'l': {'x': 4}}, 4: {'o': 'f'}, 9: {8: {'d': 't'}, -4: {'b': 'n'}, 'n': {'n': 6}}}
t['a']['h']['q']['c'][2][-6][9][-8]['c']['f']['f']['u']['a'] = 3
test(m[-5])
test(m)
length(c[8]['n'])
z['i'][-3] = 4
q[-1]['x']['m'][8][1] = -7
v[-3]['y']['j']['l']['k']['u']['b'][6] = 'd'
test(h[3][2]['n']['i'][7])
i['a'][-3]['i']['t'] = 6
test(f[0])
length(o[-3][-4][9])
length(m['v'][6][-6]['l']['j'][8])
length(z['f']['u'])
length(v[5]['l']['r']['r']['l'])
test(y)
w['c']['l']['l'] = x[7]['x']
a['j'][1]['u']['s'][6][-8][-9] = 'h'
e[3]['n']['o']['z'] = {1: {'a': 'l'}, 3: {'q': 'j'}, 5: {0: 3}, 'm': {'h': 2}, 'n': {'q': 'e'}, -9: {'v': 'p'}, -7: {-7: {0: 'r'}, 9: {2: 8}}}
test(l['a'][5][-3])
length(e[3]['v'][3][3])
length(h['h'][0][-2])
a['j'][1] = -3
n[-8]['p'][4]['e'] = d[2][5]
m[1][0][7][-9] = c[-9]
z[0][6][-5]['x']['q']['n']['o'] = 'k'
length(n[-8]['v'][3])
g['x'] = 4
e['g'][7][-9] = 'e'
x[-4][6][-4]['d'][-9]['i']['p'] = 0
w['c']['l']['l'][0]['k'] = t['a']['h'][-8]
length(r[0][-7]['f']['l']['l'])
k[-3]['i']['b']['m'] = 'z'
y[-4][-2]['o'] = g
test(s['v']['p'])
length(n['v'][0]['p'])
length(e['a'][-7])
length(n)
u[-6] = d['a']['r']['s'][4]
test(e['t']['q'][-1]['f']['w'][5])
m[1]['x'] = 'm'
x[-4][-8]['d']['r'][7]['e'][3] = {-7: {-5: {-1: 'k'}, 'o': {'b': -3}, 7: {8: 'b'}}, 'c': {'a': {'l': -6}, 'z': {-6: 7}}, 'e': {-8: {-8: -1}, 'h': {'k': 6}}, 'x': {'h': {'e': 7}, -6: {-8: -8}}}
l['u'][-2][1] = k[-7][0][-1]['o']
i[-8][6]['k'][-1] = {4: {5: -7}, 8: {'w': -6}, 'h': {'x': {'a': 0}, 'b': {'u': 'q'}}, -9: {-8: 5}, -7: {'m': {-1: 'c'}, 'd': {0: 'l'}}, -5: {-3: -5}, -1: {'u': 'i'}}
e['g']['q'][-4]['h'][1] = n[-8][-9]['a']['n'][9]
test(w[4][2][-6][3][-2]['w']['p'])
d[9][6][-3]['t']['h'][6] = -1
test(t[-1]['o'][5])
a[-2]['x'] = 'q'
o['z'][3]['e'][-4] = {1: {'o': {'b': 'p'}, 7: {5: 'v'}}, 'e': {'q': {-2: 'k'}, 9: {-5: 'p'}, 'r': {'e': 'r'}, -1: {'b': -7}, -5: {'h': {-7: 'j'}, 'g': {'t': -8}}}, 'o': {7: {-8: 'a'}, -9: {-7: 'r'}}}
q['m'][3]['r']['q']['r'][0] = 4
length(k)
length(b[-4]['b']['v'][5][8])
e['t']['z'][0][1]['r']['b'][-8][9] = d[-7]
test(k[7]['o']['x'][2])
i[9][-8]['c']['f']['f']['k'] = {0: {-9: 6}, 1: {8: 's'}, 3: {'a': 8}, 7: {'z': 'b'}, 'o': {'i': 'j'}, 't': {'d': -5}, 'y': {-7: 7}, -2: {'r': 3}}
n[-8]['r'] = z[-2][3]
b['w']['y']['b'][-8] = 'q'
b['a'][4] = 4
test(f[0][1][3])
q['y'][-7][-2][-6]['t'] = z[0][-3]
o[0]['d']['l']['c'][-1][8]['l'][-6] = {'p': {'s': 'u'}, 'k': {'c': {-2: {0: {'r': -3}, 'n': {8: 0}}, -9: {-7: 'k'}}, 3: {-3: 8}}}
test(a[5][-4])
k[7]['o']['x'][2][4] = {'s': {'i': {'o': 7}, 'h': {9: 'd'}, 'o': {2: 'b'}}, -2: {'a': {-8: {'d': 's'}, 'e': {'a': 7}}, 'q': {'r': 'z'}, -5: {6: -5}}, 6: {-8: {'e': 'r'}, 4: {-7: 'k'}}}
u['g']['t'][8][4] = -7
f['k'] = 'h'
n[6][-6]['d'][-3]['z'][-5] = 2
p[7]['q'][-3]['t'][-2][-1][4] = {'i': {'x': -8}, 'o': {-2: 3}}
x[-4][-8]['c'][-6][-6] = -9
test(y[-4][-2]['o']['i']['i'])
u[-6]['u'] = 'y'
h['p']['p'][-4]['x']['e'] = {3: {7: 'g'}, 'e': {'c': 0}, 8: {'k': 'q'}, 'h': {-2: 'h'}, -8: {-7: {'n': 7}, 's': {'o': 'b'}}, -5: {-7: 9}}
l[0][6][-9][3][-5]['s'] = {'y': {-9: 'i'}, 'x': {'s': 'g'}}
test(y[-4][-2]['o'][0][-8])
s[-5][-6]['s']['s'][7][-4][-1]['a']['n']['u']['w'][8]['a'] = -9
x[-7][6][-3]['t'][2][3] = -5
test(m['v'][6][6]['w']['w'][0])
k[-3] = {'m': {'i': {'q': 'e'}, 3: {'c': 0}}, 7: {1: {-5: {1: {-4: 0}, 'r': {'f': 4}}, -4: {0: {8: 1}, 'l': {8: 2}}, 'n': {9: {3: -7}, 7: {-2: 'b'}}}, -6: {-6: {'c': 'l'}, 't': {'e': -6}}}}
b[-1]['i'] = i[-8][6]['k'][-1]
test(v)
length(b['i'][4])
length(h[3]['i'][-2])
test(d['a']['r']['d'][-7][7]['r']['d'][-5])
q['y'][-7][9]['t'][-1][3][6][-3]['v']['j'][-4] = {2: {-8: {-7: -2}, 'f': {'w': 5}}, 6: {'s': {'s': -2}}, 'h': {'d': {8: -9}, 'f': {6: 'c'}}, 'q': {'k': 'g'}, -9: {'g': -9}, -8: {'x': 4}}
l['a'][5][-5] = {0: {'n': -4}, 3: {-6: -3}, 6: {'p': 'w'}, 'f': {'g': -3}, 'h': {-1: 'r'}, 'r': {-3: -7}, -9: {'p': {'h': 3}, -1: {'g': 'c'}}, -7: {4: 's'}}
length(o['f'][-4][-4]['f']['i'][4]['d'][9])
length(m['v'])
r['g'][-3]['e'] = v['i']['s']
test(z[0])
p[-2][5][-8][-6] = 'm'
l['e']['s'][6]['u'] = -8
length(f['o']['w'][-5])
q[-1]['e'][8][-5]['y'] = 9
n[6][-3]['t']['k'][7] = 'm'
test(w[-5]['u'][5][-1]['t']['f'][7]['b'])
test(a[8][-9][-6])
t[-1][1][-6]['b'][4][-9] = e[3]
test(e['a'][-3]['t']['k'])
r[1]['n']['h'][6][-3][-2] = 'e'
length(s['z'][0])
y[8]['g']['g'][-3]['z']['p'] = 'i'
c[3]['b']['o']['d'][4]['i'][-5] = 't'
test(x[-7])
n[6][-5][-2][4] = 'o'
test(q['m']['a']['p']['g'])
l[2]['d'][-2]['y'][-5]['f'] = k[-3]['m']['i']
h[4]['t']['k'][-1]['j'] = {'q': {2: 'u'}, 'x': {-4: 'v'}, -5: {9: {'k': -8}, 'r': {'h': 'd'}}, 'u': {-8: -9}, -9: {-8: 'a'}}
h['p']['p'][-4][-7][-8] = e[-6]
test(n['v'][-1])
z[0]['m']['k'] = f['g']['e'][-6]['g']
e['g'][7]['u'][1][-5]['b'][-7][5][-5][-8] = 'z'
test(t[-5])
v['r'][5]['t'][5]['w']['q'][3][-9][6] = 'd'
k[-8]['f'][-6]['g']['y'] = {8: {'i': -3}, -4: {'k': {'p': {9: -8}, -3: {-1: 0}}, 6: {'c': 'x'}}, 5: {'c': {'k': 5}, -2: {'p': 'o'}}, -2: {'b': {'m': 9}, 6: {-5: 4}}}
v[5]['y']['b'][-1]['c'][6][2] = {'c': {0: -4}, 3: {'k': {3: 5}, -5: {4: -7}, 'w': {3: 'w'}}, 'n': {-8: {-7: 'a'}, 'h': {-8: -7}, 4: {'o': -5}, -1: {-6: 'j'}, 'o': {6: 9}}}
l[-7] = 4
t['z'][5]['o'] = 'q'
test(a[-2]['l']['a']['d']['w'])
length(u[-2][5]['r']['r']['w'][-7][7])
v['q']['i']['u'][3]['y'][9]['w']['m'] = w['p'][2]
length(t['z']['f']['a'])
length(c['e'][7]['r'])
test(i[-8][6][4]['x'][-7])
length(s[-4]['a']['n']['s'])
q[-1][0][7][-9][-4]['b'][4] = {'e': {'k': -2}, 'g': {-8: {9: {-5: 'c'}, 7: {'t': 'g'}}, 'i': {7: 'h'}}}
length(j[-1][5][-2])
length(g)
x[-7][6][-3]['t'][2][3] = l
length(e[-6]['z']['c']['t'][-3][-6])
test(e[1]['t']['w']['s'])
p[1][3][-7][-8] = {'p': {'r': 'b'}, 'c': {'v': -1}, 'v': {9: -6}}
u[-6]['u'] = {4: {'q': 4}, 5: {'o': -9}, 'k': {-4: -7}, 'l': {4: 's'}, 'y': {9: 'h'}, -8: {5: -9}, -7: {'f': 'h'}, -5: {-8: 8}}
test(b[-4]['b'][-9][8])
v['x']['c']['r'] = {'d': {'q': 'h'}, -1: {'j': {0: 'o'}, -5: {'m': -7}, 7: {'k': 1}}}
length(g['v'][4])
test(r)
test(g['v'][9][6])
f['e'][3]['w'] = p
r[0][-7]['f']['g'] = 'w'
test(p[-6][-8][9]['l']['t'][-7][-1])
k[1][-5][2][1]['d'] = 'k'
z['i']['t'] = y[-4]['e']['j'][0][3]['u']
g['d'][2]['w'][6] = -4
length(z[-7]['o']['k'])
length(h[3]['i']['r']['e'])
g[-6]['b']['v'][5]['i']['y'] = 5
length(l['m'][-8][-9][-7]['t']['d'])
length(d[9][6][-3]['t']['j'])
test(f['e'][3])
e[1][6]['b'][4]['t']['x'] = {'z': {-9: -1}, -1: {1: {1: -4}, 2: {'p': -7}}}
g[5][-1]['a']['i']['h']['b']['k'] = j['w'][7]['j'][-8]['c']
test(m[-5]['v'][8]['y'])
length(e[3]['v'][-4]['z'])
length(t[-8][7][1]['p'][-5][-8]['h'])
f[9]['o'][2] = 1
b['i'][-7]['d'][0] = e['g']
test(e['g'][7]['u'])
test(k['q'][-9][7][1][8])
test(j['f'][5]['v']['f'])
length(h[3][2]['n']['i'][7][6][4]['k']['x'][-4])
d[1][-5][-3][-4]['g'] = u[-8][1][3]
test(n[6][-6]['d'][1]['d'][0])
b['i'][-7]['d'][0]['q'][-4]['h'][1] = 9
v[-3]['y'][4][0] = {1: {'k': {'b': 'v'}, 3: {'x': 'j'}, 't': {-7: 's'}}, -2: {'f': -6}, -7: {-5: {'y': 1}, 7: {'j': 6}}}
length(h['p']['p'][-4]['x']['e'][-5])
length(q['m'][3]['r']['q'][-8][-8]['h'])
f['g']['t'] = {3: {'x': 'm'}, 'm': {'p': -1}, 'z': {-2: 8}, 6: {-2: 'z'}, 5: {-7: 'l'}}
m[3]['k'][-8][5] = -6
test(o)
t['a']['h'][-8][-9]['a']['n'][9]['k']['y']['j']['u'] = 'w'
test(b['i'][8])
v['i']['j']['f']['c'] = 9
u[5]['r']['r']['w'][-7][7]['f'] = 7
test(y[-4]['b']['z'])
t[-5][-4]['a']['q']['w'][-2][0]['z'] = -4
n[-8][-9]['a'] = {2: {'i': {'y': 's'}, 'x': {'n': 'x'}, 'u': {8: 6}, 'g': {'i': 7}}, 'c': {'c': {8: 'j'}, 'e': {4: 'k'}}}
s[-4]['c'][-8] = 'l'
test(h['h'][0][-2]['z']['e'][9][3]['z'])
length(c[-8])
b[-4]['b']['v'][5][8][2] = 7
k[1][-5]['v'][-4] = 3
test(b['w']['f'])
n['q'][1][-5]['t']['p'] = 'g'
h[3][2]['q'][2][-6][3][6] = {'y': {-2: 8}, 1: {'q': -7}, 'd': {'f': -9}, -1: {-2: 4}, 7: {8: {'y': 'x'}, 4: {-7: 'p'}}}
length(t[0]['t']['f'][7][-8]['p'])
a['j'][-8] = 'd'
b[-1]['i'][-5][-7] = -3
test(k[-3]['m'][3])
length(t['a']['h']['v'][0][-6])
o['b']['t']['c'][2][-3] = 'v'
m[0] = -2
l['u'][3]['y'][9]['w']['m'][5][-9] = p
test(d[2])
j[5]['u']['g'] = -1
g[5][7]['j'][-8]['c']['e'] = {'a': {9: -1}, 1: {'q': 'q'}, 'b': {'c': 'b'}, 'd': {-7: 9}, 'n': {-4: {'e': 'd'}, 'l': {'f': -7}}, 'u': {-6: 'x'}, -9: {1: {-4: -8}, -1: {'n': 'o'}}}
q['m']['a']['h'][7]['y'][2]['c']['j']['j'][9] = f
test(j[-1]['v'])
r[0]['g']['d'][8]['n'] = h['h'][0][-2]['z']['e'][9][3][-8]
j['p']['x'][-6]['p'][-9][1] = s['v']['p']
length(x[7])
length(u[-8][7]['q'][-3]['k']['d'][0][-6][-2][5][-8])
m[-5]['v']['i']['d']['x']['j'][5]['w'][5] = y[-4]['b']['z']
z['i'][1][-6] = n['v']['l'][2][-3]['l']
test(c[-9][-4]['r'])
test(z['f']['u'][-2][1][6][-3][-4])
f[9]['v']['d'][-6]['s'][9]['c']['i']['r']['a'] = 1
test(y[0]['f'][5][-2][6])
test(d[2][5])
o[0]['d']['l']['c'][-1][8]['b']['b']['k'] = c
o[-3]['d'][3][-2]['l'] = 'i'
z[-4]['j'][6]['b']['a'][1][4]['p'][-4]['s'] = q[-1][-7][-1]['i'][4]['d'][9]
b['w']['f']['a'] = n['v'][-1]
test(c['i']['d']['p']['x']['u'][6][1][-6])
y[-4][-2]['o'][-1]['a']['w']['o'] = i[9][-6]['q']
z[-7]['t'][-4]['t'] = o['z'][9]
h['h'][0] = -6
test(l['u'][-2][1])
length(j['f'][5][-4]['h'][-1])
test(b['w']['f']['a'])
test(b[1][3][1])
test(t[0]['t'])
f['o'][-9]['l'][9]['m'][-6] = -7
q['y']['e'][9] = q['y']['l']['b']['o'][7]['f']
p[1][3]['h'][4] = 'k'
p[-1]['o'][4][-3] = 'y'
i[9][7]['c'][-5]['d']['l']['l']['a'] = m[3][0]['r'][-9]['w']
length(z[-2][-1])
length(o['f'][0])
length(h['h'])
test(h[4]['t'])
length(o['z'][9])
length(s['z'][0][-6])
q['y']['e']['r']['d'][-5][-4] = 'g'
length(k[-3]['m'][3])
q[-1]['o']['r'] = 'v'
length(z[-7]['y'][-6])
length(v[5]['d'][9]['j'])
j[5] = n[-8][-9]['a'][2]['u']
test(w['p'][2][6][-6][-7]['k'][-2])
r[7][7]['e'][-7] = -3
l['m'][-8]['s'][-7][8]['n']['p'] = 'f'
m[3][7]['j'][-4] = 'c'
k['b']['e'][0] = 3
g['s'][-8] = 'k'
v[6]['k'] = 'd'
length(s[5][-7])
c['s'][-3]['a'][0][9] = m[1]['o']
test(x[7]['v'])
test(o['p']['l']['r'][5][-1]['t']['f'][7]['t'])
t['z']['f'][-2]['o'] = -3
x[-4][6][9][7]['n'][2] = {'c': {'t': -6}, 'g': {7: 'e'}, 8: {'l': 'o'}, 'm': {'f': -2}, 'r': {-8: -8}, -7: {3: {'l': 'g'}, 'j': {'g': -2}}, -2: {'n': 'o'}}
length(s['z'][0][-6][4])
f[9]['o'][0] = g['d'][2]['e']
t[-6][3]['u'][5] = {9: {-8: {'g': 9}, 'c': {6: 4}, 5: {7: 'u'}, 'w': {3: 's'}}, -6: {'y': {-3: 'd'}, -5: {'i': 'c'}}, 'b': {'h': {-5: 0}, -2: {-3: 'y'}}, -4: {3: {'r': 'b'}, 'b': {-7: 8}}}
u['g']['t']['a']['t'][1] = -2
test(v['x']['p'][9][-2])
x['o'] = c['e']['f'][2][-4]['f']
length(b[1][-6][3][-1][2][7])
length(x[-4][6][8][-3])
l[-5][-5]['x']['e']['b'] = -4
s['v'][-6]['v'] = m[3][0]['r'][-9]['w']
length(k['q'][-9][7]['a'])
test(x[-4])
length(v['r'][5][4]['c'][-5][-1])
d['h']['t'][4][-7][-8][9][-1] = c[-9][-7]['t']['d']['q']
length(o['f']['k'][-8])
length(v[6])
length(x['m'][9][0][-2]['h']['f'][-6])
test(r[7][7]['e'])
m[1]['o']['r'] = -8
test(g[8]['v'])
l[-6][-5][-5] = -8
d[4][-5] = k['w'][3]['g']['g']
k['q'][-9][7][-6][-5]['b']['k']['r'] = 2
test(m[1]['o'])
test(c[-8][-6]['b'][4][-9]['v'][3]['f']['i'][7][9]['r']['v']['f']['d']['y']['v'][8])
n['q'][1][-5]['l'][9] = i[-7]['e']['b']
test(i[9][-6]['q']['y'][-6][-7][0])
length(h[3][2]['n']['i'][7][6]['b'])
b['w']['y'][-2][-9][8][5] = f['e']['n']
test(r[0][5]['a'][-4][2]['w'])
r[7]['d']['q'] = 'u'
k['b']['e'][-6] = {0: {'i': {'h': 'j'}, 'x': {'a': -8}}, 1: {-6: {'s': 'v'}, 'm': {'a': 5}, 'n': {1: 'a'}}}
y[0]['f'][5][-8]['v'] = 3
i[-3][5][-1] = s['z'][0][-1]['o'][6]['y']['z'][9]
e[3]['v'][3][3][3][5][-2]['g'] = 6
length(i['o']['l'][-4]['b'])
k[-8]['q']['t'] = 'd'
t[-8]['w']['r'][-9]['d']['w']['c'] = -1
h['h']['b'] = 'u'
k[-7][0][-1]['o'][6][-3][-4][0][-8] = j[-1]['v'][0]
n[-8]['v'][8]['i'] = 't'
c[-9][9]['o'] = 'j'
length(v[-4][-1])
y[-8] = {1: {'e': -2}, 'r': {'m': {'i': 'j'}, 5: {2: 'h'}}, 3: {'t': {-8: 6}, -2: {'k': 't'}}}
s['v']['p'][-6]['c'] = 'u'
length(p)
test(l[-9]['i']['l'])
test(f[9]['v']['d'][-6]['s']['o'])
test(g[-6]['b']['v'][5][5])
test(l['e']['s'][6]['q'])
l[1][7][-6] = {0: {8: {-1: 'c'}, 9: {5: 1}, 'w': {'o': -5}, 'f': {-2: 'x'}}, 'z': {'h': 'p'}, 'e': {'l': {-8: 'a'}, -9: {-7: {-3: -8}, -5: {'q': 's'}}}}
z['i'][1] = 'h'
s['v']['p'][-6]['m'] = 'a'
x['l'] = 'o'
s['z'][0][-1]['o'][6]['y']['y'] = {'a': {'q': 'c'}, 6: {0: 'r'}}
y[8]['g']['g'][0]['c']['k']['p'] = {'d': {'v': 'x'}, 6: {5: 'n'}, 'v': {'b': 's'}, 'n': {0: -9}, 'u': {'y': -1}, -9: {'w': -1}, -7: {'d': 'a'}, -3: {7: 4}, -1: {-2: 'o'}}
length(q['y']['e'])
n[-8]['v'][3][-3][-4] = {-6: {-3: 'z'}, 3: {4: {'p': 7}, 6: {'c': 'x'}}, -9: {-7: -7}, 't': {'i': 'u'}, 'n': {'p': 'r'}}
y[-4][-2]['o']['v'][9][6][-3]['t']['d']['i']['a'] = w['p'][2]['h']['k']['n'][6]
length(u['e'][-1]['d'][1]['u'][-2]['a'][5][-7][3])
g['v']['z'][-9]['w']['p'] = l[1][8]
length(s['z'][0][-1]['o'][6]['y'])
test(w['s'][-9][-9])
k[-3][7] = p[1][3][-3]
h[3][2]['q'] = 'j'
j[5][9] = 'y'
test(a['j'])
k[7][-8] = 'z'
l[-5][-4][-3][-2][1][6]['d'] = a[-2]
a[8][-9]['o']['r'] = q[-1][0][7][-9][-2][1]
test(h[3][2]['n']['i'][7]['x'])
test(g[5][7]['j'])
z['f']['e']['s'][-4]['t'] = {-7: {'y': -2}, -9: {6: 'p'}, 5: {'p': {'n': 4}, 2: {3: 'q'}}, 'n': {'b': {3: 6}, -2: {0: 'c'}}}
test(r['g'][-2]['b'][-5]['r'][-8]['k']['d'][0][-6][-6]['s']['o'])
d[3]['t']['z'][0][1]['z'] = -3
length(w['s']['a'])
p[-2][5][-8]['z'] = {0: {'y': {'t': 5}, -7: {'s': 'c'}, -2: {'r': 'l'}}, -9: {'z': 'f'}}
test(d['z'][-5])
c[8]['y'][-1] = {-8: {7: {'q': 'm'}, 9: {-1: 0}, 'v': {'f': 5}, 'g': {'f': -1}, 'f': {'x': 'e'}}, 'i': {5: {'p': 'd'}, 't': {9: {5: 's'}, 7: {-1: -2}}, 'f': {5: 'e'}}}
s[-4]['h'] = 'b'
w['p'][2][5]['b']['i'][-7] = -4
length(g['s'][0][3][5]['a'])
u[-6]['u'][5]['o'] = {3: {-9: 'l'}, 4: {5: -1}, 'm': {'t': 'd'}, 'p': {4: 'm'}, 'u': {-1: 'i'}, -8: {2: 8}, -1: {-5: 5}}
length(d['z'][6][5])
i['a'][-3]['z'] = 'h'
a[6]['o'] = 'l'
d[4][-5][-1] = 'w'
test(d['h']['t'][1]['f']['w']['q'])
y[-8][3] = 'v'
test(x['o']['i']['d'][6]['b'][-4][-9][0][0][1]['u']['g'][0][-8][-2])
v['q'][5] = 'h'
test(q['y']['e'][9])
m[-5]['v'][-1] = t[8][5][-4][-8][-2]
b['a'][-3][6] = 'g'
f[9]['v']['d'][-1][3]['d'][6][-7]['h'][4] = {0: {'r': {'a': 't'}, 5: {'y': 'k'}}, 2: {-8: 3}, 'b': {1: 'b'}, 'm': {'x': 'u'}, 'o': {'h': {'i': 'z'}, 'l': {'u': 'c'}}, 't': {'j': 'x'}, -5: {-6: -6}}
length(c[-9]['o']['o']['j']['a'])
c[-1]['t'] = 'a'
l['u'][3]['y'][9] = {'y': {-9: 'i'}, 'a': {'f': 'g'}, 'c': {-4: -3}, 'w': {4: 5}}
x[7]['v']['k'][3][0]['v'] = {'e': {'a': 'w'}, 7: {'t': 5}, 8: {'r': {'v': 'n'}, 'd': {1: 'm'}}, 'k': {'a': -9}, 'j': {2: -6}, 't': {'x': 8}}
x[7]['i']['l'] = {8: {6: -9}, 'y': {'e': -7}, 1: {-1: {-8: -4}, 'w': {'y': 'c'}}, 'w': {-9: 8}, 'v': {-5: 's'}}
a[6]['o'] = 'i'
test(i[-7][4]['y'][6]['d'])
x[-4][-8]['d'][3][-6]['r'] = {'q': {4: 'r'}, -7: {'e': 3}, 'b': {-8: 'b'}, 'e': {-6: 'c'}, -1: {9: 'e'}}
test(m[1][-7][7])
test(v[-4]['w'][-1])
p[-6][3] = -3
u[-5]['b'][-4][-9][6][5][-8]['z'][0][-7]['s'] = 'g'
u[-5]['b'] = {-9: {'e': 3}, 'w': {'r': 'c'}, 6: {'l': 'z'}, 'v': {'b': -8}}
m[-5]['f']['l'] = 'a'
length(t[0]['t']['f'][7]['m'])
g[-1]['a']['p'][9] = {'y': {-8: 't'}, 9: {'f': -6}, 'c': {8: {'m': 4}, 'k': {-6: 9}}, 4: {1: 'y'}, 'l': {'x': 7}}
length(n['q']['c'][2][-6]['a'][-3]['i']['t'][-6])
length(s['z'][0][-6][4])
i['o']['l']['t'][-7]['b'] = {'s': {'l': 8}, 'g': {-4: {-5: 9}, 'm': {'m': 'o'}}, 'f': {'n': 8}}
test(t)
x['i'] = -9
test(g[-1]['a']['g'])
test(u[-5])
length(o['p']['l']['r'][5][-1]['t']['f'][7]['m'])
s[-5]['x']['e'][-8][-6][-7] = {8: {'y': {'m': 'h'}, 'u': {'j': -4}}, 1: {8: {-3: -3}, 'v': {-5: 9}}, 'q': {'m': {'c': 'c'}, 7: {'a': 'z'}}, 'x': {4: {-8: 'z'}, -4: {-9: 8}}}
length(s['z'][0][-1]['o'][6]['y']['y'][6])
test(v[6])
p[-2][5][-8]['z'][0][-2]['x'] = 'n'
g['d'][2]['i'][-1] = m[-5]['v']
b[-4]['b']['v'][5]['i']['y'] = 5
length(j)
r[1]['n']['h'] = 2
h['h'][0] = 1
length(c[-8]['f']['w']['p'])
length(m)
test(c[-1])
i[3][6]['d'][4] = k[-8]['q']
length(d['a'][9])
length(l['m'][-8]['s'][-7][8]['e'])
test(q[-1][0][7][-9][-9]['e'])
r[7]['d'][9]['j'][9]['c'][-6][-2]['k'] = 'h'
n['q']['c'][2][-6][-3][-1][-3][-2][-4] = -4
length(a[8])
v[-3]['y']['j']['l']['k']['u']['b'][6] = 3
length(n[-8][3][0]['a'][3][4])
length(p[-2][5])
w['s']['i'][-9]['e'][6] = 8
test(e['g'][7][-8][-7])
f['o'][1][0][2] = -8
u['g']['t']['d'][6]['r'] = 'w'
test(d['z'][6][5]['d'][-3])
length(m[1][0][7][-9][-4]['r'])
y[-8][1]['f'] = 'u'
o[-3][-4]['a']['m'] = h
f[9]['v'] = 4
d['h']['t'][4][-7][-8]['i']['c'] = i
test(y[0][9]['c']['n']['p'][2][3])
e[-6]['z']['c']['t'][-3][-5]['f'] = 'b'
k[2]['d'][-6][-1] = {'q': {9: 'q'}, 's': {5: 6}, -5: {'g': 9}, 't': {'n': 'e'}, -1: {'w': 2}}
b[-1]['a'][-2]['b']['v'][6][-5][9][-8][-6]['d'][1]['d'] = 's'
test(s[5]['b'][0])
length(y[0]['f'][5]['x']['l'])
c[3]['b']['y']['w'] = -7
length(p[7][2][-7][1][0])
b['i'][-1]['y'] = 1
t[0]['t']['f'][7]['b']['u'][-9]['g']['h']['n'] = 'z'
length(s[5]['b'][0])
length(j[5])
c[8]['n']['t'] = {'c': {'e': 'e'}, 'e': {7: 4}, 'j': {'a': {'k': 'w'}, 'x': {'x': 'j'}}, 'r': {'i': -2}, 'u': {'i': 'l'}, 't': {'i': 'a'}, 'x': {9: 'h'}, -5: {-7: -8}}
t['a']['h'][-8][-9]['a']['c']['c'][8] = 'n'
test(p[7][2][2][8]['a'])
z[0][-3][-3]['u'][6]['y']['s'][6] = o[-3][-5]['q'][-9][-5][7]
v['r'][5]['q']['u']['d'] = r[0]
i[9][-6]['q']['x']['e'][-8][1][7][6] = {'i': {'s': 'e'}, 5: {-3: {8: -6}, 5: {9: {-8: 9}, 'p': {'e': -9}}}, 'l': {'b': 'c'}, -2: {'a': {'s': -4}, -6: {'t': 's'}}, -3: {'l': 'm'}}
length(n['q']['c'][2][-6]['o']['l']['t'][-7][-1])
s['m']['k']['g'] = 5
o[-3]['d'][3][-2][8] = f[9]['o'][0]
z[-4][8][0][-5][7][6][4]['k']['u'][0]['x'] = 'm'
o['f'][7][5] = {4: {'g': 3}, 'g': {9: -5}, 6: {'o': 'o'}, 'f': {'k': {3: -7}, 3: {-6: 3}}, 't': {-2: -4}, 'v': {6: -7}, -6: {5: 'c'}, -1: {'b': -1}}
length(x['o']['i']['d'])
z[-7]['o'][-6] = 't'
j[5][-6] = {'c': {'c': {'r': 'r'}, -2: {'v': 'x'}}, 'k': {1: {'v': 'r'}, 'g': {'j': 0}}}
g['v'] = 'f'
k[-3]['m'][3]['x'] = 'g'
b[1][3]['v'] = {'k': {'g': {'n': 6}, 'v': {'s': -2}}, 'j': {9: {'k': -7}, 'd': {'g': 'b'}, 7: {-1: 'f'}}, 'd': {'a': 'e'}, 'g': {'a': {'i': -9}, 'p': {'y': 'i'}, 'n': {-2: -2}}}
w['c']['l']['l'][0]['k']['p'][4]['e'][-6] = d[1]['g'][-6]['r'][6][0]['m']
o[0]['d']['l'][-3][-5]['s'][-9][2] = 4
test(a[-2]['l']['w']['i']['z'][-8])
u[5]['m'][0]['f'] = -3
j[-1][8]['y']['n'] = {3: {'k': 8}, 'e': {'t': -6}, 'h': {3: 'b'}, 'm': {'c': {7: 1}, 'g': {3: 'y'}}, -7: {1: {-8: 'k'}, -6: {'y': -5}}, -6: {5: 9}}
l['u'][-2][-2]['v'][5]['j'] = i[-3]['u']
w['p'][2][4][-2] = -6
length(p[-1][-1])
m[-5]['r'][-8]['t'][-2]['i']['z'] = 1
q['m']['a']['p']['g']['a'] = 'i'
j['p']['x'][1][4]['m'][-6][-1] = -6
r['v']['e']['n'] = p[-6][-3]
test(z[0]['m'])
z['f']['s']['v'][9][0] = {0: {1: 'f'}, 'b': {'q': 'w'}, 'h': {-9: -4}, 'n': {4: 'c'}, 'u': {'v': 'd'}, -2: {-8: 'z'}, -1: {'d': 'u'}}
w[4][2] = r[1]['n']
test(e[-6]['z'])
m[1] = 'w'
test(j['w'][7]['p']['b'][-1][8])
u['b'][6][-5]['y']['s']['j'][-8][-3] = h['h']
p[1]['g'] = -7
length(z[-2][8][-3])
u['b']['j'][0][3][-7]['h'][1] = -2
length(b)
length(t[-5]['l'][5]['i'])
l[-4] = {4: {-8: {7: 'b'}, 9: {-8: {-8: -3}, 4: {6: -5}}}, 5: {9: {'z': 'a'}, 'z': {'m': 'k'}}, 'o': {'h': 6}}
length(x[-4][-8]['c'][-6])
test(m['v'])
q[-1]['o']['c'] = h[4][8]['d'][4]['o']['w']
length(x[7][5]['r']['s'][9]['c']['i']['p'])
e['a'][-7][5] = {'a': {'q': {'e': -4}, 'g': {8: -5}, -2: {5: 8}}, 'e': {'v': 5}}
length(b['v'][7])
m[3]['k']['k'][3]['o'][6]['g'][-4] = 3
length(o['z'][3]['e'])
y[-8]['r']['m']['i'] = {'x': {'p': 'g'}, -1: {'x': {-4: -3}, -2: {'a': 4}}}
g[5][7]['j'][-8]['c']['e'][-9][1][-4] = d[1]['g'][-6]['d'][-4]
test(z[0]['m']['k'])
test(g[-1]['a'][-8][-6][6])
b['w']['f']['a'][6] = j[5][-6]['c'][-2]
i[9][7]['c'][-5]['d']['l']['y']['b'] = 'o'
h['p'][-5] = i[3][6]['y']
d[2]['y'][-2] = -3
test(x[-4][-8]['d']['r'])
length(d[-7][-2])
p[7]['q'][-3]['t'][-2]['m'] = 5
length(t[-6])
d[1]['g'][5] = 1
b['a'][3][2]['v'] = 'p'
k['x'] = 'd'
test(q['m'][3]['r']['q'][-8]['h']['l'])
j['f'][5][-4]['f'][-8]['p'][-1] = {'a': {2: 8}, 'b': {3: 'j'}, 6: {4: {'f': 'd'}, -9: {-5: 7}}, 'q': {-2: 6}, 'v': {'k': 'i'}, -1: {-1: 0}}
k[1][1]['k']['x'][-4] = -2
test(g['i']['n'])
length(r[1]['n'])
test(x['m'][6]['r']['f'][7][-8][-4][4])
length(g[-1]['a']['g'])
l[0][6]['s']['z']['b']['s'][-4] = w[-5]['o']['p']['l']['w'][7]['e']
p[-1]['t']['p'] = {'j': {2: {'r': -7}, 'u': {-6: 'b'}}, -2: {-4: {'r': 7}, 'f': {1: {'y': 'b'}, 't': {-1: -4}}}}
test(d[3][-6]['z'][7]['q'])
l['s'] = -5
length(p[-2][5][-8]['z'][-9])
l[-4]['o']['h'] = 6
i['o']['l']['t'][-7]['b']['g']['e'] = 'd'
t[0]['t']['f'][7][-8][-4][4]['e'] = j['w'][7]['j'][-8]['c']['e']['u']
test(r[0]['x'][7])
o['q'] = {'y': {'t': {2: -5}}, 1: {'w': {'q': -5}, -1: {'o': 0}}, 4: {'i': {'w': 9}, 'b': {'x': -1}, 'l': {'i': {'w': 'w'}, 9: {'c': -9}}}}
u['b']['f']['m'][0]['v'] = 'w'
n['v']['t'] = {-8: {-4: 1}, -7: {9: 9}, 2: {6: 1}, 'r': {'s': 'w'}}
j[5][-6]['k'][7] = {1: {'a': {-1: 9}, 'k': {3: -1}, 2: {4: 'z'}, -1: {'d': 'j'}}, 3: {3: -2}, 5: {'p': {8: {6: 'x'}, 'l': {'d': 'z'}}, 4: {'s': {-5: -2}, 'f': {-9: -5}}}}
h[-8] = j[-1][5][-2]
n['v']['t'][-7][2] = 'g'
j[5][-6]['k']['g']['j'] = {8: {'g': 'j'}, 'p': {-8: {'z': 4}, 'u': {'n': -9}, 'n': {'k': 'm'}}, 'm': {'v': 'd'}, -2: {'r': 'q'}}
d['a'][9][-3] = 'h'
length(a[6])
r[5] = t[-1][1]['f']['w']
length(q['m']['a']['p']['g'])
c[-1]['t'] = m[3]['z'][-3]['y']['e']['k'][-2]
x[7]['x'][0][7] = {5: {-4: 'c'}, 'f': {-9: 9}}
b['a'][-3]['p'][6] = 'w'
z['i']['t'] = 'p'
length(u[-6]['u']['y'])
j[5][-6]['c'][1] = -8
t[-2][3][5] = {'y': {1: 'a'}, -5: {'x': {1: 'v'}, -6: {5: 0}, 'z': {'b': -3}, 'k': {2: 7}}}
e['t'][-5][-6] = c[8]['n']['t']['c']
length(u[-5]['o'][-6][8]['j'])
test(j['w'][-1][-3]['r'][5][-1]['t']['f'][7]['m'])
y[8]['g']['g'][-3]['y'] = a[5][-4]
test(g[0][-8][3][-2]['z'][-4][8])
test(m['v'][6][6])
d[7][-4][-9]['c']['v'] = 'h'
length(n[6][-5][-2])
z[-7]['y'][-6]['y'] = {'h': {-8: {'b': 9}, 2: {9: 'w'}, -1: {'f': -6}}, 'd': {'i': {'j': {7: -6}, 'l': {'a': 'g'}}, 0: {1: 'n'}, 'g': {4: 'v'}, 'v': {'c': -8}}}
l['e']['s'][6][-3]['x'][8]['p'] = 'i'
d[9][6][-3]['t']['d']['i']['a']['t']['u'][6] = -2
b['w']['y'][-2]['w'][-2]['w'] = 'o'
test(u['m'][4][-2][5][-2])
length(b['n']['u'])
length(x[-4][6][-1])
a[8]['g']['l']['t'] = 'm'
length(i['a'])
v['r'][5]['t'][5]['w'][2][6][-6] = 'm'
c['e']['m'][-4][-5]['w'][9][-9]['g'] = -7
length(l[2]['d'][3][-4]['n'])
i[-3]['o']['c'] = {9: {'r': {'p': -7}, 'b': {-4: -2}, 7: {2: 2}}, 's': {4: 'u'}}
x['m'][9][0][-9] = 'o'
u['m'][4][-2][5][-2]['a'] = 4
n['v']['t'][2]['i'] = {'q': {'r': 6}, 6: {'i': 7}}
test(h['h'])
z['f'][0][6][-9][3]['e']['c'][5] = {8: {-8: -3}, -8: {'j': 'n'}, 'v': {'m': -8}, 4: {6: -3}, 'f': {'v': -2}}
length(g['n'][-6]['w'])
n[-8]['v']['a'][8] = 'f'
f[0]['d'][-4] = 9
k[-3]['m']['f'] = {8: {'y': 'h'}, 0: {'o': -4}, 'c': {'u': 'x'}, 'w': {9: 'u'}}
t[-6][3]['y']['k'] = {3: {9: {8: -6}, -3: {'a': 'w'}}, 6: {8: 2}, 'f': {'g': 't'}, 7: {8: 5}, -8: {0: 'v'}, -2: {1: 8}}
test(l[2]['d'][-2])
b['v']['k']['i'] = {'h': {'j': -1}, 5: {'w': 2}}
l['u'] = p[-1]['q']
test(r[5][2][6])
u['m'][4][-2][-1]['o']['o'] = 'h'
d[9][6][-3]['t']['j']['u'] = 1
z[4][7][1][6][9][-5][-5] = {-4: {-8: {4: 'b'}, 's': {'p': 'y'}}, 'l': {'j': -2}}
t[-6][3][4][4] = z['i']
test(y)
l['u'][-6] = 'h'
test(a[-2]['l'][-8])
b[-1][1] = 'p'
length(c[-8][-6])
p[1][3][-7][-8]['p']['r'] = 'k'
a[6]['v'] = -4
b[-4]['b'][-9][8][5][-4] = {-8: {-4: 'a'}, -7: {-3: {8: -3}, 6: {'p': 'c'}}, -4: {'u': -3}, -2: {5: 5}, -9: {9: {-5: 8}, 7: {'l': 'f'}}}
x['m']['s'] = -8
length(e)
g[8][5][7] = m[3]
k[-3]['m']['f'][0]['n'] = f[9]['o'][0]
v['q']['i'][-5]['v']['p'][-6][4] = 2
r['g']['o'] = 'p'
test(r[2][-6])
g['n'][3][-1][-3]['h']['g'][-3][1] = {'y': {-5: 'u'}, 6: {'c': {-9: -6}, 3: {'n': -4}, -9: {-8: 7}}}
test(c[-9]['o'])
g['n'][3][-1][5]['s'] = {-6: {6: {'c': -7}, 7: {-5: 'o'}}, -5: {1: {'m': -9}, 3: {1: 'u'}, 'l': {0: 'f'}, 5: {'b': 'h'}}}
test(h[3])
test(e[1]['t']['w']['s'])
f['o']['w'][-5][0]['f'] = {'z': {'i': {-8: {-6: 7}, -7: {-7: {4: 'l'}, 'n': {9: 'l'}}}, -2: {'z': -3}}, -3: {9: {'s': 'v'}, 'd': {'k': 'd'}, 'w': {7: 'o'}}}
test(v[-3])
length(d[4])
test(f['g']['v'][-3]['i']['n'][4])
test(i[-3])
a['j'][8] = {0: {-6: 'r'}, 1: {8: 1}}
test(w['c']['l']['l'][0][7][5])
b[-4]['b'][-9][8][5][-4][-8][-4] = 1
c[-1]['t']['u'] = r[5]['p']
y[8]['p'][-2] = p[-1]['q']
length(n[-8])
test(i[3][-2])
test(r[5]['p'])
g['y'][7][-9] = l['u']
length(q['m'][3]['r']['q'])
length(w['p'][2]['n']['c'])
test(s['m'])
test(u)
length(h['p'][-5])
test(p[-6])
test(r['g'][-3]['b'])
w['p'][2][5]['b']['i'][-7] = {-7: {7: 'x'}, 9: {'r': 'u'}}
t['z'][5]['p'] = 'f'
m[3][-4][-4]['x'] = -8
test(r[5][8])
z[4]['u'][-7][3][-9] = {'b': {'p': 'z'}, -1: {5: 3}, 6: {'v': 'h'}, 'v': {-7: 'q'}}
b['c'] = h[4]['w']
length(s[-5])
v['i'][-9]['o'][-4][-4][-2]['v'] = -1
length(v['r'][5]['q'])
test(w[-5]['o'][-3])
n['v']['t'][-7][4] = m[3]['z'][2]['t']['t']['o']
test(p[1][3][-3])
b['c']['g'] = 'd'
test(p[1][3][-7][-8]['c'])
length(x['o']['i'][4]['d'][9])
test(l['a'][5][-3])
e['t'][-5] = {-6: {-8: {'a': 'o'}, 'r': {1: {1: 1}, 'w': {-4: 9}}}, 'u': {'j': {'k': 2}, -3: {'m': 'x'}}}
g['d'][2][-4][-4] = {9: {'w': {5: -2}, 'n': {-6: 5}}, 'k': {-8: {7: 0}, 'u': {-6: 'x'}, 'o': {'x': 9}}, 'm': {'u': 5}, 'g': {-8: -7}}
o['f'][-4][-4]['f']['i']['d'][6]['o'][-6][8]['j']['k'] = {'p': {-7: {2: 'y'}, -1: {'u': 'f'}}, 'm': {'x': {'s': 'q'}, 'z': {'y': 'p'}}, 6: {0: {'c': 6}, 'e': {'l': -9}}, 'n': {'i': {'g': 'j'}, 2: {-1: 2}}}
length(t[8])
p[-2][-5] = 'q'
h[4] = z
m['v'][6][6] = j['f'][5]
length(r[0][5]['a'][-4][-5])
n['q'][1][-5]['f'][2] = {'c': {'p': 'x'}, 'u': {'g': 'e'}}
p[1][3]['h'][0] = 'p'
g[5][7]['p'][4]['h'][-2]['o'] = 'l'
test(q['y'][-7][-2][-7])
u['g']['t']['d'][6][-9] = {'h': {7: 3}, -6: {'f': 'k'}, -5: {5: 6}, 7: {7: 'x'}}
length(w['c']['l']['l'][0][7]['f'])
length(x['m'][6]['r']['f'][7]['b']['u'][-9]['g']['u'])
l[1]['j']['k'] = {8: {9: 2}, 'k': {4: 5}, 'd': {'d': 3}}
l['a'][5][-5][-9]['p'][-4] = 'k'
h[-8]['v'] = -7
length(d)
length(h[4][4]['u'])
test(z[-4]['j'][6]['b'])
test(r[7])
v[-3]['y'][4][0][1]['t']['r'] = {'c': {'u': 1}, 'e': {7: 'v'}, 'h': {'p': {'l': 5}, 'b': {-3: {7: 9}, 'v': {'i': 'x'}}}, 'l': {'h': {-8: 'm'}, 3: {9: 7}}, -9: {-9: 'g'}, -6: {3: 'x'}}
s['m'][8][9]['a']['h']['i']['f'][7] = s['z'][0][-1]
v[-3]['y']['j'][-3][-2][2][-5] = -9
length(u[-2][-5]['o'][-6]['p'])
s['v']['p']['b'] = {0: {'z': {2: 'l'}, 'd': {'i': -9}}, 4: {6: 'r'}, 'k': {'v': 'o'}, 'j': {'g': {6: 'g'}, 'v': {8: 'w'}}, 's': {'d': {2: -5}, -1: {-7: 4}}, 'u': {3: -8}}
v[-4][-1]['i'][-2] = 'i'
test(c['e']['n']['i'][2]['b'][-1])
length(i[-8][6]['k'][-1][8])
length(c)
q[-8] = 'z'
test(q[-1][0][7])
t[-8]['w'][0]['d'][-6]['d'][-3][-8]['a'][-6] = l['a'][5][-6][-6]
o[0]['d']['l'][-3][-5]['a'][9] = 1
r['g'][-2]['b'][-5]['f'][7] = 3
y[0]['f'][5][-8][2] = 8
l[1][7][-6][0][8][-1] = {2: {2: {'k': 's'}, 'd': {6: 0}}, 'j': {8: {3: {-8: 'a'}, 6: {9: 'd'}}, -9: {'j': -1}}, 't': {-8: {'h': {-3: -2}, 1: {-6: 'r'}}, 'z': {4: 'p'}}}
length(n['v'][0]['p'])
e[-6]['z'][7]['e'][-4][6]['w'] = 'i'
o[0]['d']['l'][-3][-5]['q'][3]['e'] = g[5][-1]['a']['w']['f']['a'][6]
length(a[-2]['l']['a']['d'])
test(l[-4][5][9])
u[3] = -8
q['y'][-7][9]['t'][7]['q'][-3][3][-2]['z'][-4][8][2] = 'q'
length(y[-4]['b']['z'])
length(x[-4][6][9][7][6]['y'])
length(r[5]['p'])
test(e['t']['z'][0][1][-8][-4])
c[-1]['t']['u']['e'] = r[0][-7]
length(q['y']['e'])
test(p[-6]['s']['o'][5]['a']['g'])
f['j'][-5][1]['u'] = {'i': {-2: 8}, 'p': {0: 7}, 'e': {'y': 'd'}, 0: {1: 'v'}}
q[-1][9] = 3
test(n[6])
r[0]['i'] = 1
a[8]['g']['l'][5] = l['u']
test(x['m'][6]['r']['f'][7]['b']['u'][-9]['g']['h'])
o['q']['y']['t'][-6] = 'n'
length(z[-7]['o']['k'])
k['x'] = -3
length(o['z'][-6][9])
test(b['w'])
f['j']['a']['p'] = i['a'][-3][4]['w'][3]['z']['c'][-7]
c[-1]['t']['u']['e']['f']['l']['y'][-9] = m[3][0]['r'][-9]
x['s'] = -5
test(u[-6]['u']['y'])
x['o']['i']['d'][6]['o'][3][0][-3] = 'b'
test(y)
length(g[-6]['b']['v'][1])
length(g['y'][7])
a['j'][8][1]['y'] = -5
c[-8]['f'][2] = {'r': {'i': 'j'}, 6: {3: 'z'}}
length(j[-1][8]['s'])
length(a[-2]['l']['a']['d'])
o[-3]['b']['o'][7][-5][-5] = v
k[7]['o']['e'][4]['h'] = {-3: {-9: 'h'}, 'f': {-8: -1}}
m['v'][6][-5]['r'][0]['e']['r']['v'] = {'b': {'d': 'e'}, 'j': {3: 2}, 't': {0: {-8: 'h'}, 'w': {'y': 4}}, -3: {'l': -8}}
length(f[9]['o'][0]['f'][-3]['d'])
k['w'][3][2][-3] = {'x': {-9: 't'}, 'e': {-8: 6}}
test(w)
z[0]['m']['k']['s'] = 4
u['g']['t'][8]['d'] = m[-5]['v'][3]['b']['y']
p[-2][5]['v'] = 's'
q['m'][3] = -7
b['c']['t']['k']['j'][9][-4][1] = {3: {'a': 5}, 'g': {-2: {6: 'b'}, 'n': {'b': 'o'}}, 'w': {-3: {7: 9}, -2: {'l': 'q'}}}
e['g'] = 'g'
h[-8]['v'] = -3
c[-8]['f'][2][0] = l
test(r[5]['q'][3][-9])
r[7]['l']['m']['s'][0] = 'f'
f[9]['o'][0]['f'][-3][9] = {1: {'v': 'f'}, 'm': {8: {'g': {9: -3}, -9: {'j': 'u'}}, -7: {'k': {-7: 'd'}, 3: {'c': 'y'}, 'd': {-2: -1}}, 'n': {'f': 'g'}}}
x[7]['x'][0]['k'][3][0]['a'][-2]['y'] = {'a': {6: -9}, 3: {0: -1}, 's': {'j': {3: 'x'}, 'm': {8: -7}, -3: {'s': 7}}, 'u': {'j': 3}, 'z': {'w': 4}, -1: {'p': -1}}
q[-1][0][7][-9][9]['j']['t']['i'] = {'c': {-6: -2}, 8: {0: -4}, 'h': {'d': 'l'}, 'm': {9: -6}, 'w': {'a': {-4: 3}, -3: {'v': -6}}, -3: {0: 'v'}}
length(l)
q['m']['a'][6] = -2
q['m']['a']['p']['g']['a'] = -4
test(w[4][2])
v[-3]['y']['j'][-3][-2][3][2]['b'] = 'u'
test(l)
b['v']['t']['x'] = {'a': {4: 'p'}, 'i': {'k': 5}, 'n': {'q': 4}, 'x': {'m': 4}, -5: {7: 'h'}, -3: {2: 'b'}, -2: {-7: {3: 'l'}, -5: {'d': 'j'}}}
length(v['h']['f'])
test(p[-1]['t']['p']['j'][2])
length(c)
p[1] = 'g'
f['j']['a']['p']['n'] = {8: {-4: {'b': {'x': 'o'}, 4: {'c': 3}}, 'n': {0: {-8: 5}, -6: {7: 'b'}, 'b': {'f': 8}}}, 9: {9: {'k': {1: 5}, 3: {2: 'i'}}, 'z': {'i': 'p'}}}
length(z[0][-3][-3]['u'][6]['y'][-1])
h[4][-4]['j'][6][8][9] = c['s'][-4]['h'][2]['e'][1]
g[-1]['a']['p'][9][9]['f'] = 'p'
y[0][7] = -4
length(j['f']['l']['j'][3])
length(z[4][7][1]['v'][7])
e['t'][-3][-9] = 'f'
length(b['i'][-1])
test(x[-7][6][-3]['t']['d'][-3])
test(o[-3][-5]['q'][-9]['t'][-5])
test(q['m']['a'])
test(m[3][0]['r'][-9]['w'])
r[2][-3][6] = 'w'
d[7]['t'][-7][-1]['i'] = -2
a[6]['v'] = -6
o['f']['z']['o']['d'][2]['c'] = 0
p[-1]['s']['d'] = 2
q['y']['e'][9][-3] = 'r'
o['b'][8]['n'][8] = -2
l['a'][5][-5]['f'][-4] = h
t[-8][7][1]['c'][3] = h['p']['p']['r'][-1]
test(z['f']['e']['s'][6]['y'][-6])
q[-1]['o'][6] = {'g': {8: 'k'}, 'h': {-8: {1: 'w'}, 'd': {'w': 'b'}}, 'k': {0: 4}, 'm': {-4: 'u'}, -8: {-8: 'w'}, -3: {'z': -1}}
i[9][-8]['y'] = 'z'
length(r['v']['e']['n'][1]['w'][-2])
a['j'][8][0][-6] = c[-8]['f']['w'][5]
u[-5]['b']['w']['s'] = {1: {8: {'d': -7}, -2: {'x': 1}, -1: {5: 'r'}}, 'c': {-4: {0: {'c': {-7: -1}, -6: {'a': 'k'}}, -1: {-6: -4}}, 'e': {-7: 'h'}}, 'x': {-7: {'p': 'd'}, 'w': {'l': 1}, -2: {-8: 'o'}}}
length(k[1][-3][-6]['q']['s'])
a[6]['v'] = g['s'][0]['m']['u']
i['o']['l']['t'][-7][-1]['i'] = 'n'
test(q[-1][-7][7])
v[-3]['y'][4][0][1]['k'][7] = 9
test(z['i'])
test(s[-4])
e['t'][-3]['u'] = {0: {9: 2}, 1: {3: 't'}, 'c': {'z': -8}, 'b': {'o': 5}, 7: {'n': 'c'}, 'r': {-6: 5}, 'w': {'y': 'o'}}
test(d)
s[5][-7]['j'] = 'd'
o[-3]['z'] = {'c': {-7: {'w': 9}, 'c': {'e': -4}, 'd': {-3: 8}}, 'j': {7: 9}, 4: {9: {-4: -7}, 'l': {'d': -2}}, 't': {'q': {'t': 8}, -2: {'w': 7}}}
f[9]['o'][0]['f'][-3] = u
p[7][2][6]['i']['s'][1]['q'] = 's'
j['w'] = -9
test(d['z'][-5][-6]['j']['t']['i'])
e[-6]['z']['c']['t'][-3][-6][5][1] = i[-3]['o']['c'][9]['b']
t[-1]['o'] = -1
e['a'][-5]['q'][-8][-8][-9]['i'][-2] = 'l'
d[1]['g'][4]['w']['p'] = -1
length(h['h'])
g['n']['b']['x'] = d[4][-5][5]['y']
test(e[-6]['z'][7])
test(l[-6][-5]['b'][-7][5][1])
d[7][-4][-9]['c']['h'] = 'c'
s['v'][-6]['v']['y'] = -4
length(j['f']['l']['l'][1][6]['z'][4])
n['q']['c'][2]['o'] = {7: {-1: 'w'}, 'i': {-9: {-9: 's'}, 7: {-6: 'e'}}, 'l': {6: 'j'}, -9: {'z': 'q'}, 'z': {-4: 7}, -4: {'f': 0}, -3: {'l': 'e'}}
i[-7]['k']['g']['a'] = 'c'
length(b['v'][8]['r'])
q[2] = r['g'][-3][3]
q[-1][0][7][-9][-4]['r'][-9] = {-8: {0: {-6: {1: 'w'}, 'v': {'f': 'd'}}, -1: {'s': 'p'}}, 'i': {'h': {9: {-1: 2}, 'r': {-8: {6: -7}, 'n': {'y': 'w'}}}, -4: {'t': {'d': 'p'}, 7: {0: -5}}}}
q['m']['a']['h'][7][4][4] = 1
length(i[-7][-6])
length(b['n']['u']['g'])
t[-2] = 't'
s[-4]['d'] = -6
e['a'][-3]['t'][8][-9]['u']['t'] = -4
length(c[-8][-6][3]['g'])
test(x['o']['i'])
length(k['b']['e'][-6][1][-6])
p[7][2][6]['i'][0][-4]['o'] = 'z'
z[-4][5][3]['i']['u']['a'][-3][-4][-1] = l
test(t['z'][5])
a['j'][8][1]['y'] = {8: {'h': 9}, 'h': {-5: 6}, 'k': {-1: 'b'}, 'j': {'n': 'f'}, 'n': {'j': 'k'}, 'w': {'v': 6}, -7: {'f': 'g'}}
f['e']['s']['v']['v'] = 6
g['d'][2][-2] = 'h'
b['i']['h']['x']['a'] = 'y'
t[-1][6][4][-9]['v']['f']['l'] = {'s': {-3: 3}, -5: {'m': -7}, 5: {'f': -1}, -2: {'m': -9}}
m[3]['k'][-8][-5] = m
w[4]['w'] = t[0]
m[3]['z'][-9][-9] = v['h'][-3]
test(t['z'][5])
v[5]['y']['h'][2]['d'][-8]['x'] = 'n'
o['f']['z'][-7]['p'] = o[0]['d']['l']['c']
length(c[-1]['t']['u']['e'][3]['a']['r']['s'][4]['u'][-8])
x['o']['i']['d']['o'] = 'n'
t[-1][4][-7][-8][-2]['u']['p'][-7] = 'f'
test(k[-3]['m']['i'])
r['t'] = -8
q['m'] = -8
test(s[-5]['p']['c']['g'])
test(x[-4][-8])
m[1] = -5
n['q']['z'] = 'z'
x[-7]['s'] = 'o'
length(x['m'][6]['r']['f'][7]['b']['u'][-9]['g']['h'])
t[-5]['l'][5]['i'][-8] = -8
test(f['e']['s'][1])
length(y[-8]['r'][5])
y[8]['p'][-2][2] = 2
r['g'][-3]['t']['q'][-3][-9] = -4
p[-1]['s'][-6] = d['a']['r']
i['a'][-3][4]['u'][-7]['i'][-6] = {-7: {'x': 'v'}, 'z': {'b': {'v': 'a'}, -3: {-1: 't'}, -1: {0: 2}}, 'l': {3: -5}}
h[-8]['v'] = {3: {8: 'f'}, 'r': {'e': 9}}
w['s']['w'][-8]['l'][0][7][5][-4] = 3
h[4][-7]['y'][-6]['y']['d'][0][-9] = 't'
length(j['p']['x'][1]['g'])
y[0]['f'][5]['a']['v']['q']['y'] = 'm'
b['v']['t']['x'][-2][-5]['s'] = b['c']['t']['k'][5]['y'][-6]['j'][-8]['c']['e']
o['z']['m']['c']['u'] = r[5]
test(j[5][-6]['c'])
test(d[-7])
d['a'][9]['i'] = 'm'
test(f['e']['z'])
test(e['t'][8][5]['z'][4][-7][-8]['i']['c'][-8][6][4]['x']['v'])
m[3][7][-7]['r'] = {1: {'p': 's'}, 'w': {8: 'l'}}
t[-6] = 'k'
length(j['p']['x'][-6]['p'][-6][-2]['c'])
k[1]['x'][2][4][-2]['a']['e'] = -4
y[0]['f'][5][7]['e'][6] = v['q']['i'][-5]['z']
a[-2]['l'][-8][-8] = 0
u[-5]['o'][3][0] = {'d': {'i': {6: 1}, -6: {'j': -8}}, 'g': {2: -9}, 'k': {'r': 'i'}, 'o': {-8: {4: 'g'}, -4: {2: -5}}, 'p': {-2: 'o'}, 'x': {'w': 1}, -5: {5: 'y'}}
x['o']['i'][4]['d']['v']['f']['y'] = 'w'
f['j']['k'] = -4
u['m'][4][-2][5][-2][-2] = 8
z[0][6][-5][-7][4]['i'][-1] = {'i': {'k': -7}, -6: {-7: 2}, 'b': {'z': 7}}
c[8]['x'][5] = 0
i[9][-8] = n[6][-5]['c']['g'][-7]
y[-8][1]['s'] = 'w'
b[-1] = b['w']['f']['a'][6]
length(n[6][-6])
r['g'][-3]['d'] = 'x'
length(b[-4]['b']['w'][-2][-3])
r['g'][-2]['b'][3] = q[-1]['o']['c']
m['v']['n'] = -3
z[4]['u'][2][4] = y[-8]['r'][5]
test(y[0][9]['c'][3][-2][2][0][-4][4][-8])
t['a']['s'] = 8
e['a'][-3]['t']['c'][-7] = d[7][-4]['b']
test(m['v'][6][-5]['r'][0][-8][-8])
test(s)
i[2] = {'i': {'b': {-1: 'r'}, -9: {'m': 'l'}}, 8: {-8: {'e': 'x'}, 'k': {2: 'b'}}, 6: {'p': 6}, 'w': {-1: -7}}
e[1] = 0
length(t['z'][5])
h['h']['r'] = {5: {'k': 'r'}, 'o': {3: 'u'}}
y[-4]['e'] = 8
u[-8][-2][5][-8]['z'][-9]['i'] = -1
j[5][-6]['k'][7][1]['k'][3] = 'z'
z[-4][-4] = {2: {-9: 'h'}, 'b': {1: {'g': 'f'}, 3: {-5: 'w'}}, 7: {'a': {'s': 0}, 'h': {'e': 'k'}}, 'j': {-9: 'b'}, 't': {'c': {'c': 0}, 'b': {-4: 3}}, 'w': {3: 'c'}}
length(o['z']['m']['c']['u'][5])
length(k['b']['e'][-6][0]['x'])
q[2]['y'] = w[4]
test(i[2][8][-8])
p[-6]['s'][1] = 'g'
test(r[5][-8])
y[-4][-2]['o']['i'][4] = q['y']['e'][9]
x[7]['x'][0]['k']['r']['b'] = s[5]['s']
test(c[-9]['r'][-1])
p[-1]['t']['p'][-2][-4]['r'] = -7
v[-3]['y']['j'] = 'i'
b[-1]['v'] = -2
d[7]['t'][-7][-1]['i'] = p[-6]['s']['o'][5]['a'][-2]
i[9][7]['c'][-5]['d']['l']['b']['q'] = 'n'
test(j['f']['l']['j'][0])
test(f['o'][-9]['y']['a'][6]['i'][-5]['l'])
length(g['i']['i'])
length(t['t']['u']['j'])
h[4][-4][-4]['t'] = {1: {'i': {-6: -3}, 8: {'j': -4}, 3: {-3: 'o'}}, 'e': {'c': {'c': 'd'}, 5: {-7: 9}}, 6: {8: 'k'}, -7: {'i': {-9: 'b'}, -7: {'x': -3}, -3: {5: -8}, 'l': {'g': -7}}}
z['i'][-1] = 'd'
r[0][-7]['f']['l']['b'][-8] = 'v'
k['b']['e']['y'] = z[0][6]
p[-6]['s'][5]['z']['t'] = 'p'
length(t['t']['u']['j'])
e[2] = {'b': {-2: 'm'}, 'l': {6: 0}}
e[3]['v'][4]['i'][-8][9][4] = f['g'][2][0]
test(y[-4]['b']['z'])
length(k[-8]['f']['i'][2]['m'])
w[-5]['o']['b'][-2][3][-5][9]['l']['t'] = {8: {'o': 'k'}, -4: {'t': {'l': 7}, 6: {'j': 's'}}, 't': {-9: 'x'}}
k[7][-6]['q']['u'] = 0
g[-6]['b']['v'] = 'u'
i[-8]['i'] = {'m': {-8: {8: 'x'}, 'b': {'a': 'p'}, 'z': {'v': 'a'}}}
length(b[-4])
q[-1][5] = {2: {-1: 'f'}, 'r': {'b': -8}, -9: {1: -5}, 'w': {-3: {'a': -9}, -1: {5: 1}}, 'v': {2: {1: 'c'}, -4: {'t': 0}}}
z[4][7][1]['b'][4]['d'][-8] = v[-3]['y'][4][0][1][3]
test(z[4]['w'][3]['z'][7]['e'])
k[7]['o']['e'][4]['i']['s']['p']['p'] = 'a'
y[-8][1]['f'] = 6
r[2][9][-5] = {0: {'r': 'v'}, 'c': {'p': {4: -3}, 'j': {'a': -9}}, 'g': {'q': 'q'}, 'p': {3: {'s': -2}, 'w': {'z': 'b'}}, 'r': {-8: 'u'}, 't': {4: {3: -5}, -4: {'l': 'w'}}, 'w': {-7: 'c'}}
length(f[9]['o'][0]['f'])
d[1][-5][-3]['s']['s']['g'] = 'e'
o[-3][8]['e']['a']['x'] = 'h'
z['f'][-9]['i'][-9]['s'] = 'v'
v['r'][5]['q']['u']['d'][6][0]['q'][2]['f'][-7] = o['q'][4]['b']
test(i['n'])
test(q['y'])
a[-2]['l']['w']['i']['e'] = 4
i[-8]['j']['g'] = t['a']['h']['v'][0]['p']
h['h']['r']['o']['z'] = 5
i[-3]['o']['c'][9]['b']['l'] = 'b'
c[8]['x'][5] = 'y'
g['s'][0]['g'][5][2] = e['t'][-5][-6]['r']['w']
test(n['q'])
b['v'] = {4: {'h': {'q': 8}, -8: {'p': 'j'}, 'r': {'a': 'r'}, 'y': {'n': 0}, -4: {'t': 'p'}, -3: {'u': 'x'}}, -1: {'x': {'p': 'x'}, 'z': {'f': 0}, 'l': {-2: -8}}}
test(o)
x['o']['i']['d'][6]['o'][3]['a'][5][0]['h']['i'][7] = 'z'
test(k[7][-6])
q['y']['l'][-5] = {2: {'h': -2}, 3: {'b': -5}, 'e': {-4: -4}, 5: {8: 'i'}, 'j': {'a': {9: 'l'}, 'k': {'t': 'k'}}, 'x': {9: 'h'}, -1: {'h': {'t': 'j'}, 9: {'l': 8}}}
w['p'][2]['q'][9] = 'j'
length(t[8][5][3][9]['a'])
length(l[-5])
n['q']['c']['w']['t']['f'][7]['t']['a']['y'] = r[5][8]
length(u[-5]['o'][-6][8]['j'])
test(g[8]['h'])
i['a'][-3][-7]['y'][-6]['y']['d']['i']['j'] = b['w']['y'][-6]
test(d[3]['t']['q'][-1][-6]['b'][4][-9]['n'][-6][4][-6][5][-4]['f'][-8][-8])
i[-8] = f
e[2]['b'][-7] = x[7]['i']['l']['v']
test(a[-2]['l'][-8])
b['a'][-3][5][-7] = 'j'
length(i['a'][-3]['i'])
i['n']['p'][2][6][-6] = k[-7][0][-6][4]
length(b)
length(g[5][-1][-3])
length(f[9]['o'][0]['f']['z']['i'][-8])
j[5][-6]['c'][-2]['d'] = {2: {'l': 'i'}, -1: {3: {'a': 'e'}, -4: {6: 'f'}}}
j[-1][5][-2]['v'][3][8] = 3
g[-1]['a'][-8][-6][6][-8] = -5
t['r'] = {6: {0: {'e': 'b'}, 2: {7: 0}, 'd': {3: 2}, 'w': {-5: 'i'}}, 'w': {'r': {-5: 9}, 5: {'p': 'p'}, -2: {'o': 'r'}}}
test(x[-4][-8]['d']['r'][7]['s'])
test(u['g']['t']['a']['t'])
test(r[0][-6][7][-3]['n'])
test(x['m'][9][-9]['i'])
c['i']['n'][-8][3][0][3][8] = -1
test(i[-3]['r'])
t[-9] = {8: {'j': {'q': 'q'}, -4: {5: -4}}, 'e': {'y': {3: 5}, -7: {9: 7}, 'j': {'j': 'j'}}, 6: {-8: {8: {-9: 'q'}, 'o': {'y': {'c': 'r'}, -5: {'q': 'o'}}}, 'l': {-6: 'r'}}}
test(z[-2]['h'])
length(a['j'][8][0][-6])
m['v'][6][-6]['l']['j'][8][-4] = 'y'
test(f['e'][3])
t[-1][6][4][-9]['j'] = {'k': {4: 9}, -2: {'m': 'c'}}
e[3][2] = -1
t['t']['g']['n']['v'] = {-8: {-8: {'r': 'w'}, 'k': {'m': 1}}, 'c': {'k': 9}, 5: {3: {-4: -3}, 6: {'q': {1: 6}, -7: {5: -9}}}, 'w': {-5: -9}}
test(g['d'][2][-7])
test(m['v'][6][-6]['l']['j'][8])
length(u[-6]['u']['y'])
n[6][-3]['t']['c'][-7][9] = 'q'
length(w['c'])
x[-4] = 'c'
test(w['c']['l']['l'][0]['k'][3][0]['c']['t']['k']['j']['x'][0]['x'][7][2][6][-6]['l'])
d[3]['t'][8][5]['z'][4][-7][-8]['t'][4][0][1] = 'w'
test(c['i']['d']['k'])
t[8][5][3][9]['y'][-1] = -4
length(k[2]['h']['n']['o']['z'])
y[8][-3][7]['j'][-2][-4] = 4
test(w)
a[8][-9]['z']['z'] = {-6: {'a': {-9: 4}, -5: {'p': {'l': -6}, 'f': {-8: -5}}, -9: {'n': -4}}, -4: {'q': {-7: {-6: {-2: -1}, -5: {-4: {5: 'y'}, -2: {'p': -9}}}, 'p': {'f': 'd'}}, 7: {'t': {'h': -6}, 'o': {5: 'h'}}}}
w['p'][2][5][-9][-6]['d'][-3][-4] = {'s': {-9: 4}, 't': {'x': 'q'}, 'n': {'h': 7}}
m[-5]['v']['i']['w'] = {'u': {'k': {'n': -5}, 6: {-8: 'x'}}, -6: {-8: {9: 'a'}, -9: {'r': 'w'}}, 'b': {'g': 'k'}, -9: {-7: 'y'}, 'v': {'m': 2}}
w['s'][7][-6][1] = 'i'
p[7]['q'][-3][3][-2]['z'][-4]['n']['j'] = -9
m[-5]['r'][-8]['k']['d'][0][-6][7][2][6] = {'z': {-8: {'z': 'p'}, 'm': {'m': -5}}, 'o': {'x': {-9: 3}, 's': {-3: 7}}}
length(i)
l['u'][2] = p[-6][-3][1]['g'][-2]
s['m'][8][9][-4][4] = 6
y[-8]['r'][5]['e'] = 'z'
g[9] = q[2]['y'][2]['o']['z']
length(b[-4]['b']['w']['f'])
b[-4]['b'][-9][8][5][-4][-4]['u'] = 'c'
length(v['i']['s'])
test(d[9][6][-3])
test(l[0][6][-9][3])
j['f']['l']['y']['p'] = w
s[-5][-6]['s']['s'][6][7][0][-2] = -3
test(j['p']['x'][-6]['p'][-6])
test(f['o'])
test(l)
s[-4][-2][8]['g'] = i[2]
r['v']['e']['n'][1]['q'] = {0: {1: 5}, 'b': {'m': 'j'}, 4: {'p': 'x'}, 9: {'x': -6}, 'j': {-6: 'l'}, 'h': {1: 'p'}, -1: {6: {-7: 3}, 'w': {3: {-4: -8}, 5: {'d': 6}}}}
e[3][0] = q['y']['e'][9]
g[9][-4] = k[7]['o'][1]['k']
y['n'] = 'o'
r[2][-6][9][-8] = 4
r[6] = {'c': {'q': {'j': -1}}, 7: {'e': 4}, 9: {8: 9}, 2: {'r': 8}, 'u': {'l': {6: 'r'}, -9: {'b': 'z'}}, 'h': {0: -7}, -4: {'s': 'x'}, -2: {'e': 7}}
r['t'] = r[7]['l']['m'][5]
length(z[-4][6][6][0][-1]['o'][6][-3][-4]['r'])
length(n)
length(a[5][-7])
n[-8]['r']['b']['x'] = 't'
test(h['h'])
length(t[-1][6][4][-9]['y'])
test(l['e']['s'][-4]['t'][5][2])
f['j']['a']['p'] = n
length(y[8][9]['w'][-4])
r[2][-6][1] = 't'
test(q[-1][0][7][-9][-9][9][6][-2][8])
length(n['q']['c']['w']['t']['f'])
test(g[-6]['b'])
v['h']['f'][-8] = {-8: {-4: 'g'}, -3: {'k': 'q'}}
length(c[-9][-4]['b'][4]['g']['i'])
n[-8]['p']['e']['a'][-9] = 7
b['i'][-7][1] = {'q': {-3: 'z'}, -8: {-3: 'p'}, 5: {1: {-7: {'q': 0}, 5: {-4: 'd'}}, 'n': {9: 'f'}}}
length(a)
length(k['b']['e'][-6][1][-6])
l[-6][-5][1] = r[6]['u']['l']
test(q['y']['e'][9])
e[-6]['z']['c'][-7]['t'] = 'y'
h[4] = {'y': {-3: 'w'}, 'k': {'b': 'd'}, 5: {'o': 'd'}, 'n': {'t': {2: 't'}, 6: {'p': 'd'}}}
test(k[7]['o'])
u[-5]['o']['d'] = 'i'
j['f']['l']['l'][1] = z[-4][-4][7]['a']
length(y[-4][-2])
f[0][1][0]['u'][3]['w'][3]['z']['c'][-7] = 't'
i['n'][-5][7]['o'][-3]['b']['a'][0] = 'n'
test(j['f'][5])
length(l['m'][-8][-1]['t']['u']['e'])
test(d[-7][9])
y[-8][1]['o'] = 'o'
length(z[4])
m[-5]['r'][-8]['t'][-2]['y'][5] = w['s']['i'][-9]['q'][-8][-6]
q[2]['y']['w']['t']['f'][7]['b']['l'][-9]['w'] = 'h'
test(l[1]['c'])
e['a'][-6]['d'][1]['w']['m'][5]['b']['o']['r'] = a['j'][8][1]['y']['h']
test(l['u'][2])
test(w['c']['l'])
o[4] = -6
n[-8]['r']['b'][-9] = d[1]['g'][-6]['d'][-4]
j[-1]['v']['m'][-2] = m['v']
n[-8]['p'][4]['e'][-6]['k'][-8] = 'b'
test(k['b'])
t[0]['t']['f'][7]['b']['u'][-9]['j'][-8] = 'd'
test(i[2][6])
j['v'] = x[-7][6][-3]['t']
test(f['o'][1][0])
r[7][4]['g'][8][0][-6]['h'] = 'a'
length(t['r']['w'][5])
s[5]['x']['y']['w'] = {'b': {-8: {-7: {'c': {'y': -9}, -9: {-1: -5}}, 'o': {'y': 'z'}}, -6: {1: -3}}, 'd': {'s': {8: {-5: 2}, -5: {'y': 'y'}}, -6: {'c': -5}, 'u': {-5: 5}, 2: {'j': {'o': 's'}, 5: {'k': -1}}}}
y[8]['p'][-2][2]['i'] = 5
length(v[-4]['w'][-3])
length(h[4]['y'])
test(t[8][5][3][9]['y'])
e[2]['b'][-7][-5] = t
u['b']['j'][0][3]['g'][2]['k'][9] = {'r': {'g': 'q'}, 4: {'c': {-4: 'i'}, 'd': {'z': 2}}, 5: {-7: 4}, 'g': {'r': -1}}
m[-5]['f'][3] = 'g'
test(b['w']['f']['a'][6]['d'][2])
length(s['m']['k'][6])
p[-6][-3][1][2] = 'v'
f['g']['t'] = -8
a[8]['g'][-7]['d'] = m['v'][6][-6]
length(e[3][0])
d[7]['t'][-4][6]['z'] = 3
length(c[-9]['r'][-1])
m[-5]['v']['e'][2] = w['c']['l']['l'][0]['k']['r']['b'][-9]
q[2]['y']['w']['t']['f'][7]['b']['u'][-9]['j'][-8] = 'k'
l[0][6]['s']['z'][2] = d[7]['t'][-4]
test(x[7]['v'][7][5])
test(j[-1]['v']['m'][-2][6])
g['d'][2]['i'][-1]['e']['m'][-4]['i'][4]['e']['i']['i'][-7] = u[-8][-6]['d'][-3]['w']
u['e']['z']['q'][6][-1]['v'] = -3
v[-3]['y'][4][0][1][3]['x'] = n[6][-3]['t'][7][3]
length(r)
l['e']['s'][0]['v'][4][9]['t'][-6]['s'] = -9
test(p[-2][5])
test(m[-5]['r'][-8]['k']['d'][0][-6][-1][-1])
a[6]['v']['g'] = s['m']['k']['w']
test(l['a'][5][-3])
z[0][6][-5][-2][3][5][8] = {'q': {-5: 'v'}, -7: {'o': -9}, -4: {'m': 's'}, 'y': {'q': {'k': -3}, -8: {6: 'q'}}}
l['a'][5][-5][3][-6] = i
test(q['y']['e']['r']['s'][4]['u'][-7])
e['t'][-3]['u'][7]['n'] = l[-6][-5][1]
j['v']['d']['i']['a']['t']['z'][8] = -5
e[3][6] = 't'
t[-5][-4]['a']['q']['n']['b'] = {0: {0: 3}, 3: {9: 8}, 'f': {'x': 'p'}, -9: {'y': 'l'}, 'j': {-6: 'q'}, 'v': {'h': 7}, -3: {-8: 'j'}}
v['x']['c'][0] = -3
test(g['i'][4])
n[6][-7][5]['a'][-2]['j'] = 'w'
a[5]['z']['z'] = 'h'
u[5]['r']['a']['v'] = 'f'
z['f']['u'][2]['y'] = {0: {-1: 'l'}, 's': {'r': {'d': -7}, 'l': {3: 'w'}}, 'n': {8: {'j': -1}, 'h': {4: 7}}, -4: {4: {4: -4}, 't': {'f': 'e'}}, 'v': {-6: 1}}
m[-5]['f'][-4] = 5
length(g[-6]['b'][-9][8][5][-4])
length(q['y']['l'][8]['e']['n'])
g['t'] = 'k'
test(z[0][6][-5]['f']['z'])
b[-1]['v'] = 'i'
n[-8]['v'][3][-3][-4]['t'][-1] = -4
j[-1][5][-2] = 1
o['b']['t']['c'][0][3]['l'] = {3: {'p': {'s': {-5: 6}, 'z': {'g': 'n'}}, 'k': {'b': 'y'}}, 4: {'m': {'t': 'j'}, -6: {-2: -6}, 'e': {'f': 3}}, 't': {8: {'p': 3}, 'z': {-8: -7}, 'o': {9: 'p'}, 7: {'w': 7}}}
length(g['y'][7][-9][2]['y']['n'][8])
c['s'][-3]['a'][0][9][6]['h'][-8][1] = o['q']
p[7]['q'][-3]['t'][-2]['i'][-4] = z['i']
length(j[-1][8]['y']['n']['m']['g'])
test(x)
m[-5]['v'][8][3][7][2]['n']['c'][1] = i['n'][4]['w']['t']['f'][7]
length(g[-1]['a'][-8][8][-1][5])
k[1]['n']['i']['c'] = i[3][-2][2][0]['a'][5][-3]
test(f[9]['o'][0]['f'][-3]['g']['t']['d'][6])
t[-5]['l'][5]['o'][-1] = g[8]['v']
length(p[7][2][8]['b'][1][-3])
length(u['g']['t'])
o['b'][-2][3][-5][9] = 'g'
test(y[-4]['b']['z'])
length(w['c']['l']['l'][0][7]['f'])
c[-9][-9]['e']['f'] = {-8: {'b': 0}, 9: {-1: 'd'}, 'k': {-9: 4}, -4: {-7: {'k': 3}, 4: {'c': 'c'}}, 'g': {'q': 'i'}}
test(z['f'][-9])
s['m']['t']['n'][-2][0] = t['z'][5]
test(d[4][-5][5][-5]['z'])
e[3]['n'][1] = 'n'
g[8]['q']['a'] = s[-5]['y'][-6]['s'][-7]['j']['d']['w']
l['e']['s'][-8] = 'd'
test(t[-5]['l']['g']['z'])
n['v']['l'][2]['s'][-1] = b['i'][-7]['m']
test(m)
e['t'][-3]['u']['b']['a'] = -1
r[0][-7][3] = f['j']['a']['p'][-8][-9]['a']['c']['e']
test(n[6][-5]['c']['g']['y'][1])
m['v'][6][-5]['r'][0]['e'][-7][6] = m[-5]['r'][-8]
length(u[-6]['u']['y'])
test(x['m'][9][0][7])
n['q'][1]['d'][-9][-9] = -3
test(r[5][-8])
s[5]['s'] = 4
test(y[0][-1])
c[-9][-7]['t']['d']['q'][-7] = 1
i[-3]['r'][-1] = 'c'
j['p']['x'][1][7]['n']['s']['v'] = -3
v['i'] = 1
l[-5]['z'][0][-6][4]['p'] = e['a'][-3]['t']['k']
k[1]['m'] = -9
v[5]['y']['c'][-6][-8]['p'] = 'm'
test(i)
a[5]['d']['p']['c'] = u['b']['a']['g']
t['t'] = 4
x[-7][6][-3]['t'][2][3]['a'][5][-6][-6]['r']['o'][3] = 'q'
c['s'][-7][8]['e'] = -5
test(t[0]['t']['f'][7]['m']['p'][4]['w']['t']['f'][7][-8]['p'])
test(r['g'])
o[-3]['d'][3][-2][0] = {-6: {1: {'x': -2}, 'k': {9: 1}, 6: {'h': 7}}, 'u': {0: {'m': 'm'}, 's': {'k': 'i'}}}
test(h[4]['n'])
length(r[2])
d['z'][6][5][-6]['j'] = s['v']['p']['b']['k']
length(n[6][-7][5]['e'])
test(g)
s[5]['c']['y'] = {5: {-3: 'k'}, 'v': {'h': -8}}
h[3]['i']['n'][-8]['g'][-2]['h']['p'][-8] = 'p'
length(m['v'][6][-5]['r'][0][7])
c[8]['n'] = {1: {9: 'e'}, 'h': {'y': {'d': 4}, 'd': {5: 'g'}}, 'l': {8: 'f'}, 'g': {'p': 'm'}, 'n': {0: {'g': 9}, 'z': {-8: -6}, 'f': {'o': 0}}}
m[-5]['r']['q'] = 9
q[2]['y']['w']['t']['f'][7][-8] = c[-9][-9]['e']['f']
test(y[8][9][5])
length(b['c'])
g[-1]['a']['g']['z'] = 'v'
k['w'][3][1]['g'] = 'o'
x[-7][6][-3]['t']['d']['i']['a']['h'][-1] = 'l'
q['y'][-7][9]['t'][7][2][2][8]['g']['s'] = -4
d[9][6][-3]['t'][0]['l'] = 's'
l[-5]['z'][0][-1]['o'][6][-3][-4]['k']['f'] = s[-4][-8][-5]['v']
t[0]['t']['f'][7]['b']['u'][-9]['g']['g'][5] = {'b': {'v': 2}, 'f': {'q': 'h'}}
i['n']['p'][2][5]['b'][-9]['g'] = 'r'
test(d[3][2]['b'][-7][-5])
v['r'][5][4]['n']['l']['w'][7]['e'][-8]['x']['h'] = {0: {'w': 6}, 'g': {'h': 'x'}, 'i': {'e': -9}, 'h': {5: 'z'}, 'o': {'o': -8}, 'n': {'k': 'o'}, 'v': {-4: {'j': 'g'}, -1: {'e': 'z'}}, 'y': {'w': -1}}
length(f['g'][2][1])
test(w['s']['s'])
test(f['j'][-5][1]['u']['i'])
length(d['a'][9])
test(k['b']['e']['y'][-5]['x']['q'][7])
f['j']['a']['p']['q']['c']['w']['t']['f'][7]['t']['k'][5] = {8: {-7: 8}, -7: {'h': 'w'}, -3: {'r': {0: {2: -5}, -5: {'i': {9: 'z'}, 3: {8: 'o'}}}, -5: {'z': 'f'}}, 'g': {'z': 'v'}}
test(k['b']['e'][-6])
v[-6] = {9: {'p': 'n'}, 5: {'h': {'q': 'u'}, -7: {'o': 'i'}}, 'v': {'i': 'e'}}
length(m[-5]['r'][-8]['k']['d'][0][-6][7][2][3][0])
test(t[-9][6]['l'])
z[-4][5][3][0]['m']['v'] = {'y': {4: {4: 'o'}, 'n': {'b': 5}}, -7: {9: {-6: 7}, -9: {'q': -7}}, 7: {'i': {'s': {-5: 7}, 'k': {'w': 'z'}, 'f': {'t': 7}}, -7: {8: {-7: 1}, 'u': {'w': 'r'}}}}
test(l[-9]['i']['s'])
i[-7][-6][4] = 'm'
p[-6][-8]['p'] = {'j': {'m': {'s': 6}, 'g': {'h': 1}}}
i[-8][9]['o'][0]['f']['z']['i'][-8][-6] = x['m']
g['v'] = {3: {-3: 'z'}, 't': {'h': 0}, 7: {2: 't'}, 'l': {'z': {-9: 4}, -4: {0: 'd'}}, 'f': {'o': 'g'}}
n[6][-6] = 'u'
h['h']['r']['y'] = -3
j['v']['j']['u'] = {'i': {'y': 6}, 'f': {'h': 'v'}, 'n': {'v': 5}}
i['n']['p'][2]['a']['m']['n'] = w['c']['l']['l'][0]['k'][-9]['a'][2]['i']
g[-6]['b']['w']['f'][-2] = 'h'
p[-6][-8]['e'] = h[4]['n']
b['c']['t']['k'][5]['y'][-6]['j'][-8]['c']['e']['u'][-6] = 'n'
b['c'] = {'b': {2: 'p'}, 'e': {-2: 's'}, 'd': {'z': 2}, 'n': {'h': 'w'}, 'p': {1: 4}, 'r': {'f': 5}, 5: {'t': -8}}
h[-8][6] = u[5]['m'][0][2][2][2][-9]['g']['h']
m[-5]['f']['j'] = -2
length(e['t'][-3]['u'][0])
f[9]['o'][0]['f'][-3][-2]['b'][6][-5][8]['n']['z']['m'] = {'c': {'a': {'u': 't'}, 7: {'w': 'l'}}, -1: {0: {0: 'c'}, 'f': {'x': {'b': 'a'}, 5: {2: {'n': 9}}}, -9: {-9: 'p'}}}
length(r[2][-6][9][-2]['h']['t'])
length(n[6][-5]['q'][-8][-8])
m['v'][6][-5][9][-8][-3]['e'] = {2: {'m': {'g': 'y'}, -4: {'j': -9}, 'n': {9: -7}}, -1: {'d': {'g': -6}, -2: {'y': 7}}}
l[-9]['i'][1]['u'] = f
t['r']['w']['p'] = n['q'][1]['d'][-9]
f['j']['a']['p'][-8][-9]['a'][2]['i']['m'] = {'h': {-3: -8}, 5: {9: {3: 'm'}, 'd': {'w': 5}, 'f': {'t': 'f'}}, 'n': {-7: {-3: 'h'}, -9: {'r': {8: 'c'}, 5: {4: 'z'}, -9: {0: 5}}}}
o[-3] = x['m'][6]['r']
f['j'][-5][1]['u']['i'][-7] = r
test(d[9][6][-3]['t']['d']['i']['a']['u']['g'])
test(l)
n['v'][-1]['f'] = 'f'
j['f'][5]['v']['f'][-8] = v[6]['v']['g']
z['f']['m'] = 8
e[3][0][-8] = n['q'][1][-5]['l'][9]
v[-4]['w'][-3][-7] = 5
test(y[-4][-2]['o']['v'][3])
d[1][-5][4][5][4] = {'f': {-8: 'j'}, 'h': {'x': 0}, 'u': {2: 'e'}, -9: {'q': 'g'}, 'y': {'b': 2}, -2: {2: 0}}
length(u[-8][-2][5][-8]['z'][0])
test(k['q'][-9][7][1]['c'])
z[3] = {8: {'q': 'u'}, 'h': {1: 'w'}, 4: {'h': {'g': 's'}, 'j': {-9: -4}}, -3: {'p': -5}, 9: {'n': 6}}
a[8]['g'][-4]['z'][-8]['n'] = {'y': {'i': {-9: 6}, 's': {'b': 1}, -5: {'g': 6}, 5: {-7: -9}}, -5: {'o': 'w'}}
length(c['s'][-4]['h'][-9][-3][2])
h[-8]['v']['r']['e'] = i[9][-8]['d']['l']['j'][8]
h[4]['k']['b'] = -6
test(z['f'][0][6][-9][3][-5])
o['q'][4]['i']['w'] = 6
q[2]['y']['w']['t']['f'][7]['b']['l'][-9]['d'] = {'p': {'v': 7}, -5: {'r': 1}, 'g': {'a': {'t': 'n'}, 'u': {'r': 't'}, 5: {'y': 'y'}}}
test(h[4][5])
length(x[7]['i']['l'][1]['w'])
length(s['v'][-6]['v'])
x['m'][-5]['l']['t'][-6] = s[-5][-6]['s']['s'][-8]
test(v[6])
length(s['v'][-6]['v'])
length(r['t'])
k[2]['d'][-6][-2][5][-8]['z']['w'] = 'r'
test(b['a'][3][-2][5]['d'])
test(m['v'][6][6]['t'][7]['c'][-5]['d']['l']['y'][-9]['w'])
k['b']['e'][-6][0]['i'][5] = 'e'
test(i['n']['c']['l']['l'])
t['a']['h'][-8][3][0]['n']['b']['x']['d']['e'][-3] = {-8: {'q': 8}, 1: {'m': 'z'}, 3: {1: 'm'}, 'o': {'q': 's'}}
test(g[8]['q']['a'])
length(i['o']['l']['t'][8])
test(a[5]['d']['p']['c'])
d[2]['a']['l']['w'][7]['e'][-8][9] = {0: {'y': 't'}, -5: {5: 3}, 'o': {2: 'v'}}
length(j[5][-6]['c'][-2]['d'][2])
p[-3] = 'j'
test(j['v']['j']['u']['i'])
test(i['o']['l'][-4])
a[-2]['l'][-8]['i'] = {'m': {'o': 'w'}, 'e': {-7: -1}, 'd': {'i': {-1: 'w'}, 7: {'b': -6}}, -2: {'z': {'r': 0}, 'l': {'t': 'l'}}}
g['d'][2][-7][-7] = 3
y[-4]['b']['z'][7] = a[6]
length(u[-8][-6][-3])
test(u[-6]['u'][-5])
v['h'][-3][-9] = 5
test(f)
k[6] = 'r'
k[-8]['q'][-7] = -3
length(g['i'])
length(p[-2][5][-8]['z'])
test(s[-4]['c'])
length(p[-2][5][-8]['z'][-9])
m[-5]['r'][-8]['k']['d'][0][-6][-5] = {0: {'u': -2}, 'b': {2: {8: -1}, 'b': {-3: 5}}}
t['z'][5]['o'] = 'd'
m[3][0] = u[-2]['e'][-1]['d']['c']['b']
q[2] = -1
length(q['y']['l']['b']['z'])
a[5][-7]['s'] = m[3][0]
test(u['m'])
z[0][6][-5][-7][4]['y']['y'] = {'i': {-3: -6}, 'y': {'g': {'t': 'x'}, 'n': {'e': 'f'}}, -8: {'i': {9: {-1: 1}, 'w': {'s': -7}}, 'x': {'f': 1}}, 'w': {'q': {'e': 'b'}, 'r': {-8: 3}, 'l': {-3: {'q': -8}, 6: {'u': 't'}}}}
f['o']['w'][-5][0]['f']['z']['i'][-7][-7][4] = -3
s['z'] = -1
k['q'][-9][7][1][-4][3][-3][3] = 3
t['r']['w'][-2]['o'] = {-8: {'r': {0: {'v': 8}, 'a': {-1: 'v'}}, 7: {'p': -5}}, -7: {-8: 'p'}, 'j': {'p': {'v': 4}}, 'u': {'m': {-6: 0}, 'd': {'j': 'a'}}}
j['v']['d'][-3]['i'] = -6
q['y']['l']['z']['c'][-7]['w'] = i['n']
z['i']['g'] = -5
y[-8][1]['e'] = i[-3]
m['v'][6][6]['v']['f'][-8]['p'] = 's'
l['u'][2]['y']['v'][-6] = 's'
v[-7] = -5
g['d'] = 9
q['y'][-7]['m']['z'][-5][-4] = {'i': {'g': 'd'}, -6: {3: 'd'}, -5: {9: 'v'}, -2: {'s': {'m': 'x'}, 'l': {'l': 6}}}
test(v)
w['p'][2][4]['w'] = 9
g[8] = 'u'
q[-1][5][2][-1] = w['s']['w']
length(j['f'][5]['v'])
a[8][-9]['h']['v'] = 'u'
length(l['u'][2]['y']['v'])
length(i['n'][4][2]['o'][7])
test(r[5][2][6]['i']['d'][7])
test(v['r'][5]['q']['u']['d']['x'][7])
q['y']['l']['z']['t'][-2][-8] = 'a'
z['i'] = {'f': {2: -1}, -9: {1: 3}}
test(j[5])
test(o['f']['z'][-3][3])
test(q['y']['e']['r']['d'][-5])
length(w['s'][-5][4][2][6])
test(z[4][7])
test(u[-8][-1][-1])
v['r'][5][4]['n']['y'] = {-7: {'t': -1}, 9: {3: -9}}
test(q[-1]['o']['c'][0])
y['g'] = {3: {5: 4}, 'm': {'s': 6}, -2: {-4: -5}, -5: {'r': {'o': 'i'}, -1: {'f': 'a'}}}
t[8][5][3][9][3] = 'e'
d[4] = {'i': {8: 'x'}, 6: {-8: {'h': -5}, 7: {5: -6}}}
i[3][-2][2][6][3] = 9
length(y[8]['g']['g'][0])
test(v[-6][5][-7])
test(h[-8]['v']['r']['e'])
test(r[6][-2])
test(x['m'])
length(s['m']['t'])
x['m'][-5]['l']['y'][-5]['l']['y'][5] = 'w'
x[7] = 'w'
length(x[-7])
p[7]['q'][-3]['k']['d'][0] = y
g[-6]['b']['w']['f'][-1] = l[1]['c']
t['r'][6]['w']['r'] = -2
test(h[3]['i']['r']['e'][-8][9][0])
test(m)
t[-9][8][-4]['e'] = 'b'
p[-5][0][-5] = {0: {-5: {0: {'p': 9}, 'z': {-6: 'x'}}}, 'm': {9: {0: 'v'}, -1: {-2: {'n': 'e'}, 6: {-9: -3}}, 'o': {8: 'd'}}, 'n': {'l': 4}}
length(p[-5]['b']['b'])
test(f['e'][-1])
test(b[-1]['d'][-1][3])
e['t'][8][5]['z'][6][4][-9]['r'] = 1
o['q'][4]['b']['x'] = a[8][-9][-7]
test(b['i'][-5])
x['m'][-5]['l']['v']['m'] = {'k': {'m': -6}, 7: {'s': 4}}
t['a']['h']['v'][0]['p']['a'] = a['j'][8][1]['y']['n']
test(f[0]['d']['t']['s'][1])
length(p[7]['q'][-3]['k']['d'][0][-4]['b']['z'])
q[-1] = {0: {1: 'z'}, 'h': {'v': 'b'}}
m[-5]['r'][-8]['k']['d'][0]['g']['m']['s'] = 'z'
length(p[-5][0][-5]['n'])
w[4][2][-4] = x
length(l['e']['s'][-4][8]['r']['j'])
length(y['g'][-2])
length(s['m']['k']['a'])
w['c']['l'][-9] = 1
test(r)
g['u'] = g[5][7]['p']['b'][-1]['r']
i['n']['c']['l']['l'][0][7]['f'][-1] = {'a': {'c': 'f'}, 2: {0: 'a'}, 'b': {'g': -6}, 4: {'t': 2}, 'u': {'c': 2}, -5: {'n': 'z'}, -4: {-3: 'e'}}
p[7]['q'][-3][3][-2]['z']['x'][8]['s']['y'][-6]['q'] = -1
t[-1][4][-3] = 'l'
length(j['p']['x'][-6]['p'][-6]['y'][-3][-5]['u']['e'])
e[-6]['z'][7][-1]['u']['d'] = -3
p[7][2][6]['z']['m']['m'] = p[-6]['d'][-3][9]
test(x['o']['i'][4]['d'][9])
length(k[-3][7])
e[-6]['z'][7]['e'][-7] = -4
test(p[7][2][-6][3][-1][-4]['a'])
r['v']['e']['n'][1]['g'][-2]['y']['s']['l']['n'] = 'w'
k[-3]['m'][3] = -4
v['h'][-3][-4] = i[-3]['x']
test(b['w']['y'][-2]['w'][-2][2])
c[8][-7]['b'] = m['v'][6][-6]['l']['j'][-5]['u']
e[2] = z['i']['f']
u['m'][4][-2][5] = a[-2]['l']['w']['i']
test(n['v'][-1][6]['d'][-1][-4])
u[0] = n[6][-3]['e'][2]['m']
t[-9][8][-4]['h'] = 2
c[-9][-9][9][6][-2]['g']['a'] = {1: {-9: 'w'}, 7: {4: -8}}
w[-5][7] = -9
d[9][6][-3]['t']['d']['i']['a']['h'][9][2] = {'i': {'k': {6: {'q': 'h'}, -9: {'z': 8}}, 4: {'a': -3}, 'l': {'r': 7}}, 7: {4: 'z'}}
d[9][6]['o'] = 'e'
length(m['v'][6][-6]['l'][-5][8])
d[9][6][-3]['t'][-2]['u'] = {3: {7: 't'}, 7: {'k': -9}, 'j': {-6: 'n'}, 'y': {1: {'r': 'n'}, 'o': {2: -1}}, 'x': {8: {0: 'd'}, 5: {1: 'r'}}, -6: {'m': 'g'}, -3: {-9: -5}}
o[-7] = 'b'
length(i['n'][4]['w']['t']['f'][7]['m']['p']['s']['i'][-9]['e'][0])
z['f'][-9]['i'][1] = 'j'
length(n[-8][3])
c['e'][-2]['m']['h'] = {0: {2: {-4: {-6: 's'}, 'v': {4: -5}}, -4: {'e': 'j'}}, 1: {'x': {8: {1: -4}, -2: {-8: {'x': 7}, -4: {3: 6}}}, -3: {-7: {'t': 'u'}, 1: {9: 2}}}}
u[0]['a'] = {'g': {-5: 's'}, 'i': {'h': 'a'}, -9: {'m': 's'}, 'l': {0: 'k'}, 'v': {'j': 'f'}, -3: {-4: -5}, -2: {'v': 0}}
q['y']['l'][-4]['a']['m'] = u['e']['z']['q']
p[-1]['q'][2][-4] = -9
test(k[-7][0][-1]['o'][6][-3][-4][0][-8])
w[-5]['w'] = -6
s['m'][8][9]['i'][7][-7]['k'][-2]['x'] = {-5: {'u': {-9: -1}, 's': {'e': {9: 0}, -4: {0: 'y'}}, 4: {'t': 'i'}}, -2: {'c': {3: 6}, 6: {'a': {'d': 'f'}, 'q': {'e': 'q'}}}}
o[0]['d']['l'][-3][-5]['q'][3][3]['f'] = 'z'
z['f'][0] = 'w'
g['y'][9][-9] = 'x'
test(t['z'][5])
length(f['g']['n'][-2][4])
e['a'][-3]['t']['p']['z']['c'] = e[3]['n'][-6][4]['i']['s'][1]
e[-6]['z'][7]['e'][-4][6]['w'] = 'f'
x[-7][6][-3]['t'][-2]['u'][7][6] = {'c': {'p': {-3: -8}, -2: {'j': 2}, 'o': {'c': {'k': 'q'}, 6: {'h': -5}}, 'd': {'w': 8}}, 6: {'h': {-7: 'a'}, 3: {4: -2}, 'd': {5: 'p'}, -2: {4: 's'}, 'n': {'i': -6}}}
m['v'][6][6]['t'][7]['c'][-5]['d']['l']['b'][-3] = {'a': {'f': 'j'}, 8: {-2: -1}, 'f': {-9: 5}, 'n': {'j': 'k'}, -9: {-7: {'l': 'd'}, 2: {'y': 'g'}}}
length(w[4]['w']['t']['f'][7]['t']['a']['y'])
x['m'][-5]['l']['v']['m'][7]['s'] = 'y'
o['b'][-2][3][-5]['e']['t'] = v['r'][5]
test(c[3]['b']['o']['d'][4]['i'])
n['v']['l'][2][-3][4][7] = {'c': {-4: -5}, 't': {'p': {-5: -1}, -4: {-4: 'p'}, 'n': {-8: -9}}, -3: {-4: 2}}
i[-3][5][-1]['d'] = {'e': {'u': 'p'}}
length(q['y']['l'][-5][-1][9])
l[-5][-5]['x']['e'][-8][1][7][6][-3][-2] = 't'
test(l['e']['s'][0]['v']['o']['q'][-6])
length(k['q'][-9][7]['e']['s'][6][-3]['c'][5])
u[0]['a']['l'][5] = -3
length(l[-9]['i'])
d[7]['t'][-4]['t']['p'] = b[-1]['d'][2]
p[-1]['s'][-6]['s'][4]['u']['k']['j'] = 'c'
p[-2][5][-8]['z'][0][-7]['s'] = 7
test(l[-4][4][-8])
e['a'][-3]['t']['p']['z']['c']['q'] = 'h'
test(o['b']['t']['c'][0][-8])
e[2][-1] = -6
length(g['v']['f'])
w['s'][7][-3][5] = {'q': {1: 'u'}, 's': {'f': -7}, 'u': {4: 's'}, 'v': {'i': 6}, 'y': {0: 3}, -1: {'q': 'k'}}
test(u[-2][-2]['b']['f']['m'][8])
n[2] = v['r'][5]['q']['u']['d']['g']['d']['d'][-1]
test(g[5][-1]['a']['a'])
i[4] = 'r'
length(f[9]['o'][0]['f'][-3][-8][-2][5][-8]['z'][-9])
length(c['i']['w'])
u[-5]['o'][-6][7] = -8
test(m[3][0])
test(t['z'])
b['c']['e'][-5] = u['e'][-1]['d']
j[5][-6]['k'][1]['q'] = {'y': {'y': {'u': 3}, 1: {-1: -4}, 2: {'k': {'r': -2}, -9: {'x': 'w'}}, 'j': {-9: 2}}, 'm': {'y': {'p': 'g'}, 'l': {5: 8}}}
h['v'] = -7
length(u[-5]['b']['v'])
w[-5][9]['i']['n'] = 3
j['v'][-2]['u'][7][6][6][-2][4] = 2
w[-5][8][0]['a'][-2]['u'] = d['a']['r']
m[-5]['v'][-1]['t'] = -5
o[-3]['f'][7]['m']['p']['s'] = -8
f['g'][2][0][2] = 'm'
length(w[-5][8][-6]['u']['l'])
test(s)
test(q[-1])
length(a['j'][8][0][-6])
f[0]['f'] = z
j['p']['x'][-6]['p'][-6]['y']['c'][-1] = {3: {6: 'h'}, 'e': {-4: 'y'}, 'l': {'t': 3}, -8: {9: -6}, -7: {8: {'d': 'x'}, 'c': {-9: 6}}, -5: {'v': 'o'}}
k['b']['e']['y'][-5]['x'][2] = 'q'
length(g)
test(w['c']['l']['l'][0]['k']['r'])
length(y['g'][-5]['r'])
o[8] = 'n'
test(b)
length(l[2])
p[-6][-9] = -2
v[-3]['y'][4]['u']['e']['v'] = a[6]['v']['g']
e['a'][-3]['e'][2] = {-6: {'s': {'r': 'k'}, -2: {'a': 'i'}}, 2: {'a': {'b': 'z'}, -7: {'h': 'g'}}, 'v': {-8: -7}}
k[7][-6]['b'] = -6
i['a'][-3][-2][8]['p']['e'] = 1
q[-1][0][1] = j[5][-6]['c'][-2]
y[-8]['r']['m']['b'] = 'k'
g['u']['q'] = -1
test(w['c']['l']['l'][0]['k'][-9]['a'][2]['x'])
j[5][-6]['c'][-2]['d'][-1][-4][6] = t['a']
v['z'] = 7
w['p'][2]['q'][9] = 'f'
g[5][-1]['a']['i'][-5][-5] = 'a'
a[6]['v']['g']['e'] = v['r'][5]['q']['u']['g']['y']
u[0]['a']['g'][-5] = -8
test(q['y'])
h[4]['n'][6]['p'] = 4
length(q)
b[-4]['b'][-9][8][5][-4][-7][6][1] = 3
h['h']['r'][5]['k'] = i[-3]['o']['c'][9]['b']
r['t'][-8] = 'p'
p[-2][5][-8]['z'][-9]['z'] = 1
s[5]['t'] = {'x': {1: {'o': 'f'}, -6: {2: 'e'}}, 'b': {9: {-1: 'j'}, 'u': {'l': 't'}}, 'u': {8: {-3: 'h'}, 'k': {'i': {'o': 's'}, -4: {-9: 'l'}}}}
test(k['q'][-9][7][-4][5]['z'])
y[-7] = -5
c[-9][-7]['b'] = c[-1]
h['f'] = -3
test(i['o']['l']['t'][8])
f['e']['z'][5] = 2
test(t[-5]['l']['z'][4])
test(h['h']['r'][5]['k'])
s[-4]['j'] = o['f']['z'][-3]['y']['e'][-1][-5]['z']
length(j)
q[-1]['h'][9] = i[-7][4]['y'][6][-8]
test(d['z'][-9]['w']['p'])
test(v['q']['i'])
j['f']['l']['j'][0][-5] = {-1: {0: {'g': 7}, 'd': {-7: 'b'}, -3: {'l': {'v': 6}, 'd': {'n': 'a'}}}, 6: {'y': {'t': {'l': -7}, 6: {'p': 'z'}}, 9: {4: -1}, 3: {'r': 9}}}
v[6]['v']['g']['p'] = -2
p[-5]['b']['b'][-3] = -1
m[3][0][0] = -3
k[-3]['m']['f'][0]['n']['f'][-3][-5]['o'][3][0]['o'][-8]['e'] = {-7: {-6: {'a': -9}, 'c': {'y': -8}, -1: {'s': {5: -8}, 7: {-9: 'h'}}}, -6: {'a': {'x': -1}, 9: {7: -7}}}
p[7][2][3][0][-4] = {-8: {'e': 't'}, 'r': {-8: 7}, 4: {5: 'a'}}
h[4]['k']['b'] = {'a': {-6: {-7: 8}, 6: {6: 'u'}}, 'w': {-9: 9}, 'b': {'r': 'v'}, 5: {1: 'p'}, -2: {-2: {'r': 9}, 7: {3: 'p'}}}
test(j[-1][8])
test(a['j'][8][1]['y']['j'])
test(d[1]['g']['r']['d'][-8]['g'][-2]['h'][-7][-1])
test(j[-1]['v'][0])
i[9][7]['c'][-5]['d']['l']['z'] = 'a'
test(m)
length(w[-5]['o']['q'][4]['b']['x'])
length(n['q']['c'][2][-4][-7][6][-3]['t']['j']['u']['f'])
h[3]['g'][-4][-3] = 7
length(i[-3]['u'])
u['m'][4][-2][5] = {-7: {'i': {'i': 'p'}, -4: {'a': -4}, 't': {-8: 7}}, -9: {'x': {'p': {-4: 'u'}, 'm': {4: 4}, -2: {-4: 5}}, -2: {0: {'y': 'i'}, 8: {'k': 2}}}}
w['c'] = 'b'
test(l['u'])
test(u[-8][-2])
test(z[4][7][1]['p'][-5][-5])
v[8] = x[-7]
o[-3]['f'][7]['m']['p'][4][2]['o'][7][-1] = {'h': {8: {7: 'j'}, 3: {3: 2}, 'm': {5: 'q'}, 'f': {3: 8}, -9: {-8: 'e'}}, -3: {-8: {'j': -6}, 'l': {'f': -9}, 'f': {-2: 'x'}}}
i[9][7]['c'][-5]['d']['l']['b']['n'] = 'a'
a[8]['g'][-7]['d']['l']['j']['f'][1] = d[3][-6]['z'][7]['e'][-4][6]
test(y[0]['f'][5][-8])
test(m['v'][6][-5]['r'][0][-8][6])
x[-7][6][-3]['t'][-2]['u']['y'] = 'b'
m[-5]['f']['a'] = 'o'
q['y']['l']['b']['o'][7][-5][-5][-3]['y'][4][0][-7][-5]['y'] = h['p']['p'][-4][-7][-8]['z'][7]
s[-4][-8][-5]['s']['d'] = {'i': {1: {'s': 'g'}, 5: {-3: 'x'}}, 'w': {-1: 5}, -9: {'v': 'j'}}
p[-1][-1][2] = 's'
length(i['a'][-3][0][6][-5]['f']['z'])
length(z[-2][-4]['d'][-9][-4])
test(d[9][6][-3]['t'])
q[-1]['h'][9]['o'] = 'e'
length(k['b']['e'][-6][1]['m'])
h['h']['f'] = f
length(u)
length(c['i']['w']['v'])
length(a[8][-9]['z']['z'][-6][-9])
d[3]['t']['q'][-1][-6]['b'][8] = 'h'
m[3][0][0] = 3
h[4][5][0] = {'t': {'w': 7}, 'g': {5: 'l'}}
z[4]['u'][1]['a'] = {'q': {'t': -2}, 2: {-9: 9}, 'n': {'g': 'g'}, -6: {1: {'m': 2}, 'v': {'l': 4}}, 'v': {4: {'b': 'a'}, -3: {'j': 'e'}}}
y[-8][1]['v'] = 'i'
test(o['z']['m'][-8]['t'])
l[-6][-5]['b'][-7][5][-5][3] = g['y']
length(t[-8][7])
n[8] = t[-9][8][-4]
length(i[-7][4]['y']['f']['h']['g'])
test(w)
h[4]['n'][6]['p'] = j['v']['h']
length(o)
v[6]['v']['g']['e'][-5] = 'r'
x['m'][6]['r']['f'][7]['t']['y']['z'] = {'c': {'f': 'i'}, 5: {'l': 6}, 'h': {'i': {'x': 7}, 'q': {2: 'a'}}, 'n': {'u': 'o'}, 'y': {'v': 's'}, -6: {-6: 5}, -3: {'k': {-3: 1}, 's': {'z': -7}}}
g[-1]['a'][-8][8][-1] = g[-6]['b']['w']['f'][-1]
m[-5]['r']['q'] = 'i'
h['p'][-5][-2] = 's'
j['v'][-2]['u'][-3][4] = x['o']['i'][4]['d']['v']['f']
length(h['h']['f']['e'])
length(p[7][2][3][9])
k['q'][-9][-4] = {'h': {2: {'l': 'y'}, 's': {-6: 1}}, -6: {'b': 'p'}, 'z': {9: {1: -2}, 's': {-1: 'j'}, 'o': {'s': 'v'}}, 'p': {1: {'t': -7}, 'o': {'r': 'c'}}}
q[-1][0][1]['d'][2]['l'] = k['q'][-9][7][-9]['b'][0][4][-7][-8][9][-5]
j['v']['f'] = 'k'
d[2][-6]['q']['n']['b']['f']['e'] = 1
t[-8]['w'][3]['z']['c'][-8] = 'm'
length(w['p'])
k[-8]['q'][9] = l['a']
l[-5]['m']['k']['l'] = 'p'
length(e['a'][-7][5]['a'][-2])
b['a'][3][4][-7] = 6
p[-2] = j[5][-6]['k'][7][5]['p']['l']
i['a'][-3]['i'][-9][-3] = {8: {8: {'e': -2}, 3: {'i': {-3: 8}, 7: {-5: 't'}}, 'v': {2: {3: {'d': 1}, 'r': {7: -3}}, 'd': {'o': 'x'}}}, 4: {'m': {-2: 'e'}, 'f': {4: -3}}}
test(r['v']['e']['n'][1]['q']['b'])
b['a'][-3][0]['f'] = -7
test(s)
u['b'][6] = 'p'
p[-1]['t']['p'][-2][-4]['b'] = q['y']['l'][-4][9]
length(h[4]['k']['b'][-2][-2])
s['v']['p']['b'] = {'d': {'m': {'h': -4}, 'v': {5: 3}}, 'f': {'l': 4}}
test(l[-9]['b'][0][6][4][-9]['v']['t'])
u['m'][4][-2][5][-7]['t']['r'] = 'z'
test(n['q'][1][-5]['l'][9])
length(o['b'][4][3]['w'])
q[-1]['h'][9]['i'] = 'y'
h['h']['r']['o']['z'] = j['v']['d'][-3]
l[2]['d']['d']['w'][1] = {-7: {'a': 0}, -2: {'d': 'g'}}
c[-8]['f']['w'][8][4] = n[6][-3]['e']
test(o)
test(z['f']['e']['s'][-4][8]['u']['m'])
c[3]['b']['o'][-5][8] = 'm'
q['y']['l']['z']['j'][-1] = x[-7][6]
length(r)
d['h']['t'][6][4]['t'] = -4
test(j['v'][0])
d[1][-5][-2][7]['z'] = -2
length(u['m'][4][-2][-1]['o']['o'][-9])
length(o['q'])
s[-5]['y']['i'] = 'd'
o[8] = {0: {'a': -1}, 'q': {1: 4}, 'o': {'s': 'l'}, 'n': {'w': 'j'}}
z[0][-3][-3]['u'][-9][-2] = 0
u[-2]['e']['z'] = 'o'
s[-4]['a']['d'] = y[-4]['b']['z']
t[-6] = c[3]['b']['y']
f[4] = {5: {'e': -4}, 'i': {'r': 'y'}, 'j': {'z': 5}, 'r': {-5: 'c'}, -6: {1: 9}, 'z': {2: 'x'}}
length(j['f']['l']['j'][3])
test(q['y']['l']['z']['j'][-1][-3])
l['e']['s'][6]['q'][-1][8][-1] = 9
o[-3]['f'][7]['b']['u'][-9]['j']['c'] = {'m': {'v': 0}, -7: {'k': 'u'}, 'u': {'h': 'u'}, 4: {-4: 'i'}, 7: {-8: 'r'}}
length(g['y'])
length(l[1])
n[8][-4] = {'p': {-1: 4}, 6: {2: -6}}
k[2][7][1][4] = {'k': {9: 'w'}, 'b': {2: {5: 'b'}, 't': {1: -5}}, 'u': {'q': 's'}, -1: {1: -3}}
h[4]['y'][-3] = {'c': {0: 5}, 'i': {0: {'s': {-4: 'a'}, -5: {'o': -7}}, 'y': {-1: 1}}, 'j': {'e': -7}, 'l': {-3: 'q'}, 'o': {'m': -7}, 8: {'z': 'w'}, 'z': {-6: -6}}
t[-1][6][4][-2][5][8] = {-7: {'q': 5}, 'r': {-4: {-2: 4}, 'd': {'e': 8}}, 'g': {'i': -9}, -2: {9: {-1: 'l'}, -3: {'u': 'b'}}, 9: {'f': -7}}
s['v'][-6]['v'] = 'w'
u[-8][-5]['b']['b']['l'] = {1: {'w': -3}, 'w': {0: {'h': 2}, 'j': {'p': 'g'}}}
test(d['h'])
test(w[-5]['u'][5][-1]['t']['f'][7]['m']['p'][4][2][-4]['o']['i']['d'][6]['o'][-6][8]['j'])
length(y[-4]['b']['z'][7]['v'])
test(r['g'][-2]['y'][3])
n[8][-4][6][4] = 'm'
y['g'][3]['j'] = -1
length(p[-2])
f[4]['z']['u'] = 1
z[4]['w']['r'][-9]['d'][0]['w'] = 3
n['v']['l'][2][4][7][4] = z['f'][1][8]
c[-1] = p[-5][0][-5]['m'][-1][6]
length(r)
length(h['h']['r'][5]['k'])
c[-8][-6][3][-2][5] = 'k'
i[2] = {'p': {'h': {3: {'c': -1}, -2: {-8: -1}}, 'u': {'z': {5: 'q'}, 'f': {'r': 'u'}}}, 't': {8: {'b': -7}, 'x': {-8: -9}, 6: {4: 'y'}, 7: {'f': 6}}}
test(n[2])
length(f['g']['e']['w'][-9]['w'])
y['g'][3][5] = 8
m['v'][6][-5]['r'][0]['e']['r'] = h[3][2]['n']['i'][7]['x']
g[-8] = 9
l[2]['d']['t'][-7][-3][3][2]['d'] = 0
test(l[-5]['m']['k']['q'])
z[0][-3][-3]['u'][6] = 7
test(h)
l[-9]['i']['l']['h'] = 'n'
length(d[1])
q['y']['e'][9][-8]['t'] = q['y']['e']['r']['d'][-7][7]['r']['s']
h[3][2]['n']['y'][6]['d']['n'] = b[-1]['d'][2]['l']
n['q'][1]['d'][-9]['z'] = -5
length(c['i']['w']['v'])
l[-9]['i']['d']['h'] = {-6: {'o': 'z'}, 7: {-2: 'r'}}
test(u['g']['t'][8]['d'])
z['i'] = s[5]['t']['b'][9]
length(h['p'][-5])
test(f['g'])
length(v[-3])
length(u['e'])
p[7]['q'] = {'x': {'a': {2: 3}, 'x': {'m': -5}, 7: {'b': 8}}, 'u': {'x': 0}, 1: {-3: 'w'}, 6: {-8: 'm'}, 'v': {'o': 3}}
q[-1]['h'][9]['i'] = {0: {6: -7}, 2: {'o': 'q'}, 'k': {-8: {-8: 'i'}, 's': {-3: 'l'}}, 'm': {'s': -4}, 'q': {'i': -1}, 's': {9: {'p': 'o'}, 4: {'u': 7}}, -7: {-7: 't'}, -3: {'a': 'r'}}
u['b']['f']['m'][-7]['o'] = 'r'
u[-8][-6][-3][1]['g'][-2]['y'][0]['h'] = 'b'
test(p[-1][-5])
r[2] = p[-1][-1]
g[-1]['a']['g']['z'] = 2
q['y']['e'][9][-8]['t']['f'][7][4] = {'o': {'r': 'l'}, 6: {'z': 't'}, 'm': {'e': -2}, 'g': {5: 'z'}, -2: {-2: 'u'}}
length(k[-8]['q'][9][5][-7][3])
test(y)
y['n'] = {'q': {'u': {-4: 'd'}, 6: {'f': 6}}, 'c': {'p': {'e': 'i'}, 'b': {'y': 'p'}, 'v': {-7: {5: 2}, 'j': {-9: 7}}}, 'r': {'k': {-1: 'o'}, -1: {7: 'e'}}, -3: {8: 4}}
z['f'][-5]['v']['p'][-6][3] = {'y': {3: 'd'}, 'x': {-5: -5}, -9: {-6: 'n'}, 'l': {-8: 9}, 5: {-7: {'z': 'e'}, 's': {'k': -3}}}
y['n']['q'][6][-4] = 'q'
u[-5]['b'][-9]['e'] = 'f'
i[3][-2][2][0][-6][-5][6] = g
p[-1][-5]['g'] = {'e': {-7: -5}, 'w': {'i': -6}}
test(w['p'][2][3]['r']['q'][-8][-8]['h'])
r['g'][-3]['e']['k'][-4]['q'] = 5
q[-1][0][1]['v'] = 1
b['c']['n'][4] = 8
y['n']['r']['k']['p'] = z[3][-3]
length(x)
test(x['o']['i']['d'][6]['o'][3]['a'][5])
l[2]['d']['b']['s'] = e[2]
i[-8]['e'] = {-2: {-4: 7}, -1: {3: -8}, 'g': {'i': 'j'}}
u[-5]['a'] = t[-8]
length(i['a'][-3][0][6][-5])
m[-5]['v']['e'][1][3][8] = 'g'
test(q[-1][0][1]['d'][2]['l'])
length(m[3][0])
test(r[7]['d'][9]['j'][9])
k[7]['o']['e'][4]['y'] = 's'
d[3][2][0] = 'x'
s[-5]['y'][-6][2]['z']['a'][-3][7] = h[-8][6][-5]['i']['r']['e'][-8]['o']
]]></test_input>
        <test_output><![CDATA[0
1
1
1
0
0
0
1
1
1
1
0
0
1
0
1
1
0
1
0
1
2
0
0
1
0
1
5
2
0
0
0
0
1
1
0
0
1
1
1
0
2
3
1
3
6
1
0
5
1
0
1
1
0
1
7
1
0
1
1
2
0
3
0
0
0
0
2
1
1
0
1
0
1
0
0
1
1
1
0
1
2
2
0
0
0
1
0
1
1
5
1
0
3
1
2
1
1
0
0
1
0
0
0
2
0
3
1
0
0
0
1
0
1
0
1
0
0
1
1
0
0
0
0
1
1
1
2
0
1
0
3
1
0
4
1
0
6
2
1
1
0
0
1
1
0
0
0
1
2
4
1
0
1
0
0
0
8
0
1
1
0
1
2
0
1
0
2
1
1
0
1
0
0
0
0
0
8
0
1
1
1
1
1
2
0
0
3
3
1
1
0
3
0
0
1
0
0
1
1
2
0
4
2
2
1
0
0
1
0
2
2
3
1
1
5
2
0
0
1
2
0
0
0
3
0
1
0
0
1
1
1
8
0
1
1
0
1
5
0
1
2
1
0
0
1
2
2
1
0
2
4
2
0
5
2
1
0
2
0
1
1
1
2
1
1
1
1
7
1
2
1
1
0
7
1
0
4
0
0
0
1
0
0
1
2
1
5
0
0
4
2
0
0
2
1
1
0
0
5
0
0
0
1
0
0
2
0
2
0
0
0
1
0
1
1
1
1
2
0
1
0
1
1
4
0
0
3
0
0
0
0
2
0
1
2
5
0
0
2
1
1
3
1
8
0
0
0
0
2
2
2
0
2
2
1
0
0
1
1
1
0
1
1
1
1
1
2
1
0
1
0
0
3
5
4
2
1
4
1
0
0
3
1
1
1
3
0
0
0
0
1
0
2
0
1
2
0
1
0
0
1
4
0
0
1
0
0
2
0
2
1
7
1
4
0
0
0
0
8
0
1
1
2
2
1
0
0
2
1
1
0
0
1
1
0
0
2
0
0
0
0
5
2
0
1
3
0
0
0
2
1
1
1
0
0
1
0
0
2
0
0
1
1
0
2
0
0
2
8
1
1
2
2
0
2
1
0
1
0
1
0
0
1
0
0
2
2
0
6
1
0
1
1
0
0
1
1
0
4
0
0
0
0
1
0
0
0
0
1
3
1
4
0
1
0
0
1
1
0
0
4
1
1
0
0
2
0
1
0
2
0
1
1
1
1
2
3
1
0
1
1
3
1
1
2
1
1
3
0
5
1
2
0
0
1
1
12
0
1
0
0
0
11
2
2
1
0
0
1
2
1
1
5
2
5
3
1
0
1
0
1
1
4
2
2
0
5
4
0
1
0
1
0
1
0
3
0
1
3
0
0
5
2
1
0
4
2
0
1
1
0
0
0
1
0
1
1
4
0
1
1
1
1
0
1
0
1
0
1
2
0
0
0
1
12
0
0
0
1
4
1
2
0
0
1
0
0
1
1
2
0
1
9
0
0
1
0
0
0
1
0
1
1
1
0
0
1
1
1
1
3
0
2
0
7
4
9
1
0
2
1
0
0
0
1
0
2
0
1
1
2
1
1
0
1
1
1
0
5
4
0
1
2
0
1
0
0
0
0
1
0
0
1
2
0
1
4
0
2
0
1
1
2
2
1
1
0
0
2
5
1
0
0
0
2
0
1
0
3
7
1
1
2
0
1
0
2
1
0
2
0
0
4
0
0
2
0
5
13
0
2
1
0
0
1
0
1
0
5
0
0
1
1
0
5
1
1
2
4
1
1
3
0
1
4
2
1
2
0
0
5
1
0
2
0
2
9
1
6
0
0
0
0
6
0
0
3
1
1
2
2
1
0
1
1
1
1
3
2
1
2
2
4
6
0
2
1
1
1
1
1
1
2
0
0
10
3
7
1
5
0
0
3
0
0
1
0
0
0
0
0
1
0
2
1
0
0
0
1
9
5
1
0
3
0
1
1
1
4
0
7
2
6
3
0
2
2
0
1
0
3
0
0
1
0
0
0
0
0
1
4
1
1
0
0
0
0
1
1
3
0
1
0
0
2
1
4
2
1
1
0
1
1
0
0
1
3
0
3
1
0
1
7
0
0
0
1
0
5
3
3
5
0
0
4
5
7
1
2
0
1
0
1
0
3
2
2
5
1
1
0
1
1
6
0
1
5
8
1
1
1
2
0
1
1
1
0
2
0
0
0
0
1
1
0
1
0
1
3
2
1
1
1
1
0
0
0
1
1
2
1
0
4
1
5
5
0
3
4
0
0
1
0
1
4
1
5
3
0
1
0
1
0
1
1
0
1
0
2
0
0
0
4
0
0
0
0
1
0
3
1
4
0
1
1
0
0
3
0
1
4
2
2
1
2
2
0
5
2
1
1
0
0
0
1
1
0
1
1
3
1
2
8
0
1
0
5
0
2
0
0
1
0
2
1
1
0
1
0
2
6
0
0
0
1
0
0
0
0
3
0
1
1
1
0
1
5
0
0
0
3
0
1
0
1
4
1
0
0
4
1
2
0
1
1
1
0
3
0
1
1
1
2
0
1
3
0
1
2
3
0
6
0
1
1
6
2
0
0
1
0
1
1
2
1
1
1
0
1
1
1
7
0
1
3
0
2
0
9
1
1
1
1
1
12
0
0
1
3
1
0
1
1
0
1
1
3
1
0
9
3
0
5
0
4
2
4
0
0
1
1
1
0
3
6
1
0
1
1
1
1
4
0
0
2
0
1
5
0
2
0
0
0
1
1
1
0
1
0
0
0
4
1
4
1
10
0
0
0
7
0
6
1
1
0
1
0
1
0
1
0
0
1
5
0
0
0
3
5
1
1
8
0
1
0
7
6
2
1
0
6
1
0
1
1
1
1
3
0
2
3
5
3
1
4
0
1
0
1
0
0
0
0
1
1
3
0
1
0
0
0
2
0
2
2
4
1
3
0
1
0
1
2
13
0
0
2
1
2
0
1
0
1
1
1
0
1
1
0
0
1
2
1
1
1
1
0
0
0
1
2
1
0
1
1
0
1
0
3
1
2
4
4
1
0
9
0
0
0
1
5
0
6
0
1
1
3
3
2
4
0
0
1
1
0
2
0
10
0
0
0
2
10
1
0
1
2
1
3
1
1
0
5
6
0
8
0
1
1
0
1
2
0
1
0
0
0
0
3
0
0
1
2
0
1
1
0
5
1
1
1
0
0
0
0
2
2
1
0
1
1
3
1
0
1
1
0
0
3
0
2
1
3
3
2
1
3
3
10
2
0
0
0
1
6
0
6
5
6
5
0
0
5
1
1
2
0
1
1
1
1
0
3
0
1
2
9
1
0
0
1
0
13
0
1
1
1
2
3
0
1
0
1
1
0
8
4
0
3
1
1
1
0
0
3
0
0
1
2
1
4
5
1
0
1
4
7
0
1
0
0
2
0
5
2
6
3
1
0
0
0
2
0
0
0
0
0
1
1
1
2
0
0
2
2
0
1
1
0
1
1
2
0
1
4
5
13
1
0
2
1
1
0
0
1
2
2
1
0
0
2
0
2
0
2
1
1
0
1
0
4
1
0
1
0
1
0
6
2
0
6
1
1
0
1
0
1
1
1
0
0
13
1
9
3
1
13
1
2
0
0
1
2
2
0
4
1
0
1
1
3
1
1
0
0
0
1
0
0
0
1
1
2
5
2
4
3
2
1
5
0
0
1
2
1
2
4
0
1
0
2
6
0
0
0
2
1
0
5
14
1
7
0
1
1
1
0
0
0
1
0
1
1
2
1
0
1
0
1
1
2
5
0
2
0
0
0
1
1
2
0
0
8
1
0
0
13
1
1
0
1
1
1
3
1
0
3
13
0
0
5
1
8
11
1
1
1
0
1
0
2
1
2
0
3
1
0
0
2
2
1
0
1
5
1
7
1
2
0
1
0
1
1
0
1
1
1
10
0
1
0
5
0
2
0
0
0
2
2
0
2
1
0
1
1
1
1
1
1
1
1
1
0
1
1
1
1
2
1
1
0
1
0
1
0
0
2
0
7
1
3
1
1
1
0
1
0
3
0
0
0
1
0
1
0
1
1
1
1
2
0
0
5
0
1
1
4
2
0
1
2
1
4
0
0
1
1
3
0
0
6
5
0
1
6
2
1
0
3
1
0
0
1
0
2
1
1
2
1
5
1
11
0
1
1
0
1
1
0
2
5
0
1
3
1
0
0
1
0
1
1
1
0
0
0
1
3
3
7
1
0
0
0
0
0
7
1
0
0
1
1
1
1
0
0
0
2
1
1
0
1
0
0
0
1
0
0
1
1
2
0
1
1
0
0
0
0
0
1
0
1
1
1
1
5
8
1
2
0
0
0
2
0
1
1
1
1
0
0
0
4
0
1
1
1
0
1
1
1
0
3
0
0
1
0
0
0
0
0
0
8
0
1
1
2
0
1
1
1
3
0
11
0
6
3
0
3
1
0
0
4
0
1
1
13
0
0
1
0
0
2
0
0
0
3
0
1
1
3
1
0
1
0
2
1
0
4
1
2
1
1
14
0
0
0
0
0
1
0
0
0
1
0
5
5
2
1
1
0
1
1
0
8
1
2
1
2
1
1
2
2
0
0
0
0
0
2
3
1
0
0
0
7
1
1
0
1
15
0
1
0
1
1
11
4
0
0
6
1
0
0
3
0
0
1
0
1
0
1
4
6
0
1
1
1
1
4
0
1
1
3
1
1
1
1
15
1
3
1
7
0
1
0
1
1
4
1
0
0
1
2
1
0
1
0
0
1
0
1
0
0
0
7
1
1
0
1
1
4
0
1
0
0
1
0
2
2
1
4
2
1
5
0
0
2
1
1
0
1
1
0
0
0
0
1
1
0
2
7
0
0
2
1
3
0
1
1
0
1
1
1
0
0
1
0
4
1
0
1
1
1
1
0
0
0
2
0
2
0
0
1
2
0
0
0
4
0
1
12
1
1
9
0
0
0
0
0
0
0
1
0
0
0
0
1
2
3
1
0
14
1
1
1
2
1
0
1
1
0
0
0
0
0
1
1
0
0
2
0
1
1
1
1
0
1
1
1
0
0
1
9
1
0
1
0
2
1
1
0
0
1
5
0
0
8
1
3
0
1
0
1
8
3
2
1
1
0
0
2
1
1
0
2
1
1
0
1
0
1
0
0
0
1
2
1
4
3
2
1
0
2
1
7
1
2
1
1
0
1
0
2
0
1
0
15
1
10
1
0
1
1
8
14
1
5
10
0
2
1
1
7
1
1
0
8
3
0
0
0
1
1
0
0
1
0
0
2
1
0
0
1
9
0
1
1
0
1
1
0
1
1
0
1
0
0
1
0
3
2
0
1
4
1
0
1
1
0
1
0
0
3
2
1
1
1
1
1
1
0
0
0
1
7
2
0
1
0
1
4
10
1
2
2
1
0
0
1
1
1
0
1
8
2
1
1
0
1
1
1
4
9
0
1
0
1
2
0
2
0
0
0
0
1
1
1
1
1
0
0
1
1
0
1
1
1
0
11
2
1
0
0
1
1
2
3
1
6
3
0
1
0
0
4
0
10
0
0
1
0
4
0
0
1
8
0
1
0
8
5
1
3
0
1
7
3
0
0
1
0
2
1
8
1
3
1
0
0
0
2
0
1
0
4
1
1
1
7
2
0
1
0
2
1
1
0
0
0
0
1
0
1
4
15
1
1
1
1
1
0
0
0
0
0
0
0
0
0
1
0
0
1
1
2
0
1
0
0
0
1
2
0
4
0
2
11
0
1
11
1
0
2
2
1
0
1
3
1
1
0
0
4
0
3
1
0
2
2
0
2
0
0
1
0
0
0
1
0
1
12
0
1
1
1
2
1
3
0
1
6
0
0
0
0
3
2
10
1
3
1
0
1
0
1
1
0
0
1
10
0
1
1
0
0
1
0
0
2
0
1
1
0
1
1
1
1
10
11
0
1
0
0
5
1
2
1
1
1
2
0
1
1
1
0
9
0
0
11
0
14
0
9
6
1
2
0
1
4
2
0
10
1
0
3
4
1
15
1
0
1
11
0
1
0
1
1
1
1
0
3
2
1
0
2
0
1
1
0
0
1
0
10
2
1
2
0
0
1
6
3
0
5
6
0
0
0
1
0
0
5
0
1
0
0
1
0
3
3
2
0
1
1
1
3
1
0
2
0
1
0
0
0
4
2
1
7
15
1
1
0
0
2
1
1
1
3
1
2
0
2
5
10
0
1
0
14
0
0
1
1
0
2
1
0
1
1
0
0
0
5
1
1
1
1
5
0
1
1
0
9
0
1
0
0
0
2
1
5
1
0
1
0
1
1
11
1
0
1
9
1
1
0
1
0
4
0
2
0
0
1
1
0
1
6
3
1
5
1
0
1
0
1
13
0
0
0
2
0
2
0
0
1
0
5
0
0
1
2
0
1
17
0
1
0
1
0
1
0
0
1
0
9
0
1
0
17
1
0
0
1
1
1
1
0
0
8
1
0
2
0
0
1
0
0
0
1
3
0
0
2
1
1
3
0
0
0
1
1
1
1
0
0
7
1
1
9
0
8
0
12
0
6
0
4
0
4
0
6
0
0
1
0
0
0
0
4
1
0
2
0
1
0
1
1
0
0
1
0
0
1
0
0
0
0
1
1
0
1
1
1
0
0
1
1
1
1
0
0
1
1
3
1
0
0
1
4
1
0
12
1
0
1
1
0
2
0
0
0
4
3
8
0
2
0
1
0
4
1
2
0
0
1
1
1
1
0
1
2
0
0
2
2
2
1
4
0
1
1
0
1
3
1
1
2
1
1
2
0
4
0
0
0
0
13
1
1
1
0
1
1
0
0
1
7
0
1
0
0
0
1
2
10
1
1
2
1
0
0
0
10
11
0
7
3
3
1
1
1
1
7
2
1
2
1
0
1
0
0
1
2
1
11
2
0
0
1
1
1
1
1
1
1
1
3
1
1
1
1
1
0
0
0
3
4
1
0
0
1
1
0
8
3
0
1
6
1
15
0
0
0
1
0
11
0
0
0
0
0
0
1
1
1
0
8
7
0
0
2
0
0
0
0
3
0
0
3
0
1
1
1
0
1
0
1
1
1
1
3
0
0
0
3
2
4
1
1
2
0
2
1
18
3
0
0
0
1
1
1
3
0
1
0
1
0
3
0
1
2
1
3
2
1
2
5
1
0
1
4
0
0
6
1
2
1
1
11
1
0
0
0
1
0
0
2
1
7
0
3
0
1
3
2
0
0
1
0
9
1
2
0
0
1
1
1
0
0
0
0
0
1
3
0
11
0
1
0
17
0
1
1
1
1
1
1
1
2
4
1
1
3
0
0
1
1
18
0
0
3
0
1
1
0
1
1
5
1
2
9
0
2
1
1
1
1
1
2
1
0
0
0
0
1
1
2
12
1
0
4
1
2
3
1
0
2
4
0
4
1
1
2
0
0
0
1
0
0
0
4
1
0
6
1
1
1
1
1
1
1
3
1
1
0
1
2
2
1
0
1
2
16
0
0
1
13
1
0
0
0
0
1
0
1
1
1
0
2
2
0
4
0
0
0
2
0
0
0
1
0
1
1
1
0
1
1
18
2
0
0
1
1
1
0
1
2
3
1
1
0
1
1
0
0
1
1
0
1
1
1
0
0
0
2
0
1
0
2
1
0
4
3
0
0
0
0
0
0
1
0
0
0
1
2
4
0
2
2
1
1
3
0
1
1
0
2
0
1
1
3
0
1
1
1
1
0
0
0
0
0
2
0
1
3
10
0
0
0
0
7
1
3
0
0
1
0
0
1
1
2
4
0
0
0
1
0
0
0
1
2
2
1
0
1
1
1
0
11
1
9
0
3
1
0
3
1
2
0
0
2
0
0
6
1
1
2
0
1
1
0
1
0
0
0
1
13
1
3
1
1
1
2
0
0
0
2
6
0
0
5
0
1
0
1
0
2
2
1
1
0
0
0
2
0
3
1
4
1
0
1
1
0
1
0
2
13
0
1
1
0
0
2
0
0
0
5
0
0
2
1
1
1
1
1
0
0
5
2
1
0
0
2
0
4
6
0
1
1
17
5
1
1
1
0
1
14
1
1
2
0
3
1
1
0
7
0
1
0
1
1
1
0
1
1
1
1
2
1
1
0
16
0
1
1
0
14
1
1
1
2
0
0
1
0
0
1
3
0
0
1
1
0
5
0
0
1
1
1
1
1
0
1
0
0
1
0
0
0
1
0
1
1
0
0
0
0
1
2
1
0
0
1
4
1
1
0
0
0
0
1
1
2
2
0
3
3
0
2
1
1
0
1
0
1
13
2
0
0
0
4
14
4
1
0
0
0
0
0
0
1
1
0
0
1
2
0
1
1
1
12
1
3
1
0
1
1
1
1
16
1
0
1
0
1
0
3
0
1
9
1
0
1
2
1
2
0
5
0
0
1
0
0
0
1
1
1
0
0
1
5
1
0
1
11
0
0
0
0
0
5
1
0
1
1
1
2
0
1
3
0
1
1
0
0
1
0
1
0
0
1
1
0
1
0
5
1
1
1
0
2
1
2
0
0
5
0
0
1
0
0
1
2
3
0
1
0
3
0
2
0
0
1
4
0
4
1
0
0
1
0
1
0
1
0
1
2
0
1
3
3
0
2
4
0
1
2
1
1
0
0
0
0
0
1
0
0
0
3
0
0
0
1
4
4
0
1
1
0
0
0
0
3
1
2
1
1
1
1
0
3
0
0
0
1
1
1
0
0
1
1
0
1
0
1
7
0
0
1
0
1
2
5
0
0
1
1
1
0
1
20
0
1
1
3
0
1
6
0
0
0
0
11
0
1
0
0
0
0
1
1
1
1
0
0
0
0
0
1
1
1
1
18
1
1
0
4
1
1
11
7
2
6
2
0
1
1
0
0
1
1
0
11
0
1
3
1
1
2
6
1
0
2
0
1
11
2
0
4
0
1
3
1
0
1
1
4
3
0
1
1
0
13
0
5
0
1
1
]]></test_output>
        <hint><![CDATA[<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">The term definitions in this problem use a modified BNF grammar notation that is described in the official documentation of the Python programming language. Here is the explanation of the notation, extracted from the documentation:</span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>
<i style="mso-bidi-font-style:normal"><span lang="EN-US" style="font-size:10.0pt;
font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:宋体;mso-ansi-language:
EN-US;mso-fareast-language:ZH-CN;mso-bidi-language:AR-SA">Each rule begins with a name (which is the name defined by the rule) and ::=. A vertical bar (|) is used to separate alternatives; it is the least binding operator in this notation. A star (*) means zero or more repetitions of the preceding item; likewise, a plus (+) means one or more repetitions, and a phrase enclosed in square brackets ([ ]) means zero or one occurrences (in other words, the enclosed phrase is optional). The * and + operators bind as tightly as possible; parentheses are used for grouping. Literal strings are enclosed in quotes. White space is only meaningful to separate tokens. Rules are normally contained on a single line; rules with many alternatives may be formatted alternatively with each line after the first beginning with a vertical bar</span></i>]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include<vector>
#include<map> 
#include<string>
#include<cstring>
#include<cstdio>
#include<cstdlib>
using namespace std;

struct rec
{
	int flag;
	int x;
	string y;
	int z;
    rec() { flag=0; x=0; y=""; z=0; }    
};

bool operator<(rec a,rec b)
{
	if (a.flag!=b.flag)
		return a.flag<b.flag;
	if (a.x!=b.x)
		return a.x<b.x;
	if (a.y!=b.y)
		return a.y<b.y;
	return a.z<b.z;
}

rec v[100];
map<rec,rec> a[100000];
string s;
int n;
int zhan[100000];
int used[100000];
int used1[100000];

rec parsemap(int x,int y);

int dfs(int x)
{
	for (map<rec,rec>::iterator it=a[x].begin();it!=a[x].end();it++)
	{
		if (it->second.flag==2)
		{
			if (used[it->second.z]==0)
			{
				used[it->second.z]=1;
				used1[it->second.z]=1;
				if (dfs(it->second.z)) return 1;
				used1[it->second.z]=0;
			}
			else if (used1[it->second.z]==1) return 1;
		}
	}
	return 0;
}

int test(int x)
{
	int top,bottom;
	top=0;bottom=1;
	memset(used,0,sizeof(used));
	memset(used1,0,sizeof(used1));
	used[x]=1;
	used1[x]=1;
	return dfs(x);
}

rec parsekey(int x,int y)
{
	rec p;
	while (s[x]==' ') x++;
	while (s[y]==' ') y--;
	if (s[x]=='\'')
	{
		p.flag=1;
		p.x=0;
		p.y=s.substr(x+1,y-x-1);
		p.z=0;
	}
	else
	{
		p.flag=0;
		p.x=atoi(s.substr(x,y-x+1).c_str());
		p.y="";
		p.z=0;
	}
	return p;
}

pair<rec,rec> parsepair(int x,int y)
{
	pair<rec,rec> ans;
	int i;
	for (i=x;i<=y;i++)
		if (s[i]==':') break;
	ans.first=parsekey(x,i-1);
	
	i++;
	for (;i<=y;i++)
		if (s[i]!=' ') break;


	if (s[i]=='{')
	{
		ans.second=parsemap(i,y);
	}
	else
	{
		ans.second=parsekey(i,y);
	}
	return ans;
}

rec parsemap(int x,int y)
{
	int i,j,prev,cnt;
	pair<rec,rec> tmp;
	rec ans;
	ans.flag=2;
	ans.x=0;
	ans.y="";
	ans.z=n;
	n++;
	cnt=0;
	for (i=x;i<=y;i++)
		if (s[i]!=' ') cnt++;
	if (cnt==2)
	{
		return ans;
	}
	j=0;
	i=x+1;
	prev=x;
	while (1)
	{
		for (;i<y;i++)
		{
			if (s[i]=='{') j++;
			if (s[i]=='}') j--;
			if ((j==0)&&(s[i]==',')) break;
		}
		tmp=parsepair(prev+1,i-1);
		a[ans.z][tmp.first]=tmp.second;
		if (i==y)
		{
			break;
		}
		prev=i;
		i++;
	}
	return ans;
}

pair<int,rec> parseleft(int x,int y)
{
	pair<int,rec> p;
	rec q;
	int i,l,r;
	for (i=x;i<=y;i++) if (s[i]!=' ') break;

	p.first=s[i]-'a';
	p.second.flag=-1;
	p.second.x=0;
	p.second.y="";
	p.second.z=0;
	while (1)
	{
		i++;
		for (;i<=y&&i<s.length();i++)
			if (s[i]=='[') break;
		l=i;
		for (;i<=y&&i<s.length();i++)
			if (s[i]==']') break;
		r=i;
		if (i>y) break;
		q=parsekey(l+1,r-1);
		if (p.second.flag==-1)
		{
			p.first=v[p.first].z;
			p.second=q;
		}
		else
		{
			p.first=a[p.first][p.second].z;
			p.second=q;
		}
	}
	return p;
}

rec parseright(int x,int y)
{
	rec ans;
	while (s[x]==' ') x++;
	while (s[y]==' ') y--;
	if ((s[x]>='a')&&(s[x]<='z'))
	{
		pair<int,rec> tmp=parseleft(x,y);
		if (tmp.second.flag==-1)
		{
			ans.flag=2;
			ans.x=0;
			ans.y="";
			ans.z=v[tmp.first].z;
		}
		else
		{
			ans=a[tmp.first][tmp.second];
		}
		return ans;
	}
	if (s[x]=='{')
	{
		ans=parsemap(x,y);
		return ans;
	}
	ans=parsekey(x,y);
	return ans;
}

int main()
{
	int i,p;
	char ss[300];
	n=0;
	for (i=0;i<26;i++)
		v[i].z=-1;
	while (1)
	{
		ss[0]=0;
		gets(ss);
		if (ss[0]==0) break;
		s=ss;
		p=s.find_first_of('=');
		if (p==-1)
		{
			p=s.find_first_of('(');
			pair<int,rec> tmp=parseleft(p+1,s.length()-2);
			int ind;
			if (tmp.second.flag==-1)
				ind=v[tmp.first].z;
			else
				ind=a[tmp.first][tmp.second].z;
			if (s[0]=='l')
			{
				printf("%d\n",a[ind].size());
			}
			else
			{
				printf("%d\n",test(ind));
			}
		}
		else
		{
			p=s.find_first_of('=');
			pair<int,rec> tmp=parseleft(0,p-1);
			if (tmp.second.flag==-1)
				v[tmp.first]=parseright(p+1,s.length()-1);
			else
				a[tmp.first][tmp.second]=parseright(p+1,s.length()-1);
		}
	}
	return 0;
}
]]></solution>
    </item>
    <item>
        <title><![CDATA[Tetrahedrons and Spheres]]></title>
        <time_limit unit="s"><![CDATA[1]]></time_limit>
        <memory_limit unit="mb"><![CDATA[128]]></memory_limit>

        <description><![CDATA[<p><!--[if gte mso 9]><xml>
<w:WordDocument>
<w:View>Normal</w:View>
<w:Zoom>0</w:Zoom>
<w:PunctuationKerning />
<w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
<w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
<w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
<w:ValidateAgainstSchemas />
<w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
<w:IgnoreMixedContent>false</w:IgnoreMixedContent>
<w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
<w:Compatibility>
<w:SpaceForUL />
<w:BalanceSingleByteDoubleByteWidth />
<w:DoNotLeaveBackslashAlone />
<w:ULTrailSpace />
<w:DoNotExpandShiftReturn />
<w:AdjustLineHeightInTable />
<w:BreakWrappedTables />
<w:SnapToGridInCell />
<w:WrapTextWithPunct />
<w:UseAsianBreakRules />
<w:DontGrowAutofit />
<w:UseFELayout />
</w:Compatibility>
<w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
</w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
<w:LatentStyles DefLockedState="false" LatentStyleCount="156">
</w:LatentStyles>
</xml><![endif]--><!--[if gte mso 10]>
<style>
/* Style Definitions */
table.MsoNormalTable
{mso-style-name:普通表格;
mso-tstyle-rowband-size:0;
mso-tstyle-colband-size:0;
mso-style-noshow:yes;
mso-style-parent:"";
mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
mso-para-margin:0cm;
mso-para-margin-bottom:.0001pt;
mso-pagination:widow-orphan;
font-size:10.0pt;
font-family:"Times New Roman";
mso-ansi-language:#0400;
mso-fareast-language:#0400;
mso-bidi-language:#0400;}
</style>
<![endif]--></p>
<p class="MsoNormal"><span lang="EN-US">There are <i>a </i>tetrahedrons and <i>b</i> spheres in the 3D-splace, you&rsquo;re asked to calculate the volume occupied by at least one of them (i.e. volume of the union of the objects).</span></p>
<p class="MsoNormal"><span lang="EN-US">&nbsp;</span></p>
<h1><span lang="NL" style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:&quot;Times New Roman&quot;">Input</span></h1>
<p class="MsoNormal"><span lang="EN-US">There will be at most </span><span lang="EN-US" style="mso-fareast-language:ZH-CN">2</span><span lang="EN-US">0 test cases. Each case begins with two integers<i> a</i>, <i>b</i>, the number of tetrahedrons and the number of spheres (1&lt;=<i>a</i>,<i>b</i>&lt;=5). The next <i>a </i>lines each contains 12 integers: <i style="mso-bidi-font-style:
normal">x</i><sub>1</sub>,</span><span lang="EN-US" style="mso-fareast-language:
ZH-CN"> </span><i style="mso-bidi-font-style:normal"><span lang="EN-US">y</span></i><sub><span lang="EN-US">1</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:normal"><span lang="EN-US">z</span></i><sub><span lang="EN-US">1</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:
normal"><span lang="EN-US">x</span></i><sub><span lang="EN-US">2</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:normal"><span lang="EN-US">y</span></i><sub><span lang="EN-US">2</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:normal"><span lang="EN-US">z</span></i><sub><span lang="EN-US">2</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:
normal"><span lang="EN-US">x</span></i><sub><span lang="EN-US">3</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:normal"><span lang="EN-US">y</span></i><sub><span lang="EN-US">3</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:normal"><span lang="EN-US">z</span></i><sub><span lang="EN-US">3</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:
normal"><span lang="EN-US">x</span></i><sub><span lang="EN-US">4</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:normal"><span lang="EN-US">y</span></i><sub><span lang="EN-US">4</span></sub><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i style="mso-bidi-font-style:normal"><span lang="EN-US">z</span></i><sub><span lang="EN-US">4</span></sub><span lang="EN-US">, the coordinates (<i>x<sub>i</sub></i>,</span><span lang="EN-US" style="mso-fareast-language:
ZH-CN"> </span><i><span lang="EN-US">y<sub>i</sub></span></i><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i><span lang="EN-US">z<sub>i</sub></span></i><span lang="EN-US">)(1&lt;=<i>i</i>&lt;=4) of the four vertices<span style="mso-spacerun:yes">&nbsp; </span>of a tetrahedron. The next <i style="mso-bidi-font-style:normal">b</i> lines each contains 4 integers <i>x</i>,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i><span lang="EN-US">y</span></i><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i><span lang="EN-US">z</span></i><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i><span lang="EN-US">r</span></i><span lang="EN-US">, the coordinates of the center (<i>x</i>,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i><span lang="EN-US">y</span></i><span lang="EN-US">,</span><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span><i><span lang="EN-US">z</span></i><span lang="EN-US">) and the radius<i> r</i></span><i><span lang="EN-US" style="mso-fareast-language:ZH-CN"> </span></i><span lang="EN-US" style="mso-bidi-font-style:italic">(<i>r</i>&lt;=3)</span><span lang="EN-US">. All the coordinate values are integers with absolute values no more than 5. The input is terminated by <i>a</i>=<i>b</i>=0.</span></p>
<p style="line-height:normal" class="MsoFooter"><span lang="EN-US" style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">&nbsp;</span></p>
<h1><span lang="NL" style="font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:&quot;Times New Roman&quot;">Output</span></h1>
<p class="MsoNormal"><span lang="EN-US">For each test case, print a single line, the volume occupied by at least one of them, </span><span lang="EN-US" style="mso-fareast-language:ZH-CN">rounded </span><span lang="EN-US">to three decimal points. </span></p>
<p class="MsoNormal"><span lang="EN-US" style="mso-fareast-font-family:宋体;
mso-fareast-language:ZH-CN">&nbsp;</span></p>]]></description>
        <input><![CDATA[]]></input>
        <output><![CDATA[]]></output>
        <sample_input><![CDATA[1 1
0 0 4 1 0 4 0 1 4 0 0 5
0 0 0 1
0 0
]]></sample_input>
        <sample_output><![CDATA[4.356
]]></sample_output>
        <test_input><![CDATA[4 2
2 -2 -5 -4 -4 1 -3 -5 3 -1 3 2
2 4 2 3 2 5 -1 -3 3 1 5 3
-4 -5 4 3 0 -2 -3 4 -3 -4 5 -4
4 2 3 3 3 -5 0 -3 5 4 4 2
4 5 -1 1
-3 -3 5 3
5 2
2 2 -2 -2 2 0 1 -2 -5 5 2 -3
-1 -4 -5 -2 3 4 -5 1 -4 -3 -4 -4
1 -3 2 4 -4 4 -4 -2 -5 -1 1 -1
5 3 3 4 1 -4 2 5 -3 1 -1 0
2 -3 -3 4 4 2 -3 2 3 -5 -2 5
-4 -5 4 1
-1 3 5 1
3 3
0 3 -4 4 -2 -5 3 1 0 4 -1 3
-4 1 -2 1 -1 3 4 5 -1 -1 -1 4
4 3 -2 -4 -3 0 -2 0 -3 4 -1 0
-3 3 1 3
5 -3 1 2
1 -3 5 2
3 3
-1 -3 4 5 2 3 -3 5 -2 2 4 1
1 -4 0 -3 2 3 1 -3 -1 4 5 2
0 -3 -3 2 5 -4 0 -1 -4 -4 4 1
0 4 -3 1
-2 0 5 3
1 5 -1 3
3 4
-5 4 -3 0 4 5 -2 1 2 0 1 -2
-2 0 -3 4 2 -5 1 1 4 -2 5 4
1 2 2 1 4 -2 0 -1 -3 -4 4 1
1 -1 -3 1
3 -2 -1 2
-3 5 1 1
1 0 -3 1
1 3
-3 -2 -2 -3 -1 -4 4 -1 -3 -5 4 1
3 0 -3 2
3 -1 -3 3
-5 -3 2 1
4 5
2 0 -3 5 -3 -3 0 -4 -1 4 -4 -5
5 4 -2 -1 -1 4 3 -3 5 -2 -5 -4
-1 -5 5 5 4 -5 -5 -1 4 -5 -1 -1
1 5 2 1 0 -4 0 -3 -5 1 4 -1
-2 -1 4 1
5 -3 -4 3
5 3 4 3
5 2 4 3
-2 -5 1 3
1 3
5 -1 -1 0 -5 4 -2 2 2 5 2 0
1 -2 -3 3
1 -1 3 3
1 1 3 2
5 2
0 1 1 -1 1 -5 4 -2 -4 2 4 3
4 4 1 3 -4 -5 -4 2 -1 -2 2 2
-5 -3 5 3 -5 4 2 2 3 -2 4 2
5 -5 2 0 3 -3 0 3 -2 5 4 5
3 3 4 3 -1 0 -5 0 -5 -2 3 1
2 5 -4 1
-2 -4 -4 2
4 4
1 -3 -1 4 5 3 3 1 0 -5 2 -1
4 -2 -5 5 2 1 -3 -3 3 0 5 4
3 0 1 -5 -4 -3 -2 -4 -2 5 1 -3
-4 4 0 3 -5 -1 5 -4 -5 -5 -3 0
-4 5 1 1
-5 -3 -3 3
5 -1 3 2
-4 -4 4 2
2 3
-1 -5 3 4 2 -5 2 3 4 -2 0 0
2 -1 5 4 3 1 -4 -1 -1 -1 -4 -1
-4 2 -5 1
-3 3 1 2
1 -3 4 1
2 5
-4 -5 -3 1 1 2 4 -2 4 -5 -3 1
-5 0 4 5 3 3 3 3 4 -1 5 -5
-1 -2 4 3
-5 0 -4 2
0 -1 -2 1
2 3 0 2
1 -1 2 2
1 1
-2 -2 5 -1 2 3 3 5 -2 0 -3 2
-3 -5 -5 3
5 3
5 -1 2 3 3 -4 5 -3 -3 -4 3 0
-1 5 -1 0 2 -1 -1 5 -2 -1 4 -2
3 3 0 -2 2 -1 5 3 0 3 3 -3
-5 -4 2 -2 -1 4 -1 -1 -1 -4 1 1
3 -1 1 -5 3 4 -4 -5 -3 -5 0 -2
2 2 5 3
4 3 -4 3
-2 -2 2 2
1 3
4 5 5 2 5 2 5 2 3 0 3 4
-2 5 5 3
2 1 -5 3
5 2 5 2
3 2
-5 -1 2 5 -1 2 -4 3 3 3 3 -4
-5 -5 -5 4 1 4 -1 -2 2 2 5 4
3 5 1 1 3 0 3 2 0 -1 4 -5
1 -3 2 2
-2 4 2 2
2 1
-3 -1 4 -4 -4 1 -4 0 3 4 -2 2
-5 1 -1 5 4 -3 5 1 2 -5 3 3
-4 1 4 2
0 0
]]></test_input>
        <test_output><![CDATA[161.907
88.103
206.544
249.419
102.574
132.846
479.479
241.332
99.793
273.629
102.187
228.904
115.431
331.181
266.866
135.359
77.998
]]></test_output>
        <hint><![CDATA[]]></hint>
        <source><![CDATA[湖南省第六届大学生计算机程序设计竞赛]]></source>
        <solution language="C++"><![CDATA[#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <algorithm>
#include <vector>
using namespace std;
#define sqr(x) ((x)*(x))

const double eps=1e-6;
const double inf=8;

const double pi=3.14159265358979323846;

inline bool cmpDouble(const double &a,const double &b)
{return fabs(a-b)<eps;}
struct Tpoint
{
	double x,y;
	Tpoint(){}
	Tpoint(double a,double b){x=a;y=b;}
	inline double norm(){ return sqrt( sqr(x)+sqr(y) ); }
};

inline Tpoint operator +(const Tpoint &a,const Tpoint &b){return Tpoint(a.x+b.x,a.y+b.y);}
inline Tpoint operator -(const Tpoint &a,const Tpoint &b){return Tpoint(a.x-b.x,a.y-b.y);}
inline Tpoint operator *(const double &a,const Tpoint &b){return Tpoint(a*b.x,a*b.y);}
inline Tpoint operator *(const Tpoint &b,const double &a){return Tpoint(a*b.x,a*b.y);}
inline Tpoint operator /(const Tpoint &a,const double &b){return Tpoint(a.x/b,a.y/b);}
inline bool operator <(const Tpoint &a,const Tpoint &b){return a.x+eps<b.x || fabs(a.x-b.x)<eps && a.y+eps<b.y;}
inline bool operator ==(const Tpoint &a,const Tpoint &b){return fabs(a.x-b.x)<eps && fabs(a.y-b.y)<eps;}
inline double det(const Tpoint &a,const Tpoint &b){return a.x*b.y-a.y*b.x;}
inline double dot(const Tpoint &a,const Tpoint &b){return a.x*b.x+a.y*b.y;}

struct P3
{
	double x,y,z;
	
	P3(){}
	P3(double a,double b,double c){x=a;y=b;z=c;}
	inline void read(){scanf("%lf%lf%lf",&x,&y,&z);}
};
inline P3 operator +(const P3 &a,const P3 &b){return P3(a.x+b.x,a.y+b.y,a.z+b.z);}
inline P3 operator -(const P3 &a,const P3 &b){return P3(a.x-b.x,a.y-b.y,a.z-b.z);}
inline P3 operator *(const double &a,const P3 &b){return P3(a*b.x,a*b.y,a*b.z);}
inline P3 operator *(const P3 &b,const double &a){return P3(a*b.x,a*b.y,a*b.z);}
inline P3 operator /(const P3 &a,const double &b){return P3(a.x/b,a.y/b,a.z/b);}

struct Tcir
{
	double r;
	Tpoint o;
	
	Tcir(){}
	Tcir(Tpoint x,double y){o=x,r=y;}
};
vector <Tcir> Circle;
typedef vector <Tpoint> TP;
vector <TP> Poly;

struct Tinter
{
	double x,y,Area,mid;
	int delta;
	Tinter(){}
	Tinter(double xx,double yy,double mm,int dd,double aa)
	{
		x=xx;y=yy;mid=mm;
		delta=dd;Area=aa;
	}
};
inline bool operator <(const Tinter &a,const Tinter &b){return a.mid>b.mid+eps;}
inline bool operator ==(const Tinter &a,const Tinter &b){return fabs(a.mid-b.mid)<eps;}
vector <Tinter> inter;
vector <double> bak;

inline double dist(const Tpoint &a,const Tpoint &b)
{
	return sqr(a.x-b.x)+sqr(a.y-b.y);
}

inline void Add(double x)
{
	bak.push_back(x);
}

inline void CircleIntersectCircle(const Tcir &a,const Tcir &b)
{
	double l=dist(a.o,b.o);
	double s=((a.r-b.r)*(a.r+b.r)/l+1)/2;
	double t=sqrt(-(l-sqr(a.r+b.r))*(l-sqr(a.r-b.r))/(l*l*4));
	double ux=b.o.x-a.o.x,uy=b.o.y-a.o.y;
	double ix=a.o.x+s*ux+t*uy,iy=a.o.y+s*uy-t*ux;
	double jx=a.o.x+s*ux-t*uy,jy=a.o.y+s*uy+t*ux;
	Add(ix);
	Add(jx);
}

inline bool InLine(const Tpoint &a,const Tpoint &b,const Tpoint &c)
{
	return fabs(det(b-a,c-a))<eps && dot(a-c,b-c)<eps;
}

inline void LineToLine(const Tpoint &a,const Tpoint &b,const Tpoint &c,const Tpoint &d)
{
	double s1=det(c-a,b-a),s2=det(b-a,d-a);
	if (s1*s2<-eps) return;
	Tpoint e=c+(d-c)*s1/(s1+s2);
	
	if (InLine(a,b,e) && InLine(c,d,e))
	{
		Add(e.x);
	}
}

inline void LineToCircle(const Tpoint &a,const Tpoint &b,const Tcir &c)
{
	double h=fabs(det(c.o-a,b-a))/(b-a).norm();
	if (h>c.r+eps) return;
	double lamda=dot(c.o-a,b-a);
	lamda/=dist(a,b);
	Tpoint x=a+(b-a)*lamda;
	double d=sqrt( sqr(c.r)-sqr(h) );
	d/=(b-a).norm();
	Tpoint e=x+(b-a)*d;
	Tpoint f=x-(b-a)*d;
	if (InLine(a,b,e))
		Add(e.x);
	if (InLine(a,b,f))
		Add(f.x);
	return;
}

inline void CircleToCircle()
{
	for (int i=0;i<Circle.size();++i)
	{
		Add(Circle[i].o.x-Circle[i].r);
		Add(Circle[i].o.x+Circle[i].r);
		Add(Circle[i].o.x);
		for (int j=i+1;j<Circle.size();++j)
		if (dist(Circle[i].o,Circle[j].o)<=sqr(Circle[i].r+Circle[j].r))
		if (dist(Circle[i].o,Circle[j].o)>=sqr(Circle[i].r-Circle[j].r))
			CircleIntersectCircle(Circle[i],Circle[j]);
	}
}

inline void CircleToPoly()
{
	for (int i=0;i<Circle.size();++i)
		for (int j=0;j<Poly.size();++j)
			for (int v=0;v<Poly[j].size();++v)
				LineToCircle(Poly[j][v],Poly[j][(v+1)%Poly[j].size()],Circle[i]);
}

inline void PolyToPoly()
{
	for (int i=0;i<Poly.size();++i)
		for (int u=0;u<Poly[i].size();++u)
			Add(Poly[i][u].x);
	for (int i=0;i<Poly.size();++i)
		for (int j=i+1;j<Poly.size();++j)
			for (int u=0;u<Poly[i].size();++u)
				for (int v=0;v<Poly[j].size();++v)
					LineToLine(Poly[i][u],Poly[i][(u+1)%Poly[i].size()],Poly[j][v],Poly[j][(v+1)%Poly[j].size()]);
}

inline void Get(const Tcir &c,double x,double &l,double &r)
{
	double y=fabs(c.o.x-x);
	double d=sqrt(fabs( sqr(c.r)-sqr(y) ));
	l=c.o.y+d;
	r=c.o.y-d;
}

inline double arcArea(const Tcir &a,double l,double x,double r,double y)
{
	double len=sqrt(sqr(l-r) + sqr(x-y));
	double d=sqrt(sqr(a.r)-sqr(len)/4.0);
	double angle=atan(len/2.0/d);
	return fabs(angle*sqr(a.r)-d*len/2.0);
}

inline void Get_Interval(const Tcir &a,double l,double r)
{
	double L1,L2,R1,R2,M1,M2;
	Get(a,l,L1,L2);
	Get(a,r,R1,R2);
	Get(a,(l+r)/2.0,M1,M2);
	int D1=1,D2=-1;
	double A1=arcArea(a,l,L1,r,R1),A2=arcArea(a,l,L2,r,R2);
	inter.push_back( Tinter(L1,R1,M1,D1,A1) );
	inter.push_back( Tinter(L2,R2,M2,D2,A2) );
}

inline double calcSlice(double xl,double xr)
{
	inter.clear();
	double lmost=-inf,rmost=inf;
	for (int i=0;i<Poly.size();++i)
	{
		int cc=0;
		Tinter I[5];
		for (int u=0;u<Poly[i].size();++u)
		{
			Tpoint x=Poly[i][u];
			Tpoint y=Poly[i][(u+1)%Poly[i].size()];
			double l=min(x.x,y.x),r=max(x.x,y.x);
			if (l<=xl+eps && xr<=r+eps)
			{
				if (fabs(l-r)<eps) continue;
				Tpoint d=y-x;
				Tpoint Left=x+d/d.x*(xl-x.x);
				Tpoint Right=x+d/d.x*(xr-x.x);
				Tpoint Mid=(Left+Right)/2;
				I[cc++]=Tinter(Left.y,Right.y,Mid.y,1,0);
			}
		}
		sort(I,I+cc);
		if (cc==2)
		{
			I[1].delta=-1;
			inter.push_back(I[0]);
			inter.push_back(I[1]);
			lmost=max(lmost,I[1].mid);
			rmost=min(rmost,I[0].mid);
		}
	}
	
	for (int i=0;i<Circle.size();++i)
	if (fabs(Circle[i].o.x-xl)<Circle[i].r+eps && fabs(Circle[i].o.x-xr)<Circle[i].r+eps)
		Get_Interval(Circle[i],xl,xr);
	
	if (!inter.size()) return 0;
	double ans=0;
	sort(inter.begin(),inter.end());
	int cnt=0;
	for (int i=0;i<inter.size();++i)
	{
		if (cnt>0)
		{
			ans+=(fabs(inter[i-1].x-inter[i].x)+fabs(inter[i-1].y-inter[i].y))*(xr-xl)/2.0;
			ans+=inter[i-1].delta*inter[i-1].Area;
			ans-=inter[i].delta*inter[i].Area;
		}
		cnt+=inter[i].delta;
	}
	return ans;
}

#define maxn 105
int n,m;
struct Poly4
{
	P3 p[4];
}a[maxn];
struct Sphere
{
	P3 o;
	double r;
	inline void read(){o.read();scanf("%lf",&r);}
}b[maxn];

inline bool equal(double a,double b)
{
	return fabs(a-b)<eps;
}

inline bool InterSect(const Tpoint &a,const Tpoint &b,const Tpoint &c,const Tpoint &d)
{
	double s1=det(b-a,c-a),s2=det(b-a,d-a);
	if (s1*s2>-eps) return false;
	s1=det(d-c,a-c),s2=det(d-c,b-c);
	if (s1*s2>-eps) return false;
	return true;
}

inline void ToHull(vector <Tpoint> &a)
{
	sort(a.begin(),a.end());
	int hull[10],len,limit=1;
	hull[len=1]=0;
	for (int i=1;i<4;++i)
	{
		while (len>limit && det(a[hull[len]]-a[hull[len-1]],a[i]-a[hull[len]])>=0) --len;
		hull[++len]=i;
	}
	limit=len;
	for (int i=2;i>=0;--i)
	{
		while (len>limit && det(a[hull[len]]-a[hull[len-1]],a[i]-a[hull[len]])>=0) --len;
		hull[++len]=i;
	}
	vector <Tpoint> b=a;
	a.resize(len-1);
	for (int i=0;i<len-1;++i)
		a[i]=b[hull[i+1]];
}

inline double calcArea(double z)
{
	Poly.clear();
	Circle.clear();
	bak.clear();
	for (int i=0;i<n;++i)
	{
		vector <Tpoint> cross;
		for (int j=0;j<4;++j)
			for (int k=j+1;k<4;++k)
			if (!equal(a[i].p[j].z,a[i].p[k].z))
			{
				double l=min(a[i].p[j].z,a[i].p[k].z),r=max(a[i].p[j].z,a[i].p[k].z);
				if (l<=z+eps && z<=r+eps)
				{
					P3 d=a[i].p[k]-a[i].p[j];
					d=d/d.z;
					d=d*(z-a[i].p[j].z);
					d=d+a[i].p[j];
					Tpoint x(d.x,d.y);
					cross.push_back(x);
				}
			}
		sort(cross.begin(),cross.end());
		cross.erase(unique(cross.begin(),cross.end()),cross.end()); 
		if (cross.size()>2)
		{
			if (cross.size()>4){puts("Too Many Points!!!");while (1);}
			if (cross.size()==4)
				ToHull(cross);
			Poly.push_back(cross);
		}
	}
	
	for (int i=0;i<m;++i)
	if (fabs(z-b[i].o.z)+eps<b[i].r)
	{
		Tpoint o(b[i].o.x,b[i].o.y);
		double r=sqrt( sqr(b[i].r)-sqr(z-b[i].o.z) );
		Circle.push_back(Tcir(o,r));
	}
	
	CircleToCircle();
	CircleToPoly();
	PolyToPoly();
    
	sort(bak.begin(),bak.end());
	double res=0;
	for (int i=0;i+1<bak.size();++i)
	if (fabs(bak[i+1]-bak[i])>eps)
		res+=calcSlice(bak[i],bak[i+1]);
	return res;
}

int main()
{
	for (;scanf("%d%d",&n,&m)!=EOF && (n+m);)
	{
		for (int i=0;i<n;++i)
			for (int j=0;j<4;++j)
				a[i].p[j].read();
		
		for (int i=0;i<m;++i)
			b[i].read();
		
		double last=0,Ans=calcArea(-inf)+calcArea(inf);
		const int Block=4000;
		double h=(inf+inf)/(double)Block;
		for (int i=1;i<Block;i+=2)
			Ans+=4*calcArea(-inf+i*h);
		for (int i=2;i<Block;i+=2)
			Ans+=2*calcArea(-inf+i*h);
		Ans=Ans*h/3.0;
		printf("%.3f\n",Ans);
	}
	return 0;
}
]]></solution>
    </item>
</fps>